<?xml version="1.0" encoding="utf-8"?>
<trigger version="2">
    <conditions>
        <condition name="Dynamic Trigger NTL: For Each Player Start -> {">
            <param name="Variable" dispname="Variable" vartype="stringid">p</param>
            <param name="LowestPlayer" dispname="Lowest Player" vartype="player">1</param>
            <param name="HighestPlayer" dispname="Highest Player" vartype="player">4</param>
            <param name="Loop" dispname="Loop" vartype="bool">false</param>
            <param name="ActTrue" dispname="Act As True" vartype="bool">true</param>
            <command>for(int %Variable% = %LowestPlayer%; %Variable% &lt;= %HighestPlayer%; %Variable%++){</command>
            <command>   __forEachPlayerTrigger.add(%Loop%, %Variable%, [](int cActivationTime = 0, int %Variable% = 1) -&gt; int {</command>
            <command>       int __forEachPlayerTriggerState = 0;</command>
            <expression>/**/%ActTrue%</expression>
        </condition>
        <condition name="Unit: Is Protounit">
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <param name="Protounit" dispname="Protounit" vartype="protounit">Default</param>
            <expression>kbUnitGetProtoUnitID(%SrcObject%) == kbGetUnitTypeID("%Protounit%")</expression>
        </condition>
        <condition name="Unit: Is Unit Type">
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <param name="UnitType" dispname="Unit Type" vartype="abstractunittype">Unit</param>
            <command>xsSetContextPlayer(-1);</command>
            <command>xsSetContextPlayer(kbUnitGetPlayerID(%SrcObject%));</command>
            <expression>kbProtoUnitIsType(kbUnitGetProtoUnitID(%SrcObject%), kbGetUnitTypeID("%UnitType%"))</expression>
        </condition>
        <condition name="Unit: Exists">
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <expression>kbUnitGetProtoUnitID(%SrcObject%) &gt;= 0</expression>
        </condition>
        <condition name="Unit: Owned By Player Range">
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <param name="LowestPlayer" dispname="Lowest Player" vartype="player">1</param>
            <param name="HighestPlayer" dispname="Highest Player" vartype="player">4</param>
            <command>xsSetContextPlayer(-1);</command>
            <expression>kbUnitGetPlayerID(%SrcObject%) &gt;= %LowestPlayer% &amp;&amp; kbUnitGetPlayerID(%SrcObject%) &lt;= %HighestPlayer%</expression>
        </condition>
        <condition name="Unit NTL: Is Height Above Terrain">
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <param name="Op" dispname="Comparison" vartype="operator">&lt;</param>
            <param name="Height" dispname="Height" vartype="stringid">0.0</param>
            <expression>__xsVectorGetY(trUnitGetPosition(%SrcObject%)) %Op% __getTerrainHeightAccurate(trUnitGetPosition(%SrcObject%)) + %Height%</expression>
        </condition>
        <condition name="Random: Chance">
            <param name="Chance" dispname="Chance" vartype="stringid">0.5</param>
            <expression>xsRandBool(%Chance%)</expression>
        </condition>
        <condition name="Variable: Bool Is Value">
            <param name="Name" dispname="Name" vartype="stringid">boolVariable</param>
            <param name="Value" dispname="Value" vartype="stringid">true</param>
            <expression>/**/%Name% == %Value%</expression>
        </condition>
        <condition name="Variable: Int Is Value">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <param name="Op" dispname="Comparison" vartype="operator">==</param>
            <param name="Value" dispname="Value" vartype="stringid">0</param>
            <expression>/**/%Name% %Op% %Value%</expression>
        </condition>
        <condition name="Variable: Float Is Value">
            <param name="Name" dispname="Name" vartype="stringid">floatVariable</param>
            <param name="Op" dispname="Comparison" vartype="operator">&gt;=</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <expression>/**/%Name% %Op% %Value%</expression>
        </condition>
        <condition name="Variable: String Is Value">
            <param name="Name" dispname="Name" vartype="stringid">stringVariable</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <expression>/**/%Name% == %Value%</expression>
        </condition>
        <condition name="Variable: Vector X Is Value">
            <param name="Name" dispname="Name" vartype="stringid">vectorVariable</param>
            <param name="Op" dispname="Comparison" vartype="operator">&gt;=</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <expression>/**/%Name%.x %Op% %Value%</expression>
        </condition>
        <condition name="Variable: Vector Y Is Value">
            <param name="Name" dispname="Name" vartype="stringid">vectorVariable</param>
            <param name="Op" dispname="Comparison" vartype="operator">&gt;=</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <expression>/**/%Name%.y %Op% %Value%</expression>
        </condition>
        <condition name="Variable: Vector Z Is Value">
            <param name="Name" dispname="Name" vartype="stringid">vectorVariable</param>
            <param name="Op" dispname="Comparison" vartype="operator">&gt;=</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <expression>/**/%Name%.z %Op% %Value%</expression>
        </condition>
        <condition name="Storage NTL: Bool Is Value">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">false</param>
            <param name="Value" dispname="Value" vartype="stringid">false</param>
            <expression>__storageWithBool.get("%Name%", %DefaultValue%) == %Value%</expression>
        </condition>
        <condition name="Storage NTL: Player Bool Is Value">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">false</param>
            <param name="Value" dispname="Value" vartype="stringid">false</param>
            <expression>__storageWithBool.get("__"+%Player%+"__%Name%", %DefaultValue%) == %Value%</expression>
        </condition>
        <condition name="Storage NTL: Int Is Value">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">0</param>
            <param name="Op" dispname="Comparison" vartype="operator">==</param>
            <param name="Value" dispname="Value" vartype="stringid">0</param>
            <expression>__storageWithInt.get("%Name%", %DefaultValue%) %Op% %Value%</expression>
        </condition>
        <condition name="Storage NTL: Player Int Is Value">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">0</param>
            <param name="Op" dispname="Comparison" vartype="operator">==</param>
            <param name="Value" dispname="Value" vartype="stringid">0</param>
            <expression>__storageWithInt.get("__"+%Player%+"__%Name%", %DefaultValue%) %Op% %Value%</expression>
        </condition>
        <condition name="Storage NTL: Float Is Value">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">0.0</param>
            <param name="Op" dispname="Comparison" vartype="operator">&gt;=</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <expression>__storageWithFloat.get("%Name%", %DefaultValue%) %Op% %Value%</expression>
        </condition>
        <condition name="Storage NTL: Player Float Is Value">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">0.0</param>
            <param name="Op" dispname="Comparison" vartype="operator">&gt;=</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <expression>__storageWithFloat.get("__"+%Player%+"__%Name%", %DefaultValue%) %Op% %Value%</expression>
        </condition>
        <condition name="Storage NTL: String Is Value">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">""</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <expression>__storageWithString.get("%Name%", %DefaultValue%) == %Value%</expression>
        </condition>
        <condition name="Storage NTL: Player String Is Value">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">""</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <expression>__storageWithString.get("__"+%Player%+"__%Name%", %DefaultValue%) == %Value%</expression>
        </condition>
        <condition name="Storage NTL: Vector X Is Value">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <param name="Op" dispname="Comparison" vartype="operator">&gt;=</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <expression>__xsVectorGetX(__storageWithVector.get("%Name%", %DefaultValue%)) %Op% %Value%</expression>
        </condition>
        <condition name="Storage NTL: Player Vector X Is Value">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <param name="Op" dispname="Comparison" vartype="operator">&gt;=</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <expression>__xsVectorGetX(__storageWithVector.get("__"+%Player%+"__%Name%", %DefaultValue%)) %Op% %Value%</expression>
        </condition>
        <condition name="Storage NTL: Vector Y Is Value">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <param name="Op" dispname="Comparison" vartype="operator">&gt;=</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <expression>__xsVectorGetY(__storageWithVector.get("%Name%", %DefaultValue%)) %Op% %Value%</expression>
        </condition>
        <condition name="Storage NTL: Player Vector Y Is Value">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <param name="Op" dispname="Comparison" vartype="operator">&gt;=</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <expression>__xsVectorGetY(__storageWithVector.get("__"+%Player%+"__%Name%", %DefaultValue%)) %Op% %Value%</expression>
        </condition>
        <condition name="Storage NTL: Vector Z Is Value">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <param name="Op" dispname="Comparison" vartype="operator">&gt;=</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <expression>__xsVectorGetZ(__storageWithVector.get("%Name%", %DefaultValue%)) %Op% %Value%</expression>
        </condition>
        <condition name="Storage NTL: Player Vector Z Is Value">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <param name="Op" dispname="Comparison" vartype="operator">&gt;=</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <expression>__xsVectorGetZ(__storageWithVector.get("__"+%Player%+"__%Name%", %DefaultValue%)) %Op% %Value%</expression>
        </condition>
        <condition name="World NTL: Location Terrain Is Type">
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <param name="Subtype" dispname="Terrain" vartype="terrainsubtype"></param>
            <expression>trGetTerrainType(vector(%Area%)) == __calculateTerrainTypeId("%Subtype%") &amp;&amp; trGetTerrainSubtype(vector(%Area%)) == __calculateSubTerrainTypeId("%Subtype%")</expression>
        </condition>
        <condition name="World NTL: Location Terrain Is Type Indices">
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <param name="TerrainType" dispname="Terrain Type" vartype="stringid">0</param>
            <param name="TerrainSubType" dispname="Terrain Sub Type" vartype="stringid">0</param>
            <expression>trGetTerrainType(vector(%Area%)) == %TerrainType% &amp;&amp; trGetTerrainSubtype(vector(%Area%)) == %TerrainSubType%</expression>
        </condition>
        <condition name="World NTL: Location Is Height">
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <param name="Op" dispname="Comparison" vartype="operator">&lt;</param>
            <param name="Height" dispname="Height" vartype="stringid">0.0</param>
            <expression>__getTerrainHeightAccurate(vector(%Area%)) %Op% %Height%</expression>
        </condition>
        <condition name="World NTL: Location Is Steepness">
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <param name="Op" dispname="Comparison" vartype="operator">&lt;</param>
            <param name="Steepness" dispname="Steepness" vartype="stringid">0.0</param>
            <expression>__worldGetSteepness(vector(%Area%)) %Op% %Steepness%</expression>
        </condition>
        <condition name="Player: Is Current">
            <param name="Player" dispname="Player" vartype="player">1</param>
            <expression>trCurrentPlayer() == %Player%</expression>
        </condition>
        <condition name="String: Starts With">
            <param name="String" dispname="String" vartype="stringid">""</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <param name="CaseSensitive" dispname="Case Sensitive" vartype="bool" donotrelax="">true</param>
            <expression>xsStringStartsWith(%String%, %Value%, %CaseSensitive%)</expression>
        </condition>
        <condition name="String: Ends With">
            <param name="String" dispname="String" vartype="stringid">""</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <param name="CaseSensitive" dispname="Case Sensitive" vartype="bool" donotrelax="">true</param>
            <expression>xsStringEndsWith(%String%, %Value%, %CaseSensitive%)</expression>
        </condition>
        <condition name="String: Contains">
            <param name="String" dispname="String" vartype="stringid">""</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <param name="CaseSensitive" dispname="Case Sensitive" vartype="bool" donotrelax="">true</param>
            <expression>xsStringContains(%String%, %Value%, %CaseSensitive%)</expression>
        </condition>
        <condition name="String: Length">
            <param name="String" dispname="String" vartype="stringid">""</param>
            <param name="Op" dispname="Comparison" vartype="operator">==</param>
            <param name="Length" dispname="Length" vartype="long">0</param>
            <expression>xsStringLength(%String%) %Op% %Length%)</expression>
        </condition>
        <condition name="Events NTL: Check Condition Empty">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __conditionResult = __eventHandlerStoreWithReturn.fireConditional("%Name%", __eventsFireParameters);</command>
            <command>}</command>
            <expression>__conditionResult</expression>
        </condition>
        <condition name="Events NTL: Check Condition Bool">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">false</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.bools.add(%Value%);</command>
            <command>   __conditionResult = __eventHandlerStoreWithReturn.fireConditional("%Name%", __eventsFireParameters);</command>
            <command>}</command>
            <expression>__conditionResult</expression>
        </condition>
        <condition name="Events NTL: Check Condition Int">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">0</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.ints.add(%Value%);</command>
            <command>   __conditionResult = __eventHandlerStoreWithReturn.fireConditional("%Name%", __eventsFireParameters);</command>
            <command>}</command>
            <expression>__conditionResult</expression>
        </condition>
        <condition name="Events NTL: Check Condition Float">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.floats.add(%Value%);</command>
            <command>   __conditionResult = __eventHandlerStoreWithReturn.fireConditional("%Name%", __eventsFireParameters);</command>
            <command>}</command>
            <expression>__conditionResult</expression>
        </condition>
        <condition name="Events NTL: Check Condition String">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.strings.add(%Value%);</command>
            <command>   __conditionResult = __eventHandlerStoreWithReturn.fireConditional("%Name%", __eventsFireParameters);</command>
            <command>}</command>
            <expression>__conditionResult</expression>
        </condition>
        <condition name="Events NTL: Check Condition Vector">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.vectors.add(%Value%);</command>
            <command>   __conditionResult = __eventHandlerStoreWithReturn.fireConditional("%Name%", __eventsFireParameters);</command>
            <command>}</command>
            <expression>__conditionResult</expression>
        </condition>
        <condition name="Events NTL: Check Condition Advanced">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="IntCount" dispname="Int Count" vartype="player" donotrelax="">0</param>
            <param name="Ints" dispname="Ints" vartype="stringid"></param>
            <param name="FloatCount" dispname="Float Count" vartype="player" donotrelax="">0</param>
            <param name="Floats" dispname="Floats" vartype="stringid"></param>
            <param name="StringCount" dispname="String Count" vartype="player" donotrelax="">0</param>
            <param name="Strings" dispname="Strings" vartype="stringid"></param>
            <param name="VectorCount" dispname="Vector Count" vartype="player" donotrelax="">0</param>
            <param name="Vectors" dispname="Vectors" vartype="stringid"></param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.addInt%IntCount%(%Ints%);</command>
            <command>   __eventsFireParameters.addFloat%FloatCount%(%Floats%);</command>
            <command>   __eventsFireParameters.addString%StringCount%(%Strings%);</command>
            <command>   __eventsFireParameters.addVector%VectorCount%(%Vectors%);</command>
            <command>   __conditionResult = __eventHandlerStoreWithReturn.fireConditional("%Name%", __eventsFireParameters);</command>
            <command>}</command>
            <expression>__conditionResult</expression>
        </condition>
        <condition name="Events NTL: Check Condition Parameters">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">parameters</param>
            <expression>__eventHandlerStoreWithReturn.fireConditional("%Name%", %Value%);</expression>
        </condition>
    </conditions>
    <effects>
        <effect name="Initialise: Nottud Trigger Loader">
            <param name="Mod" dispname="Mod" vartype="hidden">%%</param>
            <command>}</command>
            <command></command>
            <command>bool __conditionResult = false;</command>
            <command></command>
            <command>float __xsVectorGetX(vector v = cOriginVector){</command>
            <command>   return v.x;</command>
            <command>}</command>
            <command></command>
            <command>float __xsVectorGetY(vector v = cOriginVector){</command>
            <command>   return v.y;</command>
            <command>}</command>
            <command></command>
            <command>float __xsVectorGetZ(vector v = cOriginVector){</command>
            <command>   return v.z;</command>
            <command>}</command>
            <command></command>
            <command>const int __HASH_MAP_INITIAL_BUCKET_COUNT = 16;</command>
            <command>const int __HASH_MAP_INITIAL_BUCKET_DEPTH = 10;</command>
            <command></command>
            <command>class __HashStorageWithBool {</command>
            <command>    bool initialised = false;</command>
            <command>    int bucketCount = __HASH_MAP_INITIAL_BUCKET_COUNT;</command>
            <command>    int bucketDepth = __HASH_MAP_INITIAL_BUCKET_DEPTH;</command>
            <command>    int[] countArray = default;</command>
            <command>    string[] keyArray = default;</command>
            <command>    bool[] valueArray = default;</command>
            <command></command>
            <command>    void initialise(){</command>
            <command>        countArray = new int(bucketCount, 0);</command>
            <command>        keyArray = new string(bucketCount * bucketDepth, "");</command>
            <command>        valueArray = new bool(bucketCount * bucketDepth, false);</command>
            <command>        initialised = true;</command>
            <command>    }</command>
            <command></command>
            <command>    int findBucketInternal(string key = ""){</command>
            <command>        int bucket = kbGetAnimationID(key) %Mod% bucketCount;</command>
            <command>        if (bucket &lt; 0){</command>
            <command>            return bucket + bucketCount;</command>
            <command>        }</command>
            <command>        return bucket;</command>
            <command>    }</command>
            <command></command>
            <command>    int indexOfKeyInternal(int bucketIndex = 0, string key = ""){</command>
            <command>        int from = bucketIndex * bucketDepth;</command>
            <command>        int to = from + countArray[bucketIndex];</command>
            <command>        for (int i = from; i &lt; to; i++){</command>
            <command>            if (key == keyArray[i]){</command>
            <command>                return i;</command>
            <command>            }</command>
            <command>        }</command>
            <command>        return -1;</command>
            <command>    }</command>
            <command></command>
            <command>    void resizeInternal(){</command>
            <command>        int oldBucketCount = bucketCount;</command>
            <command>        int oldBucketDepth = bucketDepth;</command>
            <command>        int[] oldCountArray = countArray;</command>
            <command>        string[] oldKeyArray = keyArray;</command>
            <command>        bool[] oldValueArray = valueArray;</command>
            <command>        bucketCount = bucketCount * 2;</command>
            <command>        bucketDepth = bucketDepth * 2;</command>
            <command>        countArray = new int(bucketCount, 0);</command>
            <command>        keyArray = new string(bucketCount * bucketDepth, "");</command>
            <command>        valueArray = new bool(bucketCount * bucketDepth, false);</command>
            <command>        for (int bucketIndex = 0; bucketIndex &lt; oldBucketCount; bucketIndex++){</command>
            <command>            int offset = bucketIndex * oldBucketDepth;</command>
            <command>            for (int i = 0; i &lt; oldCountArray[bucketIndex]; i++){</command>
            <command>                string key = oldKeyArray[offset + i];</command>
            <command>                bool value = oldValueArray[offset + i];</command>
            <command>                int newBucketIndex = findBucketInternal(key);</command>
            <command>                int index = newBucketIndex * bucketDepth + countArray[newBucketIndex];</command>
            <command>                keyArray[index] = key;</command>
            <command>                valueArray[index] = value;</command>
            <command>                countArray[newBucketIndex] = countArray[newBucketIndex] + 1;</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void put(string key = "", bool value = false){</command>
            <command>        if (initialised == false){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        int bucketIndex = findBucketInternal(key);</command>
            <command>        int existingIndex = indexOfKeyInternal(bucketIndex, key);</command>
            <command>        if (existingIndex &gt;= 0){</command>
            <command>            bool oldValue = valueArray[existingIndex];</command>
            <command>            valueArray[existingIndex] = value;</command>
            <command>            return;</command>
            <command>        }</command>
            <command>        if (countArray[bucketIndex] &gt;= bucketDepth){</command>
            <command>            resizeInternal();</command>
            <command>            int resizedBucketIndex = findBucketInternal(key);</command>
            <command>            int index = resizedBucketIndex * bucketDepth + countArray[resizedBucketIndex];</command>
            <command>            keyArray[index] = key;</command>
            <command>            valueArray[index] = value;</command>
            <command>            countArray[resizedBucketIndex] = countArray[resizedBucketIndex] + 1;</command>
            <command>            return;</command>
            <command>        }</command>
            <command>        int index = bucketIndex * bucketDepth + countArray[bucketIndex];</command>
            <command>        keyArray[index] = key;</command>
            <command>        valueArray[index] = value;</command>
            <command>        countArray[bucketIndex] = countArray[bucketIndex] + 1;</command>
            <command>    }</command>
            <command></command>
            <command>    bool get(string key = "", bool defaultValue = false){</command>
            <command>        if (initialised == false){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        int bucketIndex = findBucketInternal(key);</command>
            <command>        int existingIndex = indexOfKeyInternal(bucketIndex, key);</command>
            <command>        if (existingIndex &gt;= 0){</command>
            <command>            return valueArray[existingIndex];</command>
            <command>        }</command>
            <command>        return defaultValue;</command>
            <command>    }</command>
            <command></command>
            <command>    bool remove(string key = "", bool defaultValue = false){</command>
            <command>        if (initialised == false){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        int bucketIndex = findBucketInternal(key);</command>
            <command>        int existingIndex = indexOfKeyInternal(bucketIndex, key);</command>
            <command>        if (existingIndex &gt;= 0){</command>
            <command>            bool removedValue = valueArray[existingIndex];</command>
            <command>            countArray[bucketIndex] = countArray[bucketIndex] - 1;</command>
            <command>            int countIndex = bucketIndex * bucketDepth + countArray[bucketIndex];</command>
            <command>            keyArray[existingIndex] = keyArray[countIndex];</command>
            <command>            valueArray[existingIndex] = valueArray[countIndex];</command>
            <command>            return removedValue;</command>
            <command>        }</command>
            <command>        return defaultValue;</command>
            <command>    }</command>
            <command>};</command>
            <command>class __HashStorageWithInt {</command>
            <command>    bool initialised = false;</command>
            <command>    int bucketCount = __HASH_MAP_INITIAL_BUCKET_COUNT;</command>
            <command>    int bucketDepth = __HASH_MAP_INITIAL_BUCKET_DEPTH;</command>
            <command>    int[] countArray = default;</command>
            <command>    string[] keyArray = default;</command>
            <command>    int[] valueArray = default;</command>
            <command></command>
            <command>    void initialise(){</command>
            <command>        countArray = new int(bucketCount, 0);</command>
            <command>        keyArray = new string(bucketCount * bucketDepth, "");</command>
            <command>        valueArray = new int(bucketCount * bucketDepth, 0);</command>
            <command>        initialised = true;</command>
            <command>    }</command>
            <command></command>
            <command>    int findBucketInternal(string key = ""){</command>
            <command>        int bucket = kbGetAnimationID(key) %Mod% bucketCount;</command>
            <command>        if (bucket &lt; 0){</command>
            <command>            return bucket + bucketCount;</command>
            <command>        }</command>
            <command>        return bucket;</command>
            <command>    }</command>
            <command></command>
            <command>    int indexOfKeyInternal(int bucketIndex = 0, string key = ""){</command>
            <command>        int from = bucketIndex * bucketDepth;</command>
            <command>        int to = from + countArray[bucketIndex];</command>
            <command>        for (int i = from; i &lt; to; i++){</command>
            <command>            if (key == keyArray[i]){</command>
            <command>                return i;</command>
            <command>            }</command>
            <command>        }</command>
            <command>        return -1;</command>
            <command>    }</command>
            <command></command>
            <command>    void resizeInternal(){</command>
            <command>        int oldBucketCount = bucketCount;</command>
            <command>        int oldBucketDepth = bucketDepth;</command>
            <command>        int[] oldCountArray = countArray;</command>
            <command>        string[] oldKeyArray = keyArray;</command>
            <command>        int[] oldValueArray = valueArray;</command>
            <command>        bucketCount = bucketCount * 2;</command>
            <command>        bucketDepth = bucketDepth * 2;</command>
            <command>        countArray = new int(bucketCount, 0);</command>
            <command>        keyArray = new string(bucketCount * bucketDepth, "");</command>
            <command>        valueArray = new int(bucketCount * bucketDepth, 0);</command>
            <command>        for (int bucketIndex = 0; bucketIndex &lt; oldBucketCount; bucketIndex++){</command>
            <command>            int offset = bucketIndex * oldBucketDepth;</command>
            <command>            for (int i = 0; i &lt; oldCountArray[bucketIndex]; i++){</command>
            <command>                string key = oldKeyArray[offset + i];</command>
            <command>                int value = oldValueArray[offset + i];</command>
            <command>                int newBucketIndex = findBucketInternal(key);</command>
            <command>                int index = newBucketIndex * bucketDepth + countArray[newBucketIndex];</command>
            <command>                keyArray[index] = key;</command>
            <command>                valueArray[index] = value;</command>
            <command>                countArray[newBucketIndex] = countArray[newBucketIndex] + 1;</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void put(string key = "", int value = 0){</command>
            <command>        if (initialised == false){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        int bucketIndex = findBucketInternal(key);</command>
            <command>        int existingIndex = indexOfKeyInternal(bucketIndex, key);</command>
            <command>        if (existingIndex &gt;= 0){</command>
            <command>            int oldValue = valueArray[existingIndex];</command>
            <command>            valueArray[existingIndex] = value;</command>
            <command>            return;</command>
            <command>        }</command>
            <command>        if (countArray[bucketIndex] &gt;= bucketDepth){</command>
            <command>            resizeInternal();</command>
            <command>            int resizedBucketIndex = findBucketInternal(key);</command>
            <command>            int index = resizedBucketIndex * bucketDepth + countArray[resizedBucketIndex];</command>
            <command>            keyArray[index] = key;</command>
            <command>            valueArray[index] = value;</command>
            <command>            countArray[resizedBucketIndex] = countArray[resizedBucketIndex] + 1;</command>
            <command>            return;</command>
            <command>        }</command>
            <command>        int index = bucketIndex * bucketDepth + countArray[bucketIndex];</command>
            <command>        keyArray[index] = key;</command>
            <command>        valueArray[index] = value;</command>
            <command>        countArray[bucketIndex] = countArray[bucketIndex] + 1;</command>
            <command>    }</command>
            <command></command>
            <command>    int get(string key = "", int defaultValue = 0){</command>
            <command>        if (initialised == false){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        int bucketIndex = findBucketInternal(key);</command>
            <command>        int existingIndex = indexOfKeyInternal(bucketIndex, key);</command>
            <command>        if (existingIndex &gt;= 0){</command>
            <command>            return valueArray[existingIndex];</command>
            <command>        }</command>
            <command>        return defaultValue;</command>
            <command>    }</command>
            <command></command>
            <command>    int remove(string key = "", int defaultValue = 0){</command>
            <command>        if (initialised == false){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        int bucketIndex = findBucketInternal(key);</command>
            <command>        int existingIndex = indexOfKeyInternal(bucketIndex, key);</command>
            <command>        if (existingIndex &gt;= 0){</command>
            <command>            int removedValue = valueArray[existingIndex];</command>
            <command>            countArray[bucketIndex] = countArray[bucketIndex] - 1;</command>
            <command>            int countIndex = bucketIndex * bucketDepth + countArray[bucketIndex];</command>
            <command>            keyArray[existingIndex] = keyArray[countIndex];</command>
            <command>            valueArray[existingIndex] = valueArray[countIndex];</command>
            <command>            return removedValue;</command>
            <command>        }</command>
            <command>        return defaultValue;</command>
            <command>    }</command>
            <command>};</command>
            <command>class __HashStorageWithFloat {</command>
            <command>    bool initialised = false;</command>
            <command>    int bucketCount = __HASH_MAP_INITIAL_BUCKET_COUNT;</command>
            <command>    int bucketDepth = __HASH_MAP_INITIAL_BUCKET_DEPTH;</command>
            <command>    int[] countArray = default;</command>
            <command>    string[] keyArray = default;</command>
            <command>    float[] valueArray = default;</command>
            <command></command>
            <command>    void initialise(){</command>
            <command>        countArray = new int(bucketCount, 0);</command>
            <command>        keyArray = new string(bucketCount * bucketDepth, "");</command>
            <command>        valueArray = new float(bucketCount * bucketDepth, 0.0);</command>
            <command>        initialised = true;</command>
            <command>    }</command>
            <command></command>
            <command>    int findBucketInternal(string key = ""){</command>
            <command>        int bucket = kbGetAnimationID(key) %Mod% bucketCount;</command>
            <command>        if (bucket &lt; 0){</command>
            <command>            return bucket + bucketCount;</command>
            <command>        }</command>
            <command>        return bucket;</command>
            <command>    }</command>
            <command></command>
            <command>    int indexOfKeyInternal(int bucketIndex = 0, string key = ""){</command>
            <command>        int from = bucketIndex * bucketDepth;</command>
            <command>        int to = from + countArray[bucketIndex];</command>
            <command>        for (int i = from; i &lt; to; i++){</command>
            <command>            if (key == keyArray[i]){</command>
            <command>                return i;</command>
            <command>            }</command>
            <command>        }</command>
            <command>        return -1;</command>
            <command>    }</command>
            <command></command>
            <command>    void resizeInternal(){</command>
            <command>        int oldBucketCount = bucketCount;</command>
            <command>        int oldBucketDepth = bucketDepth;</command>
            <command>        int[] oldCountArray = countArray;</command>
            <command>        string[] oldKeyArray = keyArray;</command>
            <command>        float[] oldValueArray = valueArray;</command>
            <command>        bucketCount = bucketCount * 2;</command>
            <command>        bucketDepth = bucketDepth * 2;</command>
            <command>        countArray = new int(bucketCount, 0);</command>
            <command>        keyArray = new string(bucketCount * bucketDepth, "");</command>
            <command>        valueArray = new float(bucketCount * bucketDepth, 0.0);</command>
            <command>        for (int bucketIndex = 0; bucketIndex &lt; oldBucketCount; bucketIndex++){</command>
            <command>            int offset = bucketIndex * oldBucketDepth;</command>
            <command>            for (int i = 0; i &lt; oldCountArray[bucketIndex]; i++){</command>
            <command>                string key = oldKeyArray[offset + i];</command>
            <command>                float value = oldValueArray[offset + i];</command>
            <command>                int newBucketIndex = findBucketInternal(key);</command>
            <command>                int index = newBucketIndex * bucketDepth + countArray[newBucketIndex];</command>
            <command>                keyArray[index] = key;</command>
            <command>                valueArray[index] = value;</command>
            <command>                countArray[newBucketIndex] = countArray[newBucketIndex] + 1;</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void put(string key = "", float value = 0.0){</command>
            <command>        if (initialised == false){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        int bucketIndex = findBucketInternal(key);</command>
            <command>        int existingIndex = indexOfKeyInternal(bucketIndex, key);</command>
            <command>        if (existingIndex &gt;= 0){</command>
            <command>            float oldValue = valueArray[existingIndex];</command>
            <command>            valueArray[existingIndex] = value;</command>
            <command>            return;</command>
            <command>        }</command>
            <command>        if (countArray[bucketIndex] &gt;= bucketDepth){</command>
            <command>            resizeInternal();</command>
            <command>            int resizedBucketIndex = findBucketInternal(key);</command>
            <command>            int index = resizedBucketIndex * bucketDepth + countArray[resizedBucketIndex];</command>
            <command>            keyArray[index] = key;</command>
            <command>            valueArray[index] = value;</command>
            <command>            countArray[resizedBucketIndex] = countArray[resizedBucketIndex] + 1;</command>
            <command>            return;</command>
            <command>        }</command>
            <command>        int index = bucketIndex * bucketDepth + countArray[bucketIndex];</command>
            <command>        keyArray[index] = key;</command>
            <command>        valueArray[index] = value;</command>
            <command>        countArray[bucketIndex] = countArray[bucketIndex] + 1;</command>
            <command>    }</command>
            <command></command>
            <command>    float get(string key = "", float defaultValue = 0.0){</command>
            <command>        if (initialised == false){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        int bucketIndex = findBucketInternal(key);</command>
            <command>        int existingIndex = indexOfKeyInternal(bucketIndex, key);</command>
            <command>        if (existingIndex &gt;= 0){</command>
            <command>            return valueArray[existingIndex];</command>
            <command>        }</command>
            <command>        return defaultValue;</command>
            <command>    }</command>
            <command></command>
            <command>    float remove(string key = "", float defaultValue = 0.0){</command>
            <command>        if (initialised == false){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        int bucketIndex = findBucketInternal(key);</command>
            <command>        int existingIndex = indexOfKeyInternal(bucketIndex, key);</command>
            <command>        if (existingIndex &gt;= 0){</command>
            <command>            float removedValue = valueArray[existingIndex];</command>
            <command>            countArray[bucketIndex] = countArray[bucketIndex] - 1;</command>
            <command>            int countIndex = bucketIndex * bucketDepth + countArray[bucketIndex];</command>
            <command>            keyArray[existingIndex] = keyArray[countIndex];</command>
            <command>            valueArray[existingIndex] = valueArray[countIndex];</command>
            <command>            return removedValue;</command>
            <command>        }</command>
            <command>        return defaultValue;</command>
            <command>    }</command>
            <command>};</command>
            <command>class __HashStorageWithString {</command>
            <command>    bool initialised = false;</command>
            <command>    int bucketCount = __HASH_MAP_INITIAL_BUCKET_COUNT;</command>
            <command>    int bucketDepth = __HASH_MAP_INITIAL_BUCKET_DEPTH;</command>
            <command>    int[] countArray = default;</command>
            <command>    string[] keyArray = default;</command>
            <command>    string[] valueArray = default;</command>
            <command></command>
            <command>    void initialise(){</command>
            <command>        countArray = new int(bucketCount, 0);</command>
            <command>        keyArray = new string(bucketCount * bucketDepth, "");</command>
            <command>        valueArray = new string(bucketCount * bucketDepth, "");</command>
            <command>        initialised = true;</command>
            <command>    }</command>
            <command></command>
            <command>    int findBucketInternal(string key = ""){</command>
            <command>        int bucket = kbGetAnimationID(key) %Mod% bucketCount;</command>
            <command>        if (bucket &lt; 0){</command>
            <command>            return bucket + bucketCount;</command>
            <command>        }</command>
            <command>        return bucket;</command>
            <command>    }</command>
            <command></command>
            <command>    int indexOfKeyInternal(int bucketIndex = 0, string key = ""){</command>
            <command>        int from = bucketIndex * bucketDepth;</command>
            <command>        int to = from + countArray[bucketIndex];</command>
            <command>        for (int i = from; i &lt; to; i++){</command>
            <command>            if (key == keyArray[i]){</command>
            <command>                return i;</command>
            <command>            }</command>
            <command>        }</command>
            <command>        return -1;</command>
            <command>    }</command>
            <command></command>
            <command>    void resizeInternal(){</command>
            <command>        int oldBucketCount = bucketCount;</command>
            <command>        int oldBucketDepth = bucketDepth;</command>
            <command>        int[] oldCountArray = countArray;</command>
            <command>        string[] oldKeyArray = keyArray;</command>
            <command>        string[] oldValueArray = valueArray;</command>
            <command>        bucketCount = bucketCount * 2;</command>
            <command>        bucketDepth = bucketDepth * 2;</command>
            <command>        countArray = new int(bucketCount, 0);</command>
            <command>        keyArray = new string(bucketCount * bucketDepth, "");</command>
            <command>        valueArray = new string(bucketCount * bucketDepth, "");</command>
            <command>        for (int bucketIndex = 0; bucketIndex &lt; oldBucketCount; bucketIndex++){</command>
            <command>            int offset = bucketIndex * oldBucketDepth;</command>
            <command>            for (int i = 0; i &lt; oldCountArray[bucketIndex]; i++){</command>
            <command>                string key = oldKeyArray[offset + i];</command>
            <command>                string value = oldValueArray[offset + i];</command>
            <command>                int newBucketIndex = findBucketInternal(key);</command>
            <command>                int index = newBucketIndex * bucketDepth + countArray[newBucketIndex];</command>
            <command>                keyArray[index] = key;</command>
            <command>                valueArray[index] = value;</command>
            <command>                countArray[newBucketIndex] = countArray[newBucketIndex] + 1;</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void put(string key = "", string value = ""){</command>
            <command>        if (initialised == false){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        int bucketIndex = findBucketInternal(key);</command>
            <command>        int existingIndex = indexOfKeyInternal(bucketIndex, key);</command>
            <command>        if (existingIndex &gt;= 0){</command>
            <command>            string oldValue = valueArray[existingIndex];</command>
            <command>            valueArray[existingIndex] = value;</command>
            <command>            return;</command>
            <command>        }</command>
            <command>        if (countArray[bucketIndex] &gt;= bucketDepth){</command>
            <command>            resizeInternal();</command>
            <command>            int resizedBucketIndex = findBucketInternal(key);</command>
            <command>            int index = resizedBucketIndex * bucketDepth + countArray[resizedBucketIndex];</command>
            <command>            keyArray[index] = key;</command>
            <command>            valueArray[index] = value;</command>
            <command>            countArray[resizedBucketIndex] = countArray[resizedBucketIndex] + 1;</command>
            <command>            return;</command>
            <command>        }</command>
            <command>        int index = bucketIndex * bucketDepth + countArray[bucketIndex];</command>
            <command>        keyArray[index] = key;</command>
            <command>        valueArray[index] = value;</command>
            <command>        countArray[bucketIndex] = countArray[bucketIndex] + 1;</command>
            <command>    }</command>
            <command></command>
            <command>    string get(string key = "", string defaultValue = ""){</command>
            <command>        if (initialised == false){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        int bucketIndex = findBucketInternal(key);</command>
            <command>        int existingIndex = indexOfKeyInternal(bucketIndex, key);</command>
            <command>        if (existingIndex &gt;= 0){</command>
            <command>            return valueArray[existingIndex];</command>
            <command>        }</command>
            <command>        return defaultValue;</command>
            <command>    }</command>
            <command></command>
            <command>    string remove(string key = "", string defaultValue = ""){</command>
            <command>        if (initialised == false){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        int bucketIndex = findBucketInternal(key);</command>
            <command>        int existingIndex = indexOfKeyInternal(bucketIndex, key);</command>
            <command>        if (existingIndex &gt;= 0){</command>
            <command>            string removedValue = valueArray[existingIndex];</command>
            <command>            countArray[bucketIndex] = countArray[bucketIndex] - 1;</command>
            <command>            int countIndex = bucketIndex * bucketDepth + countArray[bucketIndex];</command>
            <command>            keyArray[existingIndex] = keyArray[countIndex];</command>
            <command>            valueArray[existingIndex] = valueArray[countIndex];</command>
            <command>            return removedValue;</command>
            <command>        }</command>
            <command>        return defaultValue;</command>
            <command>    }</command>
            <command>};</command>
            <command>class __HashStorageWithVector {</command>
            <command>    bool initialised = false;</command>
            <command>    int bucketCount = __HASH_MAP_INITIAL_BUCKET_COUNT;</command>
            <command>    int bucketDepth = __HASH_MAP_INITIAL_BUCKET_DEPTH;</command>
            <command>    int[] countArray = default;</command>
            <command>    string[] keyArray = default;</command>
            <command>    vector[] valueArray = default;</command>
            <command></command>
            <command>    void initialise(){</command>
            <command>        countArray = new int(bucketCount, 0);</command>
            <command>        keyArray = new string(bucketCount * bucketDepth, "");</command>
            <command>        valueArray = new vector(bucketCount * bucketDepth, cOriginVector);</command>
            <command>        initialised = true;</command>
            <command>    }</command>
            <command></command>
            <command>    int findBucketInternal(string key = ""){</command>
            <command>        int bucket = kbGetAnimationID(key) %Mod% bucketCount;</command>
            <command>        if (bucket &lt; 0){</command>
            <command>            return bucket + bucketCount;</command>
            <command>        }</command>
            <command>        return bucket;</command>
            <command>    }</command>
            <command></command>
            <command>    int indexOfKeyInternal(int bucketIndex = 0, string key = ""){</command>
            <command>        int from = bucketIndex * bucketDepth;</command>
            <command>        int to = from + countArray[bucketIndex];</command>
            <command>        for (int i = from; i &lt; to; i++){</command>
            <command>            if (key == keyArray[i]){</command>
            <command>                return i;</command>
            <command>            }</command>
            <command>        }</command>
            <command>        return -1;</command>
            <command>    }</command>
            <command></command>
            <command>    void resizeInternal(){</command>
            <command>        int oldBucketCount = bucketCount;</command>
            <command>        int oldBucketDepth = bucketDepth;</command>
            <command>        int[] oldCountArray = countArray;</command>
            <command>        string[] oldKeyArray = keyArray;</command>
            <command>        vector[] oldValueArray = valueArray;</command>
            <command>        bucketCount = bucketCount * 2;</command>
            <command>        bucketDepth = bucketDepth * 2;</command>
            <command>        countArray = new int(bucketCount, 0);</command>
            <command>        keyArray = new string(bucketCount * bucketDepth, "");</command>
            <command>        valueArray = new vector(bucketCount * bucketDepth, cOriginVector);</command>
            <command>        for (int bucketIndex = 0; bucketIndex &lt; oldBucketCount; bucketIndex++){</command>
            <command>            int offset = bucketIndex * oldBucketDepth;</command>
            <command>            for (int i = 0; i &lt; oldCountArray[bucketIndex]; i++){</command>
            <command>                string key = oldKeyArray[offset + i];</command>
            <command>                vector value = oldValueArray[offset + i];</command>
            <command>                int newBucketIndex = findBucketInternal(key);</command>
            <command>                int index = newBucketIndex * bucketDepth + countArray[newBucketIndex];</command>
            <command>                keyArray[index] = key;</command>
            <command>                valueArray[index] = value;</command>
            <command>                countArray[newBucketIndex] = countArray[newBucketIndex] + 1;</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void put(string key = "", vector value = cOriginVector){</command>
            <command>        if (initialised == false){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        int bucketIndex = findBucketInternal(key);</command>
            <command>        int existingIndex = indexOfKeyInternal(bucketIndex, key);</command>
            <command>        if (existingIndex &gt;= 0){</command>
            <command>            vector oldValue = valueArray[existingIndex];</command>
            <command>            valueArray[existingIndex] = value;</command>
            <command>            return;</command>
            <command>        }</command>
            <command>        if (countArray[bucketIndex] &gt;= bucketDepth){</command>
            <command>            resizeInternal();</command>
            <command>            int resizedBucketIndex = findBucketInternal(key);</command>
            <command>            int index = resizedBucketIndex * bucketDepth + countArray[resizedBucketIndex];</command>
            <command>            keyArray[index] = key;</command>
            <command>            valueArray[index] = value;</command>
            <command>            countArray[resizedBucketIndex] = countArray[resizedBucketIndex] + 1;</command>
            <command>            return;</command>
            <command>        }</command>
            <command>        int index = bucketIndex * bucketDepth + countArray[bucketIndex];</command>
            <command>        keyArray[index] = key;</command>
            <command>        valueArray[index] = value;</command>
            <command>        countArray[bucketIndex] = countArray[bucketIndex] + 1;</command>
            <command>    }</command>
            <command></command>
            <command>    vector get(string key = "", vector defaultValue = cOriginVector){</command>
            <command>        if (initialised == false){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        int bucketIndex = findBucketInternal(key);</command>
            <command>        int existingIndex = indexOfKeyInternal(bucketIndex, key);</command>
            <command>        if (existingIndex &gt;= 0){</command>
            <command>            return valueArray[existingIndex];</command>
            <command>        }</command>
            <command>        return defaultValue;</command>
            <command>    }</command>
            <command></command>
            <command>    vector remove(string key = "", vector defaultValue = cOriginVector){</command>
            <command>        if (initialised == false){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        int bucketIndex = findBucketInternal(key);</command>
            <command>        int existingIndex = indexOfKeyInternal(bucketIndex, key);</command>
            <command>        if (existingIndex &gt;= 0){</command>
            <command>            vector removedValue = valueArray[existingIndex];</command>
            <command>            countArray[bucketIndex] = countArray[bucketIndex] - 1;</command>
            <command>            int countIndex = bucketIndex * bucketDepth + countArray[bucketIndex];</command>
            <command>            keyArray[existingIndex] = keyArray[countIndex];</command>
            <command>            valueArray[existingIndex] = valueArray[countIndex];</command>
            <command>            return removedValue;</command>
            <command>        }</command>
            <command>        return defaultValue;</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>float __getTerrainHeightAccurate(vector posV = cOriginVector){</command>
            <command>    float tilesFloatX = posV.x / 2.0;</command>
            <command>    float tilesFloatZ = posV.z / 2.0;</command>
            <command>    float tilesModX = tilesFloatX - xsFloatToInt(tilesFloatX);</command>
            <command>    float tilesModZ = tilesFloatZ - xsFloatToInt(tilesFloatZ);</command>
            <command>    float minHeightX = floor(tilesFloatX);</command>
            <command>    float minHeightZ = floor(tilesFloatZ);</command>
            <command>    float maxHeightX = ceil(tilesFloatX);</command>
            <command>    float maxHeightZ = ceil(tilesFloatZ);</command>
            <command>    float terrainHeightMinMin = trGetTerrainHeight(vector(minHeightX * 2.0, 0.0, minHeightZ * 2.0));</command>
            <command>    float terrainHeightMaxMin = trGetTerrainHeight(vector(maxHeightX * 2.0, 0.0, minHeightZ * 2.0));</command>
            <command>    float terrainHeightMinMax = trGetTerrainHeight(vector(minHeightX * 2.0, 0.0, maxHeightZ * 2.0));</command>
            <command>    float terrainHeightMaxMax = trGetTerrainHeight(vector(maxHeightX * 2.0, 0.0, maxHeightZ * 2.0));</command>
            <command>    float heightMinZ = (1.0 - tilesModX) * terrainHeightMinMin + tilesModX * terrainHeightMaxMin;</command>
            <command>    float heightMaxZ = (1.0 - tilesModX) * terrainHeightMinMax + tilesModX * terrainHeightMaxMax;</command>
            <command>    return (1.0 - tilesModZ) * heightMinZ + tilesModZ * heightMaxZ;</command>
            <command>}</command>
            <command></command>
            <command>int[] __getSelectionArray(){</command>
            <command>   int selectionSize = trSelectionGetNumber();</command>
            <command>   int[] selectionArray = new int(selectionSize, -1);</command>
            <command>   for(int i = 0; i &lt; selectionSize; i++){</command>
            <command>       selectionArray[i] = trSelectionGetUnitID(i);</command>
            <command>   }</command>
            <command>   return selectionArray;</command>
            <command>}</command>
            <command></command>
            <command>class __Parameters {</command>
            <command>    bool[] bools = default;</command>
            <command>    int[] ints = default;</command>
            <command>    float[] floats = default;</command>
            <command>    string[] strings = default;</command>
            <command>    vector[] vectors = default;</command>
            <command>    void addBool0(){}</command>
            <command>    void addBool1(bool arg0 = false){</command>
            <command>       bools.add(arg0);</command>
            <command>    }</command>
            <command>    void addBool2(bool arg0 = false, bool arg1 = false){</command>
            <command>       bools.add(arg0);</command>
            <command>       bools.add(arg1);</command>
            <command>    }</command>
            <command>    void addBool3(bool arg0 = false, bool arg1 = false, bool arg2 = false){</command>
            <command>       bools.add(arg0);</command>
            <command>       bools.add(arg1);</command>
            <command>       bools.add(arg2);</command>
            <command>    }</command>
            <command>    void addBool4(bool arg0 = false, bool arg1 = false, bool arg2 = false, bool arg3 = false){</command>
            <command>       bools.add(arg0);</command>
            <command>       bools.add(arg1);</command>
            <command>       bools.add(arg2);</command>
            <command>       bools.add(arg3);</command>
            <command>    }</command>
            <command>    void addBool5(bool arg0 = false, bool arg1 = false, bool arg2 = false, bool arg3 = false, bool arg4 = false){</command>
            <command>       bools.add(arg0);</command>
            <command>       bools.add(arg1);</command>
            <command>       bools.add(arg2);</command>
            <command>       bools.add(arg3);</command>
            <command>       bools.add(arg4);</command>
            <command>    }</command>
            <command>    void addBool6(bool arg0 = false, bool arg1 = false, bool arg2 = false, bool arg3 = false, bool arg4 = false, bool arg5 = false){</command>
            <command>       bools.add(arg0);</command>
            <command>       bools.add(arg1);</command>
            <command>       bools.add(arg2);</command>
            <command>       bools.add(arg3);</command>
            <command>       bools.add(arg4);</command>
            <command>       bools.add(arg5);</command>
            <command>    }</command>
            <command>    void addBool7(bool arg0 = false, bool arg1 = false, bool arg2 = false, bool arg3 = false, bool arg4 = false, bool arg5 = false, bool arg6 = false){</command>
            <command>       bools.add(arg0);</command>
            <command>       bools.add(arg1);</command>
            <command>       bools.add(arg2);</command>
            <command>       bools.add(arg3);</command>
            <command>       bools.add(arg4);</command>
            <command>       bools.add(arg5);</command>
            <command>       bools.add(arg6);</command>
            <command>    }</command>
            <command>    void addBool8(bool arg0 = false, bool arg1 = false, bool arg2 = false, bool arg3 = false, bool arg4 = false, bool arg5 = false, bool arg6 = false, bool arg7 = false){</command>
            <command>       bools.add(arg0);</command>
            <command>       bools.add(arg1);</command>
            <command>       bools.add(arg2);</command>
            <command>       bools.add(arg3);</command>
            <command>       bools.add(arg4);</command>
            <command>       bools.add(arg5);</command>
            <command>       bools.add(arg6);</command>
            <command>       bools.add(arg7);</command>
            <command>    }</command>
            <command>    void addBool9(bool arg0 = false, bool arg1 = false, bool arg2 = false, bool arg3 = false, bool arg4 = false, bool arg5 = false, bool arg6 = false, bool arg7 = false, bool arg8 = false){</command>
            <command>       bools.add(arg0);</command>
            <command>       bools.add(arg1);</command>
            <command>       bools.add(arg2);</command>
            <command>       bools.add(arg3);</command>
            <command>       bools.add(arg4);</command>
            <command>       bools.add(arg5);</command>
            <command>       bools.add(arg6);</command>
            <command>       bools.add(arg7);</command>
            <command>       bools.add(arg8);</command>
            <command>    }</command>
            <command>    void addBool10(bool arg0 = false, bool arg1 = false, bool arg2 = false, bool arg3 = false, bool arg4 = false, bool arg5 = false, bool arg6 = false, bool arg7 = false, bool arg8 = false, bool arg9 = false){</command>
            <command>       bools.add(arg0);</command>
            <command>       bools.add(arg1);</command>
            <command>       bools.add(arg2);</command>
            <command>       bools.add(arg3);</command>
            <command>       bools.add(arg4);</command>
            <command>       bools.add(arg5);</command>
            <command>       bools.add(arg6);</command>
            <command>       bools.add(arg7);</command>
            <command>       bools.add(arg8);</command>
            <command>       bools.add(arg9);</command>
            <command>    }</command>
            <command>    void addBool11(bool arg0 = false, bool arg1 = false, bool arg2 = false, bool arg3 = false, bool arg4 = false, bool arg5 = false, bool arg6 = false, bool arg7 = false, bool arg8 = false, bool arg9 = false, </command>
            <command>           bool arg10 = false){</command>
            <command>       bools.add(arg0);</command>
            <command>       bools.add(arg1);</command>
            <command>       bools.add(arg2);</command>
            <command>       bools.add(arg3);</command>
            <command>       bools.add(arg4);</command>
            <command>       bools.add(arg5);</command>
            <command>       bools.add(arg6);</command>
            <command>       bools.add(arg7);</command>
            <command>       bools.add(arg8);</command>
            <command>       bools.add(arg9);</command>
            <command>       bools.add(arg10);</command>
            <command>    }</command>
            <command>    void addBool12(bool arg0 = false, bool arg1 = false, bool arg2 = false, bool arg3 = false, bool arg4 = false, bool arg5 = false, bool arg6 = false, bool arg7 = false, bool arg8 = false, bool arg9 = false, </command>
            <command>           bool arg10 = false, bool arg11 = false){</command>
            <command>       bools.add(arg0);</command>
            <command>       bools.add(arg1);</command>
            <command>       bools.add(arg2);</command>
            <command>       bools.add(arg3);</command>
            <command>       bools.add(arg4);</command>
            <command>       bools.add(arg5);</command>
            <command>       bools.add(arg6);</command>
            <command>       bools.add(arg7);</command>
            <command>       bools.add(arg8);</command>
            <command>       bools.add(arg9);</command>
            <command>       bools.add(arg10);</command>
            <command>       bools.add(arg11);</command>
            <command>    }</command>
            <command>    void addInt0(){}</command>
            <command>    void addInt1(int arg0 = 0){</command>
            <command>       ints.add(arg0);</command>
            <command>    }</command>
            <command>    void addInt2(int arg0 = 0, int arg1 = 0){</command>
            <command>       ints.add(arg0);</command>
            <command>       ints.add(arg1);</command>
            <command>    }</command>
            <command>    void addInt3(int arg0 = 0, int arg1 = 0, int arg2 = 0){</command>
            <command>       ints.add(arg0);</command>
            <command>       ints.add(arg1);</command>
            <command>       ints.add(arg2);</command>
            <command>    }</command>
            <command>    void addInt4(int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0){</command>
            <command>       ints.add(arg0);</command>
            <command>       ints.add(arg1);</command>
            <command>       ints.add(arg2);</command>
            <command>       ints.add(arg3);</command>
            <command>    }</command>
            <command>    void addInt5(int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0, int arg4 = 0){</command>
            <command>       ints.add(arg0);</command>
            <command>       ints.add(arg1);</command>
            <command>       ints.add(arg2);</command>
            <command>       ints.add(arg3);</command>
            <command>       ints.add(arg4);</command>
            <command>    }</command>
            <command>    void addInt6(int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0, int arg4 = 0, int arg5 = 0){</command>
            <command>       ints.add(arg0);</command>
            <command>       ints.add(arg1);</command>
            <command>       ints.add(arg2);</command>
            <command>       ints.add(arg3);</command>
            <command>       ints.add(arg4);</command>
            <command>       ints.add(arg5);</command>
            <command>    }</command>
            <command>    void addInt7(int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0, int arg4 = 0, int arg5 = 0, int arg6 = 0){</command>
            <command>       ints.add(arg0);</command>
            <command>       ints.add(arg1);</command>
            <command>       ints.add(arg2);</command>
            <command>       ints.add(arg3);</command>
            <command>       ints.add(arg4);</command>
            <command>       ints.add(arg5);</command>
            <command>       ints.add(arg6);</command>
            <command>    }</command>
            <command>    void addInt8(int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0, int arg4 = 0, int arg5 = 0, int arg6 = 0, int arg7 = 0){</command>
            <command>       ints.add(arg0);</command>
            <command>       ints.add(arg1);</command>
            <command>       ints.add(arg2);</command>
            <command>       ints.add(arg3);</command>
            <command>       ints.add(arg4);</command>
            <command>       ints.add(arg5);</command>
            <command>       ints.add(arg6);</command>
            <command>       ints.add(arg7);</command>
            <command>    }</command>
            <command>    void addInt9(int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0, int arg4 = 0, int arg5 = 0, int arg6 = 0, int arg7 = 0, int arg8 = 0){</command>
            <command>       ints.add(arg0);</command>
            <command>       ints.add(arg1);</command>
            <command>       ints.add(arg2);</command>
            <command>       ints.add(arg3);</command>
            <command>       ints.add(arg4);</command>
            <command>       ints.add(arg5);</command>
            <command>       ints.add(arg6);</command>
            <command>       ints.add(arg7);</command>
            <command>       ints.add(arg8);</command>
            <command>    }</command>
            <command>    void addInt10(int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0, int arg4 = 0, int arg5 = 0, int arg6 = 0, int arg7 = 0, int arg8 = 0, int arg9 = 0){</command>
            <command>       ints.add(arg0);</command>
            <command>       ints.add(arg1);</command>
            <command>       ints.add(arg2);</command>
            <command>       ints.add(arg3);</command>
            <command>       ints.add(arg4);</command>
            <command>       ints.add(arg5);</command>
            <command>       ints.add(arg6);</command>
            <command>       ints.add(arg7);</command>
            <command>       ints.add(arg8);</command>
            <command>       ints.add(arg9);</command>
            <command>    }</command>
            <command>    void addInt11(int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0, int arg4 = 0, int arg5 = 0, int arg6 = 0, int arg7 = 0, int arg8 = 0, int arg9 = 0, int arg10 = 0){</command>
            <command>       ints.add(arg0);</command>
            <command>       ints.add(arg1);</command>
            <command>       ints.add(arg2);</command>
            <command>       ints.add(arg3);</command>
            <command>       ints.add(arg4);</command>
            <command>       ints.add(arg5);</command>
            <command>       ints.add(arg6);</command>
            <command>       ints.add(arg7);</command>
            <command>       ints.add(arg8);</command>
            <command>       ints.add(arg9);</command>
            <command>       ints.add(arg10);</command>
            <command>    }</command>
            <command>    void addInt12(int arg0 = 0, int arg1 = 0, int arg2 = 0, int arg3 = 0, int arg4 = 0, int arg5 = 0, int arg6 = 0, int arg7 = 0, int arg8 = 0, int arg9 = 0, int arg10 = 0, int arg11 = 0){</command>
            <command>       ints.add(arg0);</command>
            <command>       ints.add(arg1);</command>
            <command>       ints.add(arg2);</command>
            <command>       ints.add(arg3);</command>
            <command>       ints.add(arg4);</command>
            <command>       ints.add(arg5);</command>
            <command>       ints.add(arg6);</command>
            <command>       ints.add(arg7);</command>
            <command>       ints.add(arg8);</command>
            <command>       ints.add(arg9);</command>
            <command>       ints.add(arg10);</command>
            <command>       ints.add(arg11);</command>
            <command>    }</command>
            <command>    void addFloat0(){}</command>
            <command>    void addFloat1(float arg0 = 0.0){</command>
            <command>       floats.add(arg0);</command>
            <command>    }</command>
            <command>    void addFloat2(float arg0 = 0.0, float arg1 = 0.0){</command>
            <command>       floats.add(arg0);</command>
            <command>       floats.add(arg1);</command>
            <command>    }</command>
            <command>    void addFloat3(float arg0 = 0.0, float arg1 = 0.0, float arg2 = 0.0){</command>
            <command>       floats.add(arg0);</command>
            <command>       floats.add(arg1);</command>
            <command>       floats.add(arg2);</command>
            <command>    }</command>
            <command>    void addFloat4(float arg0 = 0.0, float arg1 = 0.0, float arg2 = 0.0, float arg3 = 0.0){</command>
            <command>       floats.add(arg0);</command>
            <command>       floats.add(arg1);</command>
            <command>       floats.add(arg2);</command>
            <command>       floats.add(arg3);</command>
            <command>    }</command>
            <command>    void addFloat5(float arg0 = 0.0, float arg1 = 0.0, float arg2 = 0.0, float arg3 = 0.0, float arg4 = 0.0){</command>
            <command>       floats.add(arg0);</command>
            <command>       floats.add(arg1);</command>
            <command>       floats.add(arg2);</command>
            <command>       floats.add(arg3);</command>
            <command>       floats.add(arg4);</command>
            <command>    }</command>
            <command>    void addFloat6(float arg0 = 0.0, float arg1 = 0.0, float arg2 = 0.0, float arg3 = 0.0, float arg4 = 0.0, float arg5 = 0.0){</command>
            <command>       floats.add(arg0);</command>
            <command>       floats.add(arg1);</command>
            <command>       floats.add(arg2);</command>
            <command>       floats.add(arg3);</command>
            <command>       floats.add(arg4);</command>
            <command>       floats.add(arg5);</command>
            <command>    }</command>
            <command>    void addFloat7(float arg0 = 0.0, float arg1 = 0.0, float arg2 = 0.0, float arg3 = 0.0, float arg4 = 0.0, float arg5 = 0.0, float arg6 = 0.0){</command>
            <command>       floats.add(arg0);</command>
            <command>       floats.add(arg1);</command>
            <command>       floats.add(arg2);</command>
            <command>       floats.add(arg3);</command>
            <command>       floats.add(arg4);</command>
            <command>       floats.add(arg5);</command>
            <command>       floats.add(arg6);</command>
            <command>    }</command>
            <command>    void addFloat8(float arg0 = 0.0, float arg1 = 0.0, float arg2 = 0.0, float arg3 = 0.0, float arg4 = 0.0, float arg5 = 0.0, float arg6 = 0.0, float arg7 = 0.0){</command>
            <command>       floats.add(arg0);</command>
            <command>       floats.add(arg1);</command>
            <command>       floats.add(arg2);</command>
            <command>       floats.add(arg3);</command>
            <command>       floats.add(arg4);</command>
            <command>       floats.add(arg5);</command>
            <command>       floats.add(arg6);</command>
            <command>       floats.add(arg7);</command>
            <command>    }</command>
            <command>    void addFloat9(float arg0 = 0.0, float arg1 = 0.0, float arg2 = 0.0, float arg3 = 0.0, float arg4 = 0.0, float arg5 = 0.0, float arg6 = 0.0, float arg7 = 0.0, float arg8 = 0.0){</command>
            <command>       floats.add(arg0);</command>
            <command>       floats.add(arg1);</command>
            <command>       floats.add(arg2);</command>
            <command>       floats.add(arg3);</command>
            <command>       floats.add(arg4);</command>
            <command>       floats.add(arg5);</command>
            <command>       floats.add(arg6);</command>
            <command>       floats.add(arg7);</command>
            <command>       floats.add(arg8);</command>
            <command>    }</command>
            <command>    void addFloat10(float arg0 = 0.0, float arg1 = 0.0, float arg2 = 0.0, float arg3 = 0.0, float arg4 = 0.0, float arg5 = 0.0, float arg6 = 0.0, float arg7 = 0.0, float arg8 = 0.0, float arg9 = 0.0){</command>
            <command>       floats.add(arg0);</command>
            <command>       floats.add(arg1);</command>
            <command>       floats.add(arg2);</command>
            <command>       floats.add(arg3);</command>
            <command>       floats.add(arg4);</command>
            <command>       floats.add(arg5);</command>
            <command>       floats.add(arg6);</command>
            <command>       floats.add(arg7);</command>
            <command>       floats.add(arg8);</command>
            <command>       floats.add(arg9);</command>
            <command>    }</command>
            <command>    void addFloat11(float arg0 = 0.0, float arg1 = 0.0, float arg2 = 0.0, float arg3 = 0.0, float arg4 = 0.0, float arg5 = 0.0, float arg6 = 0.0, float arg7 = 0.0, float arg8 = 0.0, float arg9 = 0.0, </command>
            <command>           float arg10 = 0.0){</command>
            <command>       floats.add(arg0);</command>
            <command>       floats.add(arg1);</command>
            <command>       floats.add(arg2);</command>
            <command>       floats.add(arg3);</command>
            <command>       floats.add(arg4);</command>
            <command>       floats.add(arg5);</command>
            <command>       floats.add(arg6);</command>
            <command>       floats.add(arg7);</command>
            <command>       floats.add(arg8);</command>
            <command>       floats.add(arg9);</command>
            <command>       floats.add(arg10);</command>
            <command>    }</command>
            <command>    void addFloat12(float arg0 = 0.0, float arg1 = 0.0, float arg2 = 0.0, float arg3 = 0.0, float arg4 = 0.0, float arg5 = 0.0, float arg6 = 0.0, float arg7 = 0.0, float arg8 = 0.0, float arg9 = 0.0, </command>
            <command>           float arg10 = 0.0, float arg11 = 0.0){</command>
            <command>       floats.add(arg0);</command>
            <command>       floats.add(arg1);</command>
            <command>       floats.add(arg2);</command>
            <command>       floats.add(arg3);</command>
            <command>       floats.add(arg4);</command>
            <command>       floats.add(arg5);</command>
            <command>       floats.add(arg6);</command>
            <command>       floats.add(arg7);</command>
            <command>       floats.add(arg8);</command>
            <command>       floats.add(arg9);</command>
            <command>       floats.add(arg10);</command>
            <command>       floats.add(arg11);</command>
            <command>    }</command>
            <command>    void addString0(){}</command>
            <command>    void addString1(string arg0 = ""){</command>
            <command>       strings.add(arg0);</command>
            <command>    }</command>
            <command>    void addString2(string arg0 = "", string arg1 = ""){</command>
            <command>       strings.add(arg0);</command>
            <command>       strings.add(arg1);</command>
            <command>    }</command>
            <command>    void addString3(string arg0 = "", string arg1 = "", string arg2 = ""){</command>
            <command>       strings.add(arg0);</command>
            <command>       strings.add(arg1);</command>
            <command>       strings.add(arg2);</command>
            <command>    }</command>
            <command>    void addString4(string arg0 = "", string arg1 = "", string arg2 = "", string arg3 = ""){</command>
            <command>       strings.add(arg0);</command>
            <command>       strings.add(arg1);</command>
            <command>       strings.add(arg2);</command>
            <command>       strings.add(arg3);</command>
            <command>    }</command>
            <command>    void addString5(string arg0 = "", string arg1 = "", string arg2 = "", string arg3 = "", string arg4 = ""){</command>
            <command>       strings.add(arg0);</command>
            <command>       strings.add(arg1);</command>
            <command>       strings.add(arg2);</command>
            <command>       strings.add(arg3);</command>
            <command>       strings.add(arg4);</command>
            <command>    }</command>
            <command>    void addString6(string arg0 = "", string arg1 = "", string arg2 = "", string arg3 = "", string arg4 = "", string arg5 = ""){</command>
            <command>       strings.add(arg0);</command>
            <command>       strings.add(arg1);</command>
            <command>       strings.add(arg2);</command>
            <command>       strings.add(arg3);</command>
            <command>       strings.add(arg4);</command>
            <command>       strings.add(arg5);</command>
            <command>    }</command>
            <command>    void addString7(string arg0 = "", string arg1 = "", string arg2 = "", string arg3 = "", string arg4 = "", string arg5 = "", string arg6 = ""){</command>
            <command>       strings.add(arg0);</command>
            <command>       strings.add(arg1);</command>
            <command>       strings.add(arg2);</command>
            <command>       strings.add(arg3);</command>
            <command>       strings.add(arg4);</command>
            <command>       strings.add(arg5);</command>
            <command>       strings.add(arg6);</command>
            <command>    }</command>
            <command>    void addString8(string arg0 = "", string arg1 = "", string arg2 = "", string arg3 = "", string arg4 = "", string arg5 = "", string arg6 = "", string arg7 = ""){</command>
            <command>       strings.add(arg0);</command>
            <command>       strings.add(arg1);</command>
            <command>       strings.add(arg2);</command>
            <command>       strings.add(arg3);</command>
            <command>       strings.add(arg4);</command>
            <command>       strings.add(arg5);</command>
            <command>       strings.add(arg6);</command>
            <command>       strings.add(arg7);</command>
            <command>    }</command>
            <command>    void addString9(string arg0 = "", string arg1 = "", string arg2 = "", string arg3 = "", string arg4 = "", string arg5 = "", string arg6 = "", string arg7 = "", string arg8 = ""){</command>
            <command>       strings.add(arg0);</command>
            <command>       strings.add(arg1);</command>
            <command>       strings.add(arg2);</command>
            <command>       strings.add(arg3);</command>
            <command>       strings.add(arg4);</command>
            <command>       strings.add(arg5);</command>
            <command>       strings.add(arg6);</command>
            <command>       strings.add(arg7);</command>
            <command>       strings.add(arg8);</command>
            <command>    }</command>
            <command>    void addString10(string arg0 = "", string arg1 = "", string arg2 = "", string arg3 = "", string arg4 = "", string arg5 = "", string arg6 = "", string arg7 = "", string arg8 = "", string arg9 = ""){</command>
            <command>       strings.add(arg0);</command>
            <command>       strings.add(arg1);</command>
            <command>       strings.add(arg2);</command>
            <command>       strings.add(arg3);</command>
            <command>       strings.add(arg4);</command>
            <command>       strings.add(arg5);</command>
            <command>       strings.add(arg6);</command>
            <command>       strings.add(arg7);</command>
            <command>       strings.add(arg8);</command>
            <command>       strings.add(arg9);</command>
            <command>    }</command>
            <command>    void addString11(string arg0 = "", string arg1 = "", string arg2 = "", string arg3 = "", string arg4 = "", string arg5 = "", string arg6 = "", string arg7 = "", string arg8 = "", string arg9 = "", </command>
            <command>           string arg10 = ""){</command>
            <command>       strings.add(arg0);</command>
            <command>       strings.add(arg1);</command>
            <command>       strings.add(arg2);</command>
            <command>       strings.add(arg3);</command>
            <command>       strings.add(arg4);</command>
            <command>       strings.add(arg5);</command>
            <command>       strings.add(arg6);</command>
            <command>       strings.add(arg7);</command>
            <command>       strings.add(arg8);</command>
            <command>       strings.add(arg9);</command>
            <command>       strings.add(arg10);</command>
            <command>    }</command>
            <command>    void addString12(string arg0 = "", string arg1 = "", string arg2 = "", string arg3 = "", string arg4 = "", string arg5 = "", string arg6 = "", string arg7 = "", string arg8 = "", string arg9 = "", </command>
            <command>           string arg10 = "", string arg11 = ""){</command>
            <command>       strings.add(arg0);</command>
            <command>       strings.add(arg1);</command>
            <command>       strings.add(arg2);</command>
            <command>       strings.add(arg3);</command>
            <command>       strings.add(arg4);</command>
            <command>       strings.add(arg5);</command>
            <command>       strings.add(arg6);</command>
            <command>       strings.add(arg7);</command>
            <command>       strings.add(arg8);</command>
            <command>       strings.add(arg9);</command>
            <command>       strings.add(arg10);</command>
            <command>       strings.add(arg11);</command>
            <command>    }</command>
            <command>    void addVector0(){}</command>
            <command>    void addVector1(vector arg0 = cOriginVector){</command>
            <command>       vectors.add(arg0);</command>
            <command>    }</command>
            <command>    void addVector2(vector arg0 = cOriginVector, vector arg1 = cOriginVector){</command>
            <command>       vectors.add(arg0);</command>
            <command>       vectors.add(arg1);</command>
            <command>    }</command>
            <command>    void addVector3(vector arg0 = cOriginVector, vector arg1 = cOriginVector, vector arg2 = cOriginVector){</command>
            <command>       vectors.add(arg0);</command>
            <command>       vectors.add(arg1);</command>
            <command>       vectors.add(arg2);</command>
            <command>    }</command>
            <command>    void addVector4(vector arg0 = cOriginVector, vector arg1 = cOriginVector, vector arg2 = cOriginVector, vector arg3 = cOriginVector){</command>
            <command>       vectors.add(arg0);</command>
            <command>       vectors.add(arg1);</command>
            <command>       vectors.add(arg2);</command>
            <command>       vectors.add(arg3);</command>
            <command>    }</command>
            <command>    void addVector5(vector arg0 = cOriginVector, vector arg1 = cOriginVector, vector arg2 = cOriginVector, vector arg3 = cOriginVector, vector arg4 = cOriginVector){</command>
            <command>       vectors.add(arg0);</command>
            <command>       vectors.add(arg1);</command>
            <command>       vectors.add(arg2);</command>
            <command>       vectors.add(arg3);</command>
            <command>       vectors.add(arg4);</command>
            <command>    }</command>
            <command>    void addVector6(vector arg0 = cOriginVector, vector arg1 = cOriginVector, vector arg2 = cOriginVector, vector arg3 = cOriginVector, vector arg4 = cOriginVector, vector arg5 = cOriginVector){</command>
            <command>       vectors.add(arg0);</command>
            <command>       vectors.add(arg1);</command>
            <command>       vectors.add(arg2);</command>
            <command>       vectors.add(arg3);</command>
            <command>       vectors.add(arg4);</command>
            <command>       vectors.add(arg5);</command>
            <command>    }</command>
            <command>    void addVector7(vector arg0 = cOriginVector, vector arg1 = cOriginVector, vector arg2 = cOriginVector, vector arg3 = cOriginVector, vector arg4 = cOriginVector, vector arg5 = cOriginVector, vector arg6 = cOriginVector){</command>
            <command>       vectors.add(arg0);</command>
            <command>       vectors.add(arg1);</command>
            <command>       vectors.add(arg2);</command>
            <command>       vectors.add(arg3);</command>
            <command>       vectors.add(arg4);</command>
            <command>       vectors.add(arg5);</command>
            <command>       vectors.add(arg6);</command>
            <command>    }</command>
            <command>    void addVector8(vector arg0 = cOriginVector, vector arg1 = cOriginVector, vector arg2 = cOriginVector, vector arg3 = cOriginVector, vector arg4 = cOriginVector, vector arg5 = cOriginVector, vector arg6 = cOriginVector, </command>
            <command>           vector arg7 = cOriginVector){</command>
            <command>       vectors.add(arg0);</command>
            <command>       vectors.add(arg1);</command>
            <command>       vectors.add(arg2);</command>
            <command>       vectors.add(arg3);</command>
            <command>       vectors.add(arg4);</command>
            <command>       vectors.add(arg5);</command>
            <command>       vectors.add(arg6);</command>
            <command>       vectors.add(arg7);</command>
            <command>    }</command>
            <command>    void addVector9(vector arg0 = cOriginVector, vector arg1 = cOriginVector, vector arg2 = cOriginVector, vector arg3 = cOriginVector, vector arg4 = cOriginVector, vector arg5 = cOriginVector, vector arg6 = cOriginVector, </command>
            <command>           vector arg7 = cOriginVector, vector arg8 = cOriginVector){</command>
            <command>       vectors.add(arg0);</command>
            <command>       vectors.add(arg1);</command>
            <command>       vectors.add(arg2);</command>
            <command>       vectors.add(arg3);</command>
            <command>       vectors.add(arg4);</command>
            <command>       vectors.add(arg5);</command>
            <command>       vectors.add(arg6);</command>
            <command>       vectors.add(arg7);</command>
            <command>       vectors.add(arg8);</command>
            <command>    }</command>
            <command>    void addVector10(vector arg0 = cOriginVector, vector arg1 = cOriginVector, vector arg2 = cOriginVector, vector arg3 = cOriginVector, vector arg4 = cOriginVector, vector arg5 = cOriginVector, vector arg6 = cOriginVector, </command>
            <command>           vector arg7 = cOriginVector, vector arg8 = cOriginVector, vector arg9 = cOriginVector){</command>
            <command>       vectors.add(arg0);</command>
            <command>       vectors.add(arg1);</command>
            <command>       vectors.add(arg2);</command>
            <command>       vectors.add(arg3);</command>
            <command>       vectors.add(arg4);</command>
            <command>       vectors.add(arg5);</command>
            <command>       vectors.add(arg6);</command>
            <command>       vectors.add(arg7);</command>
            <command>       vectors.add(arg8);</command>
            <command>       vectors.add(arg9);</command>
            <command>    }</command>
            <command>    void addVector11(vector arg0 = cOriginVector, vector arg1 = cOriginVector, vector arg2 = cOriginVector, vector arg3 = cOriginVector, vector arg4 = cOriginVector, vector arg5 = cOriginVector, vector arg6 = cOriginVector, </command>
            <command>           vector arg7 = cOriginVector, vector arg8 = cOriginVector, vector arg9 = cOriginVector, vector arg10 = cOriginVector){</command>
            <command>       vectors.add(arg0);</command>
            <command>       vectors.add(arg1);</command>
            <command>       vectors.add(arg2);</command>
            <command>       vectors.add(arg3);</command>
            <command>       vectors.add(arg4);</command>
            <command>       vectors.add(arg5);</command>
            <command>       vectors.add(arg6);</command>
            <command>       vectors.add(arg7);</command>
            <command>       vectors.add(arg8);</command>
            <command>       vectors.add(arg9);</command>
            <command>       vectors.add(arg10);</command>
            <command>    }</command>
            <command>    void addVector12(vector arg0 = cOriginVector, vector arg1 = cOriginVector, vector arg2 = cOriginVector, vector arg3 = cOriginVector, vector arg4 = cOriginVector, vector arg5 = cOriginVector, vector arg6 = cOriginVector, </command>
            <command>           vector arg7 = cOriginVector, vector arg8 = cOriginVector, vector arg9 = cOriginVector, vector arg10 = cOriginVector, vector arg11 = cOriginVector){</command>
            <command>       vectors.add(arg0);</command>
            <command>       vectors.add(arg1);</command>
            <command>       vectors.add(arg2);</command>
            <command>       vectors.add(arg3);</command>
            <command>       vectors.add(arg4);</command>
            <command>       vectors.add(arg5);</command>
            <command>       vectors.add(arg6);</command>
            <command>       vectors.add(arg7);</command>
            <command>       vectors.add(arg8);</command>
            <command>       vectors.add(arg9);</command>
            <command>       vectors.add(arg10);</command>
            <command>       vectors.add(arg11);</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>class __Scheduler {</command>
            <command>    int count = 0;</command>
            <command>    int[] delayArray = default;</command>
            <command>    bool(int)[] toRunArray = default;</command>
            <command>    int[] lastTimeArray = default;</command>
            <command>    int[] iterationArray = default;</command>
            <command></command>
            <command>    void process(){</command>
            <command>        int time = xsGetTimeMS();</command>
            <command>        for(int index = count - 1; index &gt;= 0; index--){</command>
            <command>            int delay = delayArray[index];</command>
            <command>            int lastTime = lastTimeArray[index];</command>
            <command>            if(time &lt; lastTime + delay){</command>
            <command>                continue;</command>
            <command>            }</command>
            <command>            lastTimeArray[index] = lastTime + delay;</command>
            <command>            int iteration = iterationArray[index];</command>
            <command>            iteration++;</command>
            <command>            iterationArray[index] = iteration;</command>
            <command>            bool(int) toRun = toRunArray[index];</command>
            <command>            if(toRun(iteration) == false){</command>
            <command>                count--;</command>
            <command>                delayArray[index] = delayArray[count];</command>
            <command>                toRunArray[index] = toRunArray[count];</command>
            <command>                lastTimeArray[index] = lastTimeArray[count];</command>
            <command>                iterationArray[index] = iterationArray[count];</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void add(int delay = 0, bool firstImmediate = false, bool(int) toRun = [](int iteration = 1) -&gt; bool {return false;}){</command>
            <command>        if(firstImmediate){</command>
            <command>            if(toRun(0) == false){</command>
            <command>                return;</command>
            <command>            }</command>
            <command>        }</command>
            <command>        if(count &lt; delayArray.size()){</command>
            <command>            delayArray[count] = delay;</command>
            <command>            toRunArray[count] = toRun;</command>
            <command>            lastTimeArray[count] = xsGetTimeMS();</command>
            <command>            iterationArray[count] = firstImmediate ? 1 : 0;</command>
            <command>        } else {</command>
            <command>            delayArray.add(delay);</command>
            <command>            toRunArray.add(toRun);</command>
            <command>            lastTimeArray.add(xsGetTimeMS());</command>
            <command>            iterationArray.add(firstImmediate ? 1 : 0);</command>
            <command>        }</command>
            <command>        count++;</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>__Scheduler __scheduler;</command>
            <command></command>
            <command>class __SchedulerParameters {</command>
            <command>    int count = 0;</command>
            <command>    int[] delayArray = default;</command>
            <command>    bool(int, ref __Parameters)[] toRunArray = default;</command>
            <command>    int[] lastTimeArray = default;</command>
            <command>    int[] iterationArray = default;</command>
            <command>    __Parameters[] parametersArray = default;</command>
            <command></command>
            <command>    void process(){</command>
            <command>        int time = xsGetTimeMS();</command>
            <command>        for(int index = count - 1; index &gt;= 0; index--){</command>
            <command>            int delay = delayArray[index];</command>
            <command>            int lastTime = lastTimeArray[index];</command>
            <command>            if(time &lt; lastTime + delay){</command>
            <command>                continue;</command>
            <command>            }</command>
            <command>            lastTimeArray[index] = lastTime + delay;</command>
            <command>            int iteration = iterationArray[index];</command>
            <command>            iteration++;</command>
            <command>            iterationArray[index] = iteration;</command>
            <command>            bool(int, ref __Parameters) toRun = toRunArray[index];</command>
            <command>            __Parameters parameters = parametersArray[index];</command>
            <command>            if(toRun(iteration, parameters) == false){</command>
            <command>                count--;</command>
            <command>                delayArray[index] = delayArray[count];</command>
            <command>                toRunArray[index] = toRunArray[count];</command>
            <command>                lastTimeArray[index] = lastTimeArray[count];</command>
            <command>                iterationArray[index] = iterationArray[count];</command>
            <command>                parametersArray[index] = parametersArray[count];</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void add(int delay = 0, bool firstImmediate = false, ref __Parameters parameters, bool(int, ref __Parameters) toRun = [](int iteration = 1, ref __Parameters parameters) -&gt; bool {return false;}){</command>
            <command>        if(firstImmediate){</command>
            <command>            if(toRun(0, parameters) == false){</command>
            <command>                return;</command>
            <command>            }</command>
            <command>        }</command>
            <command>        if(count &lt; delayArray.size()){</command>
            <command>            delayArray[count] = delay;</command>
            <command>            toRunArray[count] = toRun;</command>
            <command>            lastTimeArray[count] = xsGetTimeMS();</command>
            <command>            iterationArray[count] = firstImmediate ? 1 : 0;</command>
            <command>            parametersArray[count] = parameters;</command>
            <command>        } else {</command>
            <command>            delayArray.add(delay);</command>
            <command>            toRunArray.add(toRun);</command>
            <command>            lastTimeArray.add(xsGetTimeMS());</command>
            <command>            iterationArray.add(firstImmediate ? 1 : 0);</command>
            <command>            parametersArray.add(parameters);</command>
            <command>        }</command>
            <command>        count++;</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>__SchedulerParameters __schedulerParameters;</command>
            <command></command>
            <command>class __ForEachPlayerTrigger {</command>
            <command>    int count = 0;</command>
            <command>    bool[] loopArray = default;</command>
            <command>    int[] lastActivatedTimeArray = default;</command>
            <command>    int[] pArray = default;</command>
            <command>    int(int, int)[] triggerArray = default;</command>
            <command></command>
            <command>    void process(){</command>
            <command>        for(int i = count - 1; i &gt;= 0; i--){</command>
            <command>            bool loop = loopArray[i];</command>
            <command>            int lastActivatedTime = lastActivatedTimeArray[i];</command>
            <command>            int(int, int) trigger = triggerArray[i];</command>
            <command>            int p = pArray[i]; </command>
            <command>            int state = trigger(lastActivatedTime, p);</command>
            <command>            if(state &gt; 0){</command>
            <command>               lastActivatedTimeArray[i] = xsGetTimeMS();</command>
            <command>            }</command>
            <command>            if(state == 2 || (loop == false &amp;&amp; state == 1)){</command>
            <command>                count--;</command>
            <command>                loopArray[i] = loopArray[count];</command>
            <command>                lastActivatedTimeArray[i] = lastActivatedTimeArray[count];</command>
            <command>                pArray[i] = pArray[count];</command>
            <command>                triggerArray[i] = triggerArray[count];</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void add(bool loop = false, int p = 1, int(int, int) trigger = [](int cActivationTime = 0, int p = 1) -&gt; int {return 0;}){</command>
            <command>        if(count &lt; loopArray.size()){</command>
            <command>            loopArray[count] = loop;</command>
            <command>            pArray[count] = p;</command>
            <command>            lastActivatedTimeArray[count] = xsGetTimeMS();</command>
            <command>            triggerArray[count] = trigger;</command>
            <command>        } else {</command>
            <command>            loopArray.add(loop);</command>
            <command>            pArray.add(p);</command>
            <command>            lastActivatedTimeArray.add(xsGetTimeMS());</command>
            <command>            triggerArray.add(trigger);</command>
            <command>        }</command>
            <command>        count++;</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>class __UnitScheduler {</command>
            <command>    int count = 0;</command>
            <command>    int[] unitArray = default;</command>
            <command>    int[] delayArray = default;</command>
            <command>    bool(int, int)[] toRunArray = default;</command>
            <command>    int[] lastTimeArray = default;</command>
            <command>    int[] iterationArray = default;</command>
            <command></command>
            <command>    void process(){</command>
            <command>        int time = xsGetTimeMS();</command>
            <command>        for(int index = count - 1; index &gt;= 0; index--){</command>
            <command>            int delay = delayArray[index];</command>
            <command>            int lastTime = lastTimeArray[index];</command>
            <command>            if(time &lt; lastTime + delay){</command>
            <command>                continue;</command>
            <command>            }</command>
            <command>            lastTimeArray[index] = lastTime + delay;</command>
            <command>            int iteration = iterationArray[index];</command>
            <command>            iteration++;</command>
            <command>            iterationArray[index] = iteration;</command>
            <command>            int unitId = unitArray[index];</command>
            <command>            bool(int, int) toRun = toRunArray[index];</command>
            <command>            bool remove = kbUnitGetProtoUnitID(unitId) &lt; 0;</command>
            <command>            if(remove == false){</command>
            <command>               remove = toRun(unitId, iteration) == false;</command>
            <command>            }</command>
            <command>            if(remove){</command>
            <command>                count--;</command>
            <command>                unitArray[index] = unitArray[count];</command>
            <command>                delayArray[index] = delayArray[count];</command>
            <command>                toRunArray[index] = toRunArray[count];</command>
            <command>                lastTimeArray[index] = lastTimeArray[count];</command>
            <command>                iterationArray[index] = iterationArray[count];</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void add(int unitId = 0, int delay = 0, bool firstImmediate = false, bool(int, int) toRun = [](int unitId = 0, int iteration = 1) -&gt; bool {return false;}){</command>
            <command>        if(firstImmediate){</command>
            <command>            bool remove = kbUnitGetProtoUnitID(unitId) &lt; 0;</command>
            <command>            if(remove == false){</command>
            <command>                remove = toRun(unitId, 0) == false;</command>
            <command>            }</command>
            <command>            if(remove){</command>
            <command>                return;</command>
            <command>            }</command>
            <command>        }</command>
            <command>        if(count &lt; delayArray.size()){</command>
            <command>            unitArray[count] = unitId;</command>
            <command>            delayArray[count] = delay;</command>
            <command>            toRunArray[count] = toRun;</command>
            <command>            lastTimeArray[count] = xsGetTimeMS();</command>
            <command>            iterationArray[count] = firstImmediate ? 1 : 0;</command>
            <command>        } else {</command>
            <command>            unitArray.add(unitId);</command>
            <command>            delayArray.add(delay);</command>
            <command>            toRunArray.add(toRun);</command>
            <command>            lastTimeArray.add(xsGetTimeMS());</command>
            <command>            iterationArray.add(firstImmediate ? 1 : 0);</command>
            <command>        }</command>
            <command>        count++;</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>__UnitScheduler __unitScheduler;</command>
            <command></command>
            <command>class __UnitSchedulerParameters {</command>
            <command>    int count = 0;</command>
            <command>    int[] unitArray = default;</command>
            <command>    int[] delayArray = default;</command>
            <command>    bool(int, int, ref __Parameters)[] toRunArray = default;</command>
            <command>    int[] lastTimeArray = default;</command>
            <command>    int[] iterationArray = default;</command>
            <command>    __Parameters[] parametersArray = default;</command>
            <command></command>
            <command>    void process(){</command>
            <command>        int time = xsGetTimeMS();</command>
            <command>        for(int index = count - 1; index &gt;= 0; index--){</command>
            <command>            int delay = delayArray[index];</command>
            <command>            int lastTime = lastTimeArray[index];</command>
            <command>            if(time &lt; lastTime + delay){</command>
            <command>                continue;</command>
            <command>            }</command>
            <command>            lastTimeArray[index] = lastTime + delay;</command>
            <command>            int iteration = iterationArray[index];</command>
            <command>            iteration++;</command>
            <command>            iterationArray[index] = iteration;</command>
            <command>            int unitId = unitArray[index];</command>
            <command>            bool(int, int, ref __Parameters) toRun = toRunArray[index];</command>
            <command>            __Parameters parameters = parametersArray[index];</command>
            <command>            bool remove = kbUnitGetProtoUnitID(unitId) &lt; 0;</command>
            <command>            if(remove == false){</command>
            <command>               remove = toRun(unitId, iteration, parameters) == false;</command>
            <command>            }</command>
            <command>            if(remove){</command>
            <command>                count--;</command>
            <command>                unitArray[index] = unitArray[count];</command>
            <command>                delayArray[index] = delayArray[count];</command>
            <command>                toRunArray[index] = toRunArray[count];</command>
            <command>                lastTimeArray[index] = lastTimeArray[count];</command>
            <command>                iterationArray[index] = iterationArray[count];</command>
            <command>                parametersArray[index] = parametersArray[count];</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void add(int unitId = 0, int delay = 0, bool firstImmediate = false, ref __Parameters parameters, bool(int, int, ref __Parameters) toRun = [](int unitId = 0, int iteration = 1, ref __Parameters parameters) -&gt; bool {return false;}){</command>
            <command>        if(firstImmediate){</command>
            <command>            bool remove = kbUnitGetProtoUnitID(unitId) &lt; 0;</command>
            <command>            if(remove == false){</command>
            <command>                remove = toRun(unitId, 0, parameters) == false;</command>
            <command>            }</command>
            <command>            if(remove){</command>
            <command>                return;</command>
            <command>            }</command>
            <command>        }</command>
            <command>        if(count &lt; delayArray.size()){</command>
            <command>            unitArray[count] = unitId;</command>
            <command>            delayArray[count] = delay;</command>
            <command>            toRunArray[count] = toRun;</command>
            <command>            lastTimeArray[count] = xsGetTimeMS();</command>
            <command>            iterationArray[count] = firstImmediate ? 1 : 0;</command>
            <command>            parametersArray[count] = parameters;</command>
            <command>        } else {</command>
            <command>            unitArray.add(unitId);</command>
            <command>            delayArray.add(delay);</command>
            <command>            toRunArray.add(toRun);</command>
            <command>            lastTimeArray.add(xsGetTimeMS());</command>
            <command>            iterationArray.add(firstImmediate ? 1 : 0);</command>
            <command>            parametersArray.add(parameters);</command>
            <command>        }</command>
            <command>        count++;</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>__UnitSchedulerParameters __unitSchedulerParameters;</command>
            <command></command>
            <command>__ForEachPlayerTrigger __forEachPlayerTrigger;</command>
            <command></command>
            <command>class __UnitCreatedHandler {</command>
            <command>    bool initialised = false;</command>
            <command>    void(int)[] handlerArray = default;</command>
            <command>    void(int, ref __Parameters)[] handlerParametersArray = default;</command>
            <command>    __Parameters[] parametersArray = default;</command>
            <command></command>
            <command>    void initialise(){</command>
            <command>        trSetAutoResetRecentUnits(false);</command>
            <command>        initialised = true;</command>
            <command>    }</command>
            <command></command>
            <command>    void addHandler(void(int) handler = [](int unitId = 0) -&gt; void {}){</command>
            <command>        handlerArray.add(handler);</command>
            <command>    }</command>
            <command></command>
            <command>    void addHandlerParameters(ref __Parameters parameters, void(int, ref __Parameters) handler = [](int unitId = 0, ref __Parameters parameters) -&gt; void {}){</command>
            <command>        handlerParametersArray.add(handler);</command>
            <command>        parametersArray.add(parameters);</command>
            <command>    }</command>
            <command></command>
            <command>    void process(){</command>
            <command>        if(!initialised){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        while(true){</command>
            <command>            int[] recent = trGetRecentUnits();</command>
            <command>            if(recent.size() &lt;= 0){</command>
            <command>                break;</command>
            <command>            }</command>
            <command>            trResetRecentUnits();</command>
            <command>            for(int j = 0; j &lt; handlerArray.size(); j++){</command>
            <command>                void(int) handler = handlerArray[j];</command>
            <command>                for(int i = 0; i &lt; recent.size(); i++){</command>
            <command>                    trUnitSelectClear();</command>
            <command>                    trUnitSelectByID(recent[i]);</command>
            <command>                    handler(recent[i]);</command>
            <command>                }</command>
            <command>            }</command>
            <command>            for(int j = 0; j &lt; handlerParametersArray.size(); j++){</command>
            <command>                void(int, ref __Parameters) handler = handlerParametersArray[j];</command>
            <command>                __Parameters parameters = parametersArray[j];</command>
            <command>                for(int i = 0; i &lt; recent.size(); i++){</command>
            <command>                    trUnitSelectClear();</command>
            <command>                    trUnitSelectByID(recent[i]);</command>
            <command>                    handler(recent[i], parameters);</command>
            <command>                }</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>__UnitCreatedHandler __unitCreatedHandler;</command>
            <command></command>
            <command>class __UnitGroup {</command>
            <command>    bool initialised = false;</command>
            <command>    int count = 0;</command>
            <command>    int[] unitIdArray = default;</command>
            <command></command>
            <command>    void initialise(){</command>
            <command>        unitIdArray = new int(10, 0);</command>
            <command>        initialised = true;</command>
            <command>    }</command>
            <command></command>
            <command>    void process(bool(int) handler = [](int unitId = 0) -&gt; bool {return false;}){</command>
            <command>        if(!initialised){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        for(int index = count - 1; index &gt;= 0; index--){</command>
            <command>            int unitId = unitIdArray[index];</command>
            <command>            if(kbUnitGetProtoUnitID(unitId) &lt; 0){</command>
            <command>                count--;</command>
            <command>                unitIdArray[index] = unitIdArray[count];</command>
            <command>                continue;</command>
            <command>            }</command>
            <command>            trUnitSelectClear();</command>
            <command>            trUnitSelectByID(unitId);</command>
            <command>            if(handler(unitId)){</command>
            <command>                count--;</command>
            <command>                unitIdArray[index] = unitIdArray[count];</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void processParameters(ref __Parameters parameters, bool(int, ref __Parameters) handler = [](int unitId = 0, ref __Parameters parameters) -&gt; bool {return false;}){</command>
            <command>        if(!initialised){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        for(int index = count - 1; index &gt;= 0; index--){</command>
            <command>            int unitId = unitIdArray[index];</command>
            <command>            if(kbUnitGetProtoUnitID(unitId) &lt; 0){</command>
            <command>                count--;</command>
            <command>                unitIdArray[index] = unitIdArray[count];</command>
            <command>                continue;</command>
            <command>            }</command>
            <command>            trUnitSelectClear();</command>
            <command>            trUnitSelectByID(unitId);</command>
            <command>            if(handler(unitId, parameters)){</command>
            <command>                count--;</command>
            <command>                unitIdArray[index] = unitIdArray[count];</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void add(int unitId = 0){</command>
            <command>        if(!initialised){</command>
            <command>            initialise();</command>
            <command>        }</command>
            <command>        if(count == unitIdArray.size()){</command>
            <command>            process();</command>
            <command>        }</command>
            <command>        if(count == unitIdArray.size()){</command>
            <command>            unitIdArray.resize(2 * unitIdArray.size(), 0);</command>
            <command>        }</command>
            <command>        unitIdArray[count] = unitId;</command>
            <command>        count++;</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>class __Attach {</command>
            <command>    int count = 0;</command>
            <command>    int[] fromUnitIdArray = default;</command>
            <command>    int[] toUnitIdArray = default;</command>
            <command>    bool(int, int)[] stopArray = default;</command>
            <command>    void(int)[] handleStopArray = default;</command>
            <command></command>
            <command>    void removeAtIndex(int index = 0){</command>
            <command>        count--;</command>
            <command>        fromUnitIdArray[index] = fromUnitIdArray[count];</command>
            <command>        toUnitIdArray[index] = toUnitIdArray[count];</command>
            <command>        stopArray[index] = stopArray[count];</command>
            <command>        handleStopArray[index] = handleStopArray[count];</command>
            <command>    }</command>
            <command></command>
            <command>    void process(){</command>
            <command>        for(int index = count - 1; index &gt;= 0; index--){</command>
            <command>            int fromUnitId = fromUnitIdArray[index];</command>
            <command>            int toUnitId = toUnitIdArray[index];</command>
            <command>            void(int) handleStop = handleStopArray[index];</command>
            <command>            if(kbUnitGetProtoUnitID(fromUnitId) &lt; 0 || kbUnitGetProtoUnitID(toUnitId) &lt; 0){</command>
            <command>                if(kbUnitGetProtoUnitID(fromUnitId) &gt;= 0){</command>
            <command>                   vector fromLoc = trUnitGetPosition(fromUnitId);</command>
            <command>                   trUnitSelectClear();</command>
            <command>                   trUnitSelectByID(fromUnitId);</command>
            <command>                   trUnitReposition(fromLoc.x, fromLoc.y, fromLoc.z, false, true);</command>
            <command>                   handleStop(fromUnitId);</command>
            <command>                }</command>
            <command>                removeAtIndex(index);</command>
            <command>                continue;</command>
            <command>            }</command>
            <command>            trUnitSelectClear();</command>
            <command>            trUnitSelectByID(toUnitId);</command>
            <command>            bool(int, int) stop = stopArray[index];</command>
            <command>            bool shouldStop = stop(fromUnitId, toUnitId);</command>
            <command>            trUnitSelectClear();</command>
            <command>            trUnitSelectByID(fromUnitId);</command>
            <command>            trUnitRepositionToUnit(toUnitId, shouldStop == false, true);</command>
            <command>            trUnitSetHeading(trUnitGetHeading(toUnitId));</command>
            <command>            if(shouldStop){</command>
            <command>                removeAtIndex(index);</command>
            <command>                handleStop(fromUnitId);</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void add(int fromUnitId = 0, int toUnitId = 0,</command>
            <command>            bool(int, int) stop = [](int fromUnitId = -1, int toUnitId = -1) -&gt; bool{return false;}, </command>
            <command>            void(int) handleStop = [](int unitId = -1) -&gt; void{}){</command>
            <command>        if(count &lt; fromUnitIdArray.size()){</command>
            <command>            fromUnitIdArray[count] = fromUnitId;</command>
            <command>            toUnitIdArray[count] = toUnitId;</command>
            <command>            stopArray[count] = stop;</command>
            <command>            handleStopArray[count] = handleStop;</command>
            <command>        } else {</command>
            <command>            fromUnitIdArray.add(fromUnitId);</command>
            <command>            toUnitIdArray.add(toUnitId);</command>
            <command>            stopArray.add(stop);</command>
            <command>            handleStopArray.add(handleStop);</command>
            <command>        }</command>
            <command>        count++;</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>__Attach __attach;</command>
            <command></command>
            <command>class __AttachParameters {</command>
            <command>    int count = 0;</command>
            <command>    int[] fromUnitIdArray = default;</command>
            <command>    int[] toUnitIdArray = default;</command>
            <command>    bool(int, int, ref __Parameters)[] stopArray = default;</command>
            <command>    void(int, ref __Parameters)[] handleStopArray = default;</command>
            <command>    __Parameters[] parametersArray = default;</command>
            <command></command>
            <command>    void removeAtIndex(int index = 0){</command>
            <command>        count--;</command>
            <command>        fromUnitIdArray[index] = fromUnitIdArray[count];</command>
            <command>        toUnitIdArray[index] = toUnitIdArray[count];</command>
            <command>        stopArray[index] = stopArray[count];</command>
            <command>        handleStopArray[index] = handleStopArray[count];</command>
            <command>        parametersArray[index] = parametersArray[count];</command>
            <command>    }</command>
            <command></command>
            <command>    void process(){</command>
            <command>        for(int index = count - 1; index &gt;= 0; index--){</command>
            <command>            int fromUnitId = fromUnitIdArray[index];</command>
            <command>            int toUnitId = toUnitIdArray[index];</command>
            <command>            void(int, ref __Parameters) handleStop = handleStopArray[index];</command>
            <command>            __Parameters parameters = parametersArray[index];</command>
            <command>            if(kbUnitGetProtoUnitID(fromUnitId) &lt; 0 || kbUnitGetProtoUnitID(toUnitId) &lt; 0){</command>
            <command>                if(kbUnitGetProtoUnitID(fromUnitId) &gt;= 0){</command>
            <command>                   vector fromLoc = trUnitGetPosition(fromUnitId);</command>
            <command>                   trUnitSelectClear();</command>
            <command>                   trUnitSelectByID(fromUnitId);</command>
            <command>                   trUnitReposition(fromLoc.x, fromLoc.y, fromLoc.z, false, true);</command>
            <command>                   handleStop(fromUnitId, parameters);</command>
            <command>                }</command>
            <command>                removeAtIndex(index);</command>
            <command>                continue;</command>
            <command>            }</command>
            <command>            trUnitSelectClear();</command>
            <command>            trUnitSelectByID(toUnitId);</command>
            <command>            bool(int, int, ref __Parameters) stop = stopArray[index];</command>
            <command>            bool shouldStop = stop(fromUnitId, toUnitId, parameters);</command>
            <command>            trUnitSelectClear();</command>
            <command>            trUnitSelectByID(fromUnitId);</command>
            <command>            trUnitRepositionToUnit(toUnitId, shouldStop == false, true);</command>
            <command>            trUnitSetHeading(trUnitGetHeading(toUnitId));</command>
            <command>            if(shouldStop){</command>
            <command>                removeAtIndex(index);</command>
            <command>                handleStop(fromUnitId, parameters);</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void add(int fromUnitId = 0, int toUnitId = 0, ref __Parameters parameters,</command>
            <command>            bool(int, int, ref __Parameters) stop = [](int fromUnitId = -1, int toUnitId = -1, ref __Parameters parameters) -&gt; bool{return false;}, </command>
            <command>            void(int, ref __Parameters) handleStop = [](int unitId = -1, ref __Parameters parameters) -&gt; void{}){</command>
            <command>        if(count &lt; fromUnitIdArray.size()){</command>
            <command>            fromUnitIdArray[count] = fromUnitId;</command>
            <command>            toUnitIdArray[count] = toUnitId;</command>
            <command>            stopArray[count] = stop;</command>
            <command>            handleStopArray[count] = handleStop;</command>
            <command>            parametersArray[count] = parameters;</command>
            <command>        } else {</command>
            <command>            fromUnitIdArray.add(fromUnitId);</command>
            <command>            toUnitIdArray.add(toUnitId);</command>
            <command>            stopArray.add(stop);</command>
            <command>            handleStopArray.add(handleStop);</command>
            <command>            parametersArray.add(parameters);</command>
            <command>        }</command>
            <command>        count++;</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>__AttachParameters __attachParameters;</command>
            <command></command>
            <command>class __PhysicsState {</command>
            <command>    int unitId = -1;</command>
            <command>    vector position = cOriginVector;</command>
            <command>    vector velocity = cOriginVector;</command>
            <command>    vector acceleration = cOriginVector;</command>
            <command>    int time = 0;</command>
            <command>    int deltaTime = 0;</command>
            <command>};</command>
            <command></command>
            <command>class __Physics {</command>
            <command>    int count = 0;</command>
            <command>    int lastTime = 0;</command>
            <command>    __PhysicsState currentState;</command>
            <command>    int[] unitIdArray = default;</command>
            <command>    vector[] positionArray = default;</command>
            <command>    vector[] velocityArray = default;</command>
            <command>    vector[] accelerationArray = default;</command>
            <command>    bool[] flyArray = default;</command>
            <command>    int[] timeArray = default;</command>
            <command>    bool(ref __PhysicsState)[] stopArray = default;</command>
            <command>    void(int)[] handleStopArray = default;</command>
            <command></command>
            <command>    void removeAtIndex(int index = 0){</command>
            <command>        count--;</command>
            <command>        unitIdArray[index] = unitIdArray[count];</command>
            <command>        positionArray[index] = positionArray[count];</command>
            <command>        velocityArray[index] = velocityArray[count];</command>
            <command>        accelerationArray[index] = accelerationArray[count];</command>
            <command>        flyArray[index] = flyArray[count];</command>
            <command>        timeArray[index] = timeArray[count];</command>
            <command>        stopArray[index] = stopArray[count];</command>
            <command>        handleStopArray[index] = handleStopArray[count];</command>
            <command>    }</command>
            <command></command>
            <command>    void process(){</command>
            <command>        int deltaMs = xsGetTimeMS() - lastTime;</command>
            <command>        lastTime = xsGetTimeMS();</command>
            <command>        float delta = 0.001 * deltaMs;</command>
            <command>        float halfDeltaSq = 0.5 * delta * delta;</command>
            <command>        for(int index = count - 1; index &gt;= 0; index--){</command>
            <command>            int unitId = unitIdArray[index];</command>
            <command>            if(kbUnitGetProtoUnitID(unitId) &lt; 0){</command>
            <command>                removeAtIndex(index);</command>
            <command>                continue;</command>
            <command>            }</command>
            <command>            vector position = positionArray[index];</command>
            <command>            vector velocity = velocityArray[index];</command>
            <command>            vector acceleration = accelerationArray[index];</command>
            <command>            void(int) handleStop = handleStopArray[index];</command>
            <command>            currentState.position = vector(</command>
            <command>            position.x + velocity.x * delta + acceleration.x * halfDeltaSq,</command>
            <command>            position.y + velocity.y * delta + acceleration.y * halfDeltaSq,</command>
            <command>            position.z + velocity.z * delta + acceleration.z * halfDeltaSq);</command>
            <command>            currentState.velocity = vector(</command>
            <command>            velocity.x + acceleration.x * delta,</command>
            <command>            velocity.y + acceleration.y * delta,</command>
            <command>            velocity.z + acceleration.z * delta);</command>
            <command>            timeArray[index] = timeArray[index] + deltaMs;</command>
            <command>            trUnitSelectClear();</command>
            <command>            trUnitSelectByID(unitId);</command>
            <command>            bool(ref __PhysicsState) stop = stopArray[index];</command>
            <command>            currentState.unitId = unitId;</command>
            <command>            currentState.acceleration = acceleration;</command>
            <command>            currentState.time = timeArray[index];</command>
            <command>            currentState.deltaTime = deltaMs;</command>
            <command>            bool shouldStop = stop(currentState);</command>
            <command>            positionArray[index] = currentState.position;</command>
            <command>            velocityArray[index] = currentState.velocity;</command>
            <command>            accelerationArray[index] = currentState.acceleration;</command>
            <command>            trUnitSelectClear();</command>
            <command>            trUnitSelectByID(unitId);</command>
            <command>            bool fly = flyArray[index];</command>
            <command>            if(fly){</command>
            <command>                trUnitReposition(position.x, position.y, position.z, shouldStop == false, true);</command>
            <command>            } else {</command>
            <command>                trUnitReposition(position.x, position.y + __getTerrainHeightAccurate(position), position.z, shouldStop == false, true);</command>
            <command>            }</command>
            <command>            if(shouldStop){</command>
            <command>                removeAtIndex(index);</command>
            <command>                handleStop(unitId);</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void add(int unitId = 0, vector pos = cOriginVector, vector velocity = cOriginVector, vector acceleration = cOriginVector, bool fly = true,</command>
            <command>            bool(ref __PhysicsState) stop = [](ref __PhysicsState state) -&gt; bool{return false;},</command>
            <command>            void(int) handleStop = [](int unitId = -1) -&gt; void{}){</command>
            <command>        if(count == unitIdArray.size()){</command>
            <command>            for(int index = count - 1; index &gt;= 0; index--){</command>
            <command>                if(kbUnitGetProtoUnitID(unitId) &lt; 0){</command>
            <command>                    removeAtIndex(unitIdArray[index]);</command>
            <command>                }</command>
            <command>            }</command>
            <command>        }</command>
            <command>        if(count &lt; unitIdArray.size()){</command>
            <command>            unitIdArray[count] = unitId;</command>
            <command>            positionArray[count] = pos;</command>
            <command>            velocityArray[count] = velocity;</command>
            <command>            accelerationArray[count] = acceleration;</command>
            <command>            flyArray[count] = fly;</command>
            <command>            timeArray[count] = 0;</command>
            <command>            stopArray[count] = stop;</command>
            <command>            handleStopArray[count] = handleStop;</command>
            <command>        } else {</command>
            <command>            unitIdArray.add(unitId);</command>
            <command>            positionArray.add(pos);</command>
            <command>            velocityArray.add(velocity);</command>
            <command>            accelerationArray.add(acceleration);</command>
            <command>            flyArray.add(fly);</command>
            <command>            timeArray.add(0);</command>
            <command>            stopArray.add(stop);</command>
            <command>            handleStopArray.add(handleStop);</command>
            <command>        }</command>
            <command>        count++;</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>__Physics __physics;</command>
            <command></command>
            <command>class __PhysicsParameters {</command>
            <command>    int count = 0;</command>
            <command>    int lastTime = 0;</command>
            <command>    __PhysicsState currentState;</command>
            <command>    int[] unitIdArray = default;</command>
            <command>    vector[] positionArray = default;</command>
            <command>    vector[] velocityArray = default;</command>
            <command>    vector[] accelerationArray = default;</command>
            <command>    bool[] flyArray = default;</command>
            <command>    int[] timeArray = default;</command>
            <command>    bool(ref __PhysicsState, ref __Parameters)[] stopArray = default;</command>
            <command>    void(int, ref __Parameters)[] handleStopArray = default;</command>
            <command>    __Parameters[] parametersArray = default;</command>
            <command></command>
            <command>    void removeAtIndex(int index = 0){</command>
            <command>        count--;</command>
            <command>        unitIdArray[index] = unitIdArray[count];</command>
            <command>        positionArray[index] = positionArray[count];</command>
            <command>        velocityArray[index] = velocityArray[count];</command>
            <command>        accelerationArray[index] = accelerationArray[count];</command>
            <command>        flyArray[index] = flyArray[count];</command>
            <command>        timeArray[index] = timeArray[count];</command>
            <command>        stopArray[index] = stopArray[count];</command>
            <command>        handleStopArray[index] = handleStopArray[count];</command>
            <command>        parametersArray[index] = parametersArray[count];</command>
            <command>    }</command>
            <command></command>
            <command>    void process(){</command>
            <command>        int deltaMs = xsGetTimeMS() - lastTime;</command>
            <command>        lastTime = xsGetTimeMS();</command>
            <command>        float delta = 0.001 * deltaMs;</command>
            <command>        float halfDeltaSq = 0.5 * delta * delta;</command>
            <command>        for(int index = count - 1; index &gt;= 0; index--){</command>
            <command>            int unitId = unitIdArray[index];</command>
            <command>            if(kbUnitGetProtoUnitID(unitId) &lt; 0){</command>
            <command>                removeAtIndex(index);</command>
            <command>                continue;</command>
            <command>            }</command>
            <command>            vector position = positionArray[index];</command>
            <command>            vector velocity = velocityArray[index];</command>
            <command>            vector acceleration = accelerationArray[index];</command>
            <command>            void(int, ref __Parameters) handleStop = handleStopArray[index];</command>
            <command>            currentState.position = vector(</command>
            <command>            position.x + velocity.x * delta + acceleration.x * halfDeltaSq,</command>
            <command>            position.y + velocity.y * delta + acceleration.y * halfDeltaSq,</command>
            <command>            position.z + velocity.z * delta + acceleration.z * halfDeltaSq);</command>
            <command>            currentState.velocity = vector(</command>
            <command>            velocity.x + acceleration.x * delta,</command>
            <command>            velocity.y + acceleration.y * delta,</command>
            <command>            velocity.z + acceleration.z * delta);</command>
            <command>            timeArray[index] = timeArray[index] + deltaMs;</command>
            <command>            trUnitSelectClear();</command>
            <command>            trUnitSelectByID(unitId);</command>
            <command>            bool(ref __PhysicsState, ref __Parameters) stop = stopArray[index];</command>
            <command>            currentState.unitId = unitId;</command>
            <command>            currentState.acceleration = acceleration;</command>
            <command>            currentState.time = timeArray[index];</command>
            <command>            currentState.deltaTime = deltaMs;</command>
            <command>            __Parameters parameters = parametersArray[index];</command>
            <command>            bool shouldStop = stop(currentState, parameters);</command>
            <command>            positionArray[index] = currentState.position;</command>
            <command>            velocityArray[index] = currentState.velocity;</command>
            <command>            accelerationArray[index] = currentState.acceleration;</command>
            <command>            trUnitSelectClear();</command>
            <command>            trUnitSelectByID(unitId);</command>
            <command>            bool fly = flyArray[index];</command>
            <command>            if(fly){</command>
            <command>                trUnitReposition(position.x, position.y, position.z, shouldStop == false, true);</command>
            <command>            } else {</command>
            <command>                trUnitReposition(position.x, position.y + __getTerrainHeightAccurate(position), position.z, shouldStop == false, true);</command>
            <command>            }</command>
            <command>            if(shouldStop){</command>
            <command>                removeAtIndex(index);</command>
            <command>                handleStop(unitId, parameters);</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command></command>
            <command>    void add(int unitId = 0, vector pos = cOriginVector, vector velocity = cOriginVector, vector acceleration = cOriginVector, bool fly = true, ref __Parameters parameters,</command>
            <command>            bool(ref __PhysicsState, ref __Parameters) stop = [](ref __PhysicsState state, ref __Parameters parameters) -&gt; bool{return false;},</command>
            <command>            void(int, ref __Parameters) handleStop = [](int unitId = -1, ref __Parameters parameters) -&gt; void{}){</command>
            <command>        if(count == unitIdArray.size()){</command>
            <command>            for(int index = count - 1; index &gt;= 0; index--){</command>
            <command>                if(kbUnitGetProtoUnitID(unitId) &lt; 0){</command>
            <command>                    removeAtIndex(unitIdArray[index]);</command>
            <command>                }</command>
            <command>            }</command>
            <command>        }</command>
            <command>        if(count &lt; unitIdArray.size()){</command>
            <command>            unitIdArray[count] = unitId;</command>
            <command>            positionArray[count] = pos;</command>
            <command>            velocityArray[count] = velocity;</command>
            <command>            accelerationArray[count] = acceleration;</command>
            <command>            flyArray[count] = fly;</command>
            <command>            timeArray[count] = 0;</command>
            <command>            stopArray[count] = stop;</command>
            <command>            handleStopArray[count] = handleStop;</command>
            <command>            parametersArray[count] = parameters;</command>
            <command>        } else {</command>
            <command>            unitIdArray.add(unitId);</command>
            <command>            positionArray.add(pos);</command>
            <command>            velocityArray.add(velocity);</command>
            <command>            accelerationArray.add(acceleration);</command>
            <command>            flyArray.add(fly);</command>
            <command>            timeArray.add(0);</command>
            <command>            stopArray.add(stop);</command>
            <command>            handleStopArray.add(handleStop);</command>
            <command>            parametersArray.add(parameters);</command>
            <command>        }</command>
            <command>        count++;</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>__PhysicsParameters __physicsParameters;</command>
            <command></command>
            <command>class __EventHandlerStore {</command>
            <command>    bool initialised = false;</command>
            <command>    string[] eventIds = default;</command>
            <command>    void(ref __Parameters)[] handlers = default;</command>
            <command></command>
            <command>    void add(string eventId = "", void(ref __Parameters) handler = [](ref __Parameters parameters) -&gt; void {}){</command>
            <command>        eventIds.add(eventId);</command>
            <command>        handlers.add(handler);</command>
            <command>    }</command>
            <command></command>
            <command>    void fire(string eventId = "", ref __Parameters parameters){</command>
            <command>        for(int i = 0; i &lt; eventIds.size(); i++){</command>
            <command>            if(eventId == eventIds[i]){</command>
            <command>                void(ref __Parameters) handler = handlers[i];</command>
            <command>                handler(parameters);</command>
            <command>            }</command>
            <command>        }</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>__EventHandlerStore __eventHandlerStore;</command>
            <command></command>
            <command>class __EventHandlerStoreWithReturn {</command>
            <command>    bool initialised = false;</command>
            <command>    string[] eventIds = default;</command>
            <command>    void(ref __Parameters, ref __Parameters)[] handlers = default;</command>
            <command></command>
            <command>    void add(string eventId = "", void(ref __Parameters, ref __Parameters) handler = [](ref __Parameters parameters, ref __Parameters returnParameters) -&gt; void {}){</command>
            <command>        eventIds.add(eventId);</command>
            <command>        handlers.add(handler);</command>
            <command>    }</command>
            <command></command>
            <command>    __Parameters fire(string eventId = "", ref __Parameters parameters){</command>
            <command>        __Parameters returnParameters;</command>
            <command>        for(int i = 0; i &lt; eventIds.size(); i++){</command>
            <command>            if(eventId == eventIds[i]){</command>
            <command>                void(ref __Parameters, ref __Parameters) handler = handlers[i];</command>
            <command>                handler(parameters, returnParameters);</command>
            <command>            }</command>
            <command>        }</command>
            <command>        return returnParameters;</command>
            <command>    }</command>
            <command></command>
            <command>    bool fireConditional(string eventId = "", ref __Parameters parameters){</command>
            <command>        __Parameters returnParameters = fire(eventId, parameters);</command>
            <command>        bool[] returnParametersBools = returnParameters.bools;</command>
            <command>        if(returnParametersBools.size() &lt;= 0){</command>
            <command>           return false;</command>
            <command>        }</command>
            <command>        return returnParametersBools[0];</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>__EventHandlerStoreWithReturn __eventHandlerStoreWithReturn;</command>
            <command></command>
            <command>__HashStorageWithBool __storageWithBool;</command>
            <command>__HashStorageWithInt __storageWithInt;</command>
            <command>__HashStorageWithFloat __storageWithFloat;</command>
            <command>__HashStorageWithString __storageWithString;</command>
            <command>__HashStorageWithVector __storageWithVector;</command>
            <command></command>
            <command>int __queryIncrement = 0;</command>
            <command>int[] __queryTempResults = default;</command>
            <command></command>
            <command>int __getMapSizeX(){</command>
            <command>   xsSetContextPlayer(0);</command>
            <command>   return kbGetMapXSize();</command>
            <command>}</command>
            <command>int __getMapSizeZ(){</command>
            <command>   xsSetContextPlayer(0);</command>
            <command>   return kbGetMapZSize();</command>
            <command>}</command>
            <command>int __getMapSizeTilesX(){</command>
            <command>   xsSetContextPlayer(0);</command>
            <command>   return kbGetMapXSize() / 2;</command>
            <command>}</command>
            <command>int __getMapSizeTilesZ(){</command>
            <command>   xsSetContextPlayer(0);</command>
            <command>   return kbGetMapZSize() / 2;</command>
            <command>}</command>
            <command>int __calculateTerrainTypeId(string name = ""){</command>
            <command>   vector v = cOriginVector;</command>
            <command>   int old = trGetTerrainType(v);</command>
            <command>   int oldSub = trGetTerrainSubtype(v);</command>
            <command>   trPaintTerrainBySubtypeName(name, 0, 0, 0, 0, false);</command>
            <command>   int foundType = trGetTerrainType(v);</command>
            <command>   trPaintTerrain(old, oldSub, 0, 0, 0, 0, false);</command>
            <command>   return foundType;</command>
            <command>}</command>
            <command>int __calculateSubTerrainTypeId(string name = ""){</command>
            <command>   vector v = cOriginVector;</command>
            <command>   int old = trGetTerrainType(v);</command>
            <command>   int oldSub = trGetTerrainSubtype(v);</command>
            <command>   trPaintTerrainBySubtypeName(name, 0, 0, 0, 0, false);</command>
            <command>   int foundType = trGetTerrainSubtype(v);</command>
            <command>   trPaintTerrain(old, oldSub, 0, 0, 0, 0, false);</command>
            <command>   return foundType;</command>
            <command>}</command>
            <command>float __rectangleAreaGetLowX(float x0 = 0.0, float z0 = 0.0, float x1 = 0.0, float z1 = 0.0){</command>
            <command>   return min(x0, x1);</command>
            <command>}</command>
            <command>float __rectangleAreaGetLowZ(float x0 = 0.0, float z0 = 0.0, float x1 = 0.0, float z1 = 0.0){</command>
            <command>   return min(z0, z1);</command>
            <command>}</command>
            <command>float __rectangleAreaGetHighX(float x0 = 0.0, float z0 = 0.0, float x1 = 0.0, float z1 = 0.0){</command>
            <command>   return max(x0, x1);</command>
            <command>}</command>
            <command>float __rectangleAreaGetHighZ(float x0 = 0.0, float z0 = 0.0, float x1 = 0.0, float z1 = 0.0){</command>
            <command>   return max(z0, z1);</command>
            <command>}</command>
            <command>float __clampXInsideMap(float x = 0.0){</command>
            <command>   return max(0.0, min(x, __getMapSizeX()));</command>
            <command>}</command>
            <command>float __clampZInsideMap(float z = 0.0){</command>
            <command>   return max(0.0, min(z, __getMapSizeZ()));</command>
            <command>}</command>
            <command>vector __roundAreaToTileVertex(float x = 0.0, float y = 0.0, float z = 0.0){</command>
            <command>   return vector(2.0 * xsFloatToInt((x + 0.5) / 2.0), 0.0, 2.0 * xsFloatToInt((z + 0.5) / 2.0));</command>
            <command>}</command>
            <command>void __worldSmooth(int fromTilesX = 0, int fromTilesZ = 0, int toTilesX = 0, int toTilesZ = 0, bool outsideInfluence = false, int count = 1){</command>
            <command>   int tilesWidth = toTilesX - fromTilesX;</command>
            <command>   int tilesHeight = toTilesZ - fromTilesZ;</command>
            <command>   float[] heightLowerZ = new float(1 + tilesWidth, 0.0);</command>
            <command>   float heightLowerX = 0.0;</command>
            <command>   vector v = cOriginVector;</command>
            <command>   int workingHeight = 0.0;</command>
            <command>   int mapSizeX = __getMapSizeX();</command>
            <command>   int mapSizeZ = __getMapSizeZ();</command>
            <command>   for(int iteration = 0; iteration &lt; count; iteration++){</command>
            <command>       v = vector(fromTilesX * 2.0, 0.0, max(0.0, (outsideInfluence ? fromTilesZ - 1 : fromTilesZ) * 2.0));</command>
            <command>       for(int x = 0; x &lt;= tilesWidth; x++){</command>
            <command>           v.x = (x + fromTilesX) * 2.0;</command>
            <command>           heightLowerZ[x] = trGetTerrainHeight(v);</command>
            <command>       }</command>
            <command>       for(int z = 0; z &lt;= tilesHeight; z++){</command>
            <command>           v.x = max(0.0, (outsideInfluence ? fromTilesX - 1: fromTilesX) * 2.0);</command>
            <command>           v.z = (z + fromTilesZ) * 2.0;</command>
            <command>           heightLowerX = trGetTerrainHeight(v);</command>
            <command>           workingHeight = 0.0;</command>
            <command>           for(int x = 0; x &lt;= tilesWidth; x++){</command>
            <command>               workingHeight = heightLowerX;</command>
            <command>               v.x = (x + fromTilesX) * 2.0;</command>
            <command>               v.z = (z + fromTilesZ) * 2.0;</command>
            <command>               heightLowerX = trGetTerrainHeight(v);</command>
            <command>               workingHeight = workingHeight + 4.0 * heightLowerX;</command>
            <command>               workingHeight = workingHeight + heightLowerZ[x];</command>
            <command>               heightLowerZ[x] = heightLowerX;</command>
            <command>               v.x = min((outsideInfluence ? (x + 1 + fromTilesX) : min(x + 1 + fromTilesX, toTilesX)) * 2.0, mapSizeX);</command>
            <command>               workingHeight = workingHeight + trGetTerrainHeight(v);</command>
            <command>               v.x = (x + fromTilesX) * 2.0;</command>
            <command>               v.z = min((outsideInfluence ? (z + 1 + fromTilesZ) : min(z + 1 + fromTilesZ, toTilesZ)) * 2.0, mapSizeZ);</command>
            <command>               workingHeight = workingHeight + trGetTerrainHeight(v);</command>
            <command>               trChangeTerrainHeight((x + fromTilesX) * 2.0, (z + fromTilesZ) * 2.0, (x + fromTilesX) * 2.0, (z + fromTilesZ) * 2.0, workingHeight / 8.0);</command>
            <command>           }</command>
            <command>       }</command>
            <command>   }</command>
            <command>}</command>
            <command>float __worldGetSteepness(vector v = cOriginVector){</command>
            <command>   vector vInternal = vector(v.x - 1.0, v.y, v.z - 1.0);</command>
            <command>   float height0 = trGetTerrainHeight(vInternal);</command>
            <command>   vInternal.x = v.x + 1.0;</command>
            <command>   float height1 = trGetTerrainHeight(vInternal);</command>
            <command>   vInternal.z = v.z + 1.0;</command>
            <command>   float height2 = trGetTerrainHeight(vInternal);</command>
            <command>   vInternal.x = v.x - 1.0;</command>
            <command>   float height3 = trGetTerrainHeight(vInternal);</command>
            <command>   float minHeight = min(min(height0, height1), min(height2, height3));</command>
            <command>   float maxHeight = max(max(height0, height1), max(height2, height3));</command>
            <command>   return maxHeight - minHeight;</command>
            <command>}</command>
            <command>void __paintTerrainLocation(int terrainType = 0, int terrainSubType = 0, float posX = 0.0, float posZ = 0.0){</command>
            <command>   float lowX = 2.0 * xsFloatToInt(posX / 2.0);</command>
            <command>   float lowZ = 2.0 * xsFloatToInt(posZ / 2.0);</command>
            <command>   trPaintTerrain(terrainType, terrainSubType, lowX, lowZ, lowX + 2.0, lowZ + 2.0, false);</command>
            <command>}</command>
            <command>void __paintTerrainLocationArea(int terrainType = 0, int terrainSubType = 0, float posX = 0.0, float posY = 0.0, float posZ = 0.0){</command>
            <command>   float lowX = 2.0 * xsFloatToInt(posX / 2.0);</command>
            <command>   float lowZ = 2.0 * xsFloatToInt(posZ / 2.0);</command>
            <command>   trPaintTerrain(terrainType, terrainSubType, lowX, lowZ, lowX + 2.0, lowZ + 2.0, false);</command>
            <command>}</command>
            <command></command>
            <command>class __CameraParameters {</command>
            <command>   vector position = cOriginVector;</command>
            <command>   vector matrixX = cOriginVector;</command>
            <command>   vector matrixY = cOriginVector;</command>
            <command>   vector matrixZ = cOriginVector;</command>
            <command>};</command>
            <command>__CameraParameters __cameraParametersFromLookAt(vector lookAt = cOriginVector, float distance = 0.0, float heading = 0.0, float tilt = 0.0){</command>
            <command>   float cameraH = degToRad(heading);</command>
            <command>   float cameraT = degToRad(tilt);</command>
            <command>   float cameraSinH = sin(cameraH);</command>
            <command>   float cameraCosH = cos(cameraH);</command>
            <command>   float cameraSinT = sin(cameraT);</command>
            <command>   float cameraCosT = cos(cameraT);</command>
            <command>   float cameraPosX = 0.0+lookAt.x-cameraCosH*cameraCosT*distance;</command>
            <command>   float cameraPosY = cameraSinT*distance+lookAt.y;</command>
            <command>   float cameraPosZ = 0.0+lookAt.z-cameraSinH*cameraCosT*distance;</command>
            <command>   __CameraParameters cameraParameters;</command>
            <command>   cameraParameters.position = vector(cameraPosX, cameraPosY, cameraPosZ);</command>
            <command>   cameraParameters.matrixX = vector(cameraCosH*cameraCosT, 0.0-cameraSinT, cameraSinH*cameraCosT);</command>
            <command>   cameraParameters.matrixY = vector(cameraCosH*cameraSinT, cameraCosT, cameraSinH*cameraSinT);</command>
            <command>   cameraParameters.matrixZ = vector(cameraSinH, 0, 0.0-cameraCosH);</command>
            <command>   return cameraParameters;</command>
            <command>}</command>
            <command>class __CameraTrack {</command>
            <command>    int createIndex = 0;</command>
            <command>    int count = 0;</command>
            <command>    int[] timeArray = default;</command>
            <command>    __CameraParameters[] cameraParametersArray = default;</command>
            <command>    float[] fovArray = default;</command>
            <command>    float[] tensionArray = default;</command>
            <command>    float[] continuityArray = default;</command>
            <command>    float[] biasArray = default;</command>
            <command>    void addWaypoint(int time = 0, vector lookAt = cOriginVector, float distance = 0.0, float heading = 0.0, float tilt = 0.0, float fov = 0.0, float tension = 0.0, float continuity = 0.0, float bias = 0.0){</command>
            <command>        if(count &lt; timeArray.size()){</command>
            <command>            timeArray[count] = time;</command>
            <command>            cameraParametersArray[count] = __cameraParametersFromLookAt(lookAt, distance, heading, tilt);</command>
            <command>            fovArray[count] = fov;</command>
            <command>            tensionArray[count] = tension;</command>
            <command>            continuityArray[count] = continuity;</command>
            <command>            biasArray[count] = bias;</command>
            <command>        } else {</command>
            <command>            timeArray.add(time);</command>
            <command>            cameraParametersArray.add(__cameraParametersFromLookAt(lookAt, distance, heading, tilt));</command>
            <command>            fovArray.add(fov);</command>
            <command>            tensionArray.add(tension);</command>
            <command>            continuityArray.add(continuity);</command>
            <command>            biasArray.add(bias);</command>
            <command>        }</command>
            <command>        count++;</command>
            <command>    }</command>
            <command>    void create(vector dest = cOriginVector, float distance = 0.0, float heading = 0.0, float tilt = 0.0, float fov = 0.0, float tension = 0.0, float continuity = 0.0, float bias = 0.0){</command>
            <command>        count = 0;</command>
            <command>        addWaypoint(0, dest, distance, heading, tilt, fov, tension, continuity, bias);</command>
            <command>    }</command>
            <command>    void play(int eventId = -1, bool blendWithCamera = false, float blendTime = 0.0){</command>
            <command>        float duration = timeArray[count - 1];</command>
            <command>        int trackIndex = trCameraTrackCreate("__Track_"+createIndex, duration);</command>
            <command>        for(int i = 0; i &lt; count; i++){</command>
            <command>           __CameraParameters cameraParameters = cameraParametersArray[i];</command>
            <command>           int waypointIndex = trCameraTrackAddWaypoint(trackIndex, cameraParameters.position, cameraParameters.matrixX, cameraParameters.matrixY, cameraParameters.matrixZ, fovArray[i]);</command>
            <command>           trCameraTrackWaypointSetTime(trackIndex, waypointIndex, timeArray[i]);</command>
            <command>           trCameraTrackWaypointSetTension(trackIndex, waypointIndex, tensionArray[i]);</command>
            <command>           trCameraTrackWaypointSetContinuity(trackIndex, waypointIndex, continuityArray[i]);</command>
            <command>           trCameraTrackWaypointSetBias(trackIndex, waypointIndex, biasArray[i]);</command>
            <command>        }</command>
            <command>        trCameraTrackLoad("__Track_"+createIndex);</command>
            <command>        trCameraTrackPlay(-1, eventId, blendWithCamera, blendTime);</command>
            <command>        createIndex++;</command>
            <command>    }</command>
            <command>};</command>
            <command></command>
            <command>int[] __drawXIndices(int bagSize = 1, int drawCount = 1){</command>
            <command>   int[] bag = new int(bagSize, -1);</command>
            <command>   for(int i = 0; i &lt; bagSize; i++){</command>
            <command>       bag[i] = i;</command>
            <command>   }</command>
            <command>   int[] choices = new int(drawCount, -1);</command>
            <command>   int currentBagSize = bagSize;</command>
            <command>   for(int i = 0; i &lt; drawCount; i++){</command>
            <command>       int choiceIndex = xsRandInt(0, currentBagSize - 1);</command>
            <command>       choices[i] = bag[choiceIndex];</command>
            <command>       currentBagSize--;</command>
            <command>       bag[choiceIndex] = bag[currentBagSize];</command>
            <command>   }</command>
            <command>   return choices;</command>
            <command>}</command>
            <command></command>
            <command>__CameraTrack __cameraTrack;</command>
            <command></command>
            <command>void ntlStorageSetBool(string name = "", bool value = false){</command>
            <command>   __storageWithBool.put(name, value);</command>
            <command>}</command>
            <command>bool ntlStorageGetBool(string name = "", bool defaultValue = false){</command>
            <command>   return __storageWithBool.get(name, defaultValue);</command>
            <command>}</command>
            <command>bool ntlStorageRemoveBool(string name = "", bool defaultValue = false){</command>
            <command>   return __storageWithBool.remove(name, defaultValue);</command>
            <command>}</command>
            <command>void ntlStoragePlayerSetBool(string name = "", int p = 0, bool value = false){</command>
            <command>   __storageWithBool.put("__"+p+"__"+name, value);</command>
            <command>}</command>
            <command>bool ntlStoragePlayerGetBool(string name = "", int p = 0, bool defaultValue = false){</command>
            <command>   return __storageWithBool.get("__"+p+"__"+name, defaultValue);</command>
            <command>}</command>
            <command>bool ntlStoragePlayerRemoveBool(string name = "", int p = 0, bool defaultValue = false){</command>
            <command>   return __storageWithBool.remove("__"+p+"__"+name, defaultValue);</command>
            <command>}</command>
            <command>void ntlStorageSetInt(string name = "", int value = 0){</command>
            <command>   __storageWithInt.put(name, value);</command>
            <command>}</command>
            <command>int ntlStorageGetInt(string name = "", int defaultValue = 0){</command>
            <command>   return __storageWithInt.get(name, defaultValue);</command>
            <command>}</command>
            <command>int ntlStorageRemoveInt(string name = "", int defaultValue = 0){</command>
            <command>   return __storageWithInt.remove(name, defaultValue);</command>
            <command>}</command>
            <command>void ntlStoragePlayerSetInt(string name = "", int p = 0, int value = 0){</command>
            <command>   __storageWithInt.put("__"+p+"__"+name, value);</command>
            <command>}</command>
            <command>int ntlStoragePlayerGetInt(string name = "", int p = 0, int defaultValue = 0){</command>
            <command>   return __storageWithInt.get("__"+p+"__"+name, defaultValue);</command>
            <command>}</command>
            <command>int ntlStoragePlayerRemoveInt(string name = "", int p = 0, int defaultValue = 0){</command>
            <command>   return __storageWithInt.remove("__"+p+"__"+name, defaultValue);</command>
            <command>}</command>
            <command>void ntlStorageSetFloat(string name = "", float value = 0.0){</command>
            <command>   __storageWithFloat.put(name, value);</command>
            <command>}</command>
            <command>float ntlStorageGetFloat(string name = "", float defaultValue = 0.0){</command>
            <command>   return __storageWithFloat.get(name, defaultValue);</command>
            <command>}</command>
            <command>float ntlStorageRemoveFloat(string name = "", float defaultValue = 0.0){</command>
            <command>   return __storageWithFloat.remove(name, defaultValue);</command>
            <command>}</command>
            <command>void ntlStoragePlayerSetFloat(string name = "", int p = 0, float value = 0.0){</command>
            <command>   __storageWithFloat.put("__"+p+"__"+name, value);</command>
            <command>}</command>
            <command>float ntlStoragePlayerGetFloat(string name = "", int p = 0, float defaultValue = 0.0){</command>
            <command>   return __storageWithFloat.get("__"+p+"__"+name, defaultValue);</command>
            <command>}</command>
            <command>float ntlStoragePlayerRemoveFloat(string name = "", int p = 0, float defaultValue = 0.0){</command>
            <command>   return __storageWithFloat.remove("__"+p+"__"+name, defaultValue);</command>
            <command>}</command>
            <command>void ntlStorageSetString(string name = "", string value = ""){</command>
            <command>   __storageWithString.put(name, value);</command>
            <command>}</command>
            <command>string ntlStorageGetString(string name = "", string defaultValue = ""){</command>
            <command>   return __storageWithString.get(name, defaultValue);</command>
            <command>}</command>
            <command>string ntlStorageRemoveString(string name = "", string defaultValue = ""){</command>
            <command>   return __storageWithString.remove(name, defaultValue);</command>
            <command>}</command>
            <command>void ntlStoragePlayerSetString(string name = "", int p = 0, string value = ""){</command>
            <command>   __storageWithString.put("__"+p+"__"+name, value);</command>
            <command>}</command>
            <command>string ntlStoragePlayerGetString(string name = "", int p = 0, string defaultValue = ""){</command>
            <command>   return __storageWithString.get("__"+p+"__"+name, defaultValue);</command>
            <command>}</command>
            <command>string ntlStoragePlayerRemoveString(string name = "", int p = 0, string defaultValue = ""){</command>
            <command>   return __storageWithString.remove("__"+p+"__"+name, defaultValue);</command>
            <command>}</command>
            <command>void ntlStorageSetVector(string name = "", vector value = cOriginVector){</command>
            <command>   __storageWithVector.put(name, value);</command>
            <command>}</command>
            <command>vector ntlStorageGetVector(string name = "", vector defaultValue = cOriginVector){</command>
            <command>   return __storageWithVector.get(name, defaultValue);</command>
            <command>}</command>
            <command>vector ntlStorageRemoveVector(string name = "", vector defaultValue = cOriginVector){</command>
            <command>   return __storageWithVector.remove(name, defaultValue);</command>
            <command>}</command>
            <command>void ntlStoragePlayerSetVector(string name = "", int p = 0, vector value = cOriginVector){</command>
            <command>   __storageWithVector.put("__"+p+"__"+name, value);</command>
            <command>}</command>
            <command>vector ntlStoragePlayerGetVector(string name = "", int p = 0, vector defaultValue = cOriginVector){</command>
            <command>   return __storageWithVector.get("__"+p+"__"+name, defaultValue);</command>
            <command>}</command>
            <command>vector ntlStoragePlayerRemoveVector(string name = "", int p = 0, vector defaultValue = cOriginVector){</command>
            <command>   return __storageWithVector.remove("__"+p+"__"+name, defaultValue);</command>
            <command>}</command>
            <command></command>
            <command>rule __Trigger__Loader__Nottud__Process</command>
            <command>highFrequency</command>
            <command>active</command>
            <command>runImmediately</command>
            <command>{</command>
            <command>    __scheduler.process();</command>
            <command>    __schedulerParameters.process();</command>
            <command>    __unitScheduler.process();</command>
            <command>    __unitSchedulerParameters.process();</command>
            <command>    __forEachPlayerTrigger.process();</command>
            <command>    __unitCreatedHandler.process();</command>
            <command>    __attach.process();</command>
            <command>    __attachParameters.process();</command>
            <command>    __physics.process();</command>
            <command>    __physicsParameters.process();</command>
        </effect>
        <effect name="Global: Start {">
            <command>}</command>
        </effect>
        <effect name="Global: End }">
            <command>rule __Globals__End</command>
            <command>inactive</command>
            <command>{</command>
        </effect>
        <effect name="Variable: Declare Bool">
            <param name="Name" dispname="Name" vartype="stringid">boolVariable</param>
            <param name="Value" dispname="Value" vartype="stringid">false</param>
            <command>bool %Name% = %Value%;</command>
        </effect>
        <effect name="Variable: Declare Int">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <param name="Value" dispname="Value" vartype="stringid">0</param>
            <command>int %Name% = %Value%;</command>
        </effect>
        <effect name="Variable: Declare Float">
            <param name="Name" dispname="Name" vartype="stringid">floatVariable</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <command>float %Name% = %Value%;</command>
        </effect>
        <effect name="Variable: Declare String">
            <param name="Name" dispname="Name" vartype="stringid">stringVariable</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <command>string %Name% = %Value%;</command>
        </effect>
        <effect name="Variable: Declare Vector">
            <param name="Name" dispname="Name" vartype="stringid">vectorVariable</param>
            <param name="Value" dispname="Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <command>vector %Name% = %Value%;</command>
        </effect>
        <effect name="Variable: Set Bool">
            <param name="Name" dispname="Name" vartype="stringid">boolVariable</param>
            <param name="Value" dispname="Value" vartype="stringid">false</param>
            <command>/**/%Name% = %Value%;</command>
        </effect>
        <effect name="Variable: Set Int">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <param name="Value" dispname="Value" vartype="stringid">0</param>
            <command>/**/%Name% = %Value%;</command>
        </effect>
        <effect name="Variable: Set Float">
            <param name="Name" dispname="Name" vartype="stringid">floatVariable</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <command>/**/%Name% = %Value%;</command>
        </effect>
        <effect name="Variable: Set String">
            <param name="Name" dispname="Name" vartype="stringid">stringVariable</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <command>/**/%Name% = %Value%;</command>
        </effect>
        <effect name="Variable: Set Vector">
            <param name="Name" dispname="Name" vartype="stringid">vectorVariable</param>
            <param name="Value" dispname="Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <command>/**/%Name% = %Value%;</command>
        </effect>
        <effect name="Variable: Set">
            <param name="From" dispname="From" vartype="stringid">fromVariable</param>
            <param name="To" dispname="To" vartype="stringid">toVariable</param>
            <command>/**/%From% = %To%;</command>
        </effect>
        <effect name="Variable: Declare Int From Current Player">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <command>int %Name% = trCurrentPlayer();</command>
        </effect>
        <effect name="Variable: Set Int From Current Player">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <command>/**/%Name% = trCurrentPlayer();</command>
        </effect>
        <effect name="Variable: Declare Int From Unit ID">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <command>int %Name% = %SrcObject%;</command>
        </effect>
        <effect name="Variable: Set Int From Unit ID">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <command>/**/%Name% = %SrcObject%;</command>
        </effect>
        <effect name="Variable: Declare Vector From Unit Position">
            <param name="Name" dispname="Name" vartype="stringid">vectorVariable</param>
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <command>vector %Name% = trUnitGetPosition(%SrcObject%);</command>
        </effect>
        <effect name="Variable: Set Vector From Unit Position">
            <param name="Name" dispname="Name" vartype="stringid">vectorVariable</param>
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <command>/**/%Name% = trUnitGetPosition(%SrcObject%);</command>
        </effect>
        <effect name="Variable: Declare Int From Unit Heading">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <command>int %Name% = trUnitGetHeading(%SrcObject%);</command>
        </effect>
        <effect name="Variable: Set Int From Unit Heading">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <command>/**/%Name% = trUnitGetHeading(%SrcObject%);</command>
        </effect>
        <effect name="Variable: Declare Vector From Unit Heading">
            <param name="Name" dispname="Name" vartype="stringid">vectorVariable</param>
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <command>vector %Name% = vector(-sin(degToRad(trUnitGetHeading(%SrcObject%))), 0.0, -cos(degToRad(trUnitGetHeading(%SrcObject%))));</command>
        </effect>
        <effect name="Variable: Set Vector From Unit Heading">
            <param name="Name" dispname="Name" vartype="stringid">vectorVariable</param>
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <command>/**/%Name% = vector(-sin(degToRad(trUnitGetHeading(%SrcObject%))), 0.0, -cos(degToRad(trUnitGetHeading(%SrcObject%))));</command>
        </effect>
        <effect name="Variable: Declare Int From Unit Owner">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <command>xsSetContextPlayer(-1);</command>
            <command>int %Name% = kbUnitGetPlayerID(%SrcObject%);</command>
        </effect>
        <effect name="Variable: Set Int From Unit Owner">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <command>xsSetContextPlayer(-1);</command>
            <command>/**/%Name% = kbUnitGetPlayerID(%SrcObject%);</command>
        </effect>
        <effect name="Variable: Declare String From Unit Protounit">
            <param name="Name" dispname="Name" vartype="stringid">stringVariable</param>
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <command>xsSetContextPlayer(-1);</command>
            <command>string %Name% = kbUnitTypeGetName(kbUnitGetProtoUnitID(%SrcObject%));</command>
        </effect>
        <effect name="Variable: Set String From Unit Protounit">
            <param name="Name" dispname="Name" vartype="stringid">stringVariable</param>
            <param name="SrcObject" dispname="Source Unit" vartype="unit">-1</param>
            <command>xsSetContextPlayer(-1);</command>
            <command>/**/%Name% = kbUnitTypeGetName(kbUnitGetProtoUnitID(%SrcObject%));</command>
        </effect>
        <effect name="Variable: Declare Random Bool">
            <param name="Name" dispname="Name" vartype="stringid">boolVariable</param>
            <param name="Chance" dispname="Chance Of True" vartype="stringid">0.5</param>
            <command>bool %Name% = xsRandBool(%Chance%);</command>
        </effect>
        <effect name="Variable: Set Random Bool">
            <param name="Name" dispname="Name" vartype="stringid">boolVariable</param>
            <param name="Chance" dispname="Chance Of True" vartype="stringid">0.5</param>
            <command>/**/%Name% = xsRandBool(%Chance%);</command>
        </effect>
        <effect name="Variable: Declare Random Int">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <param name="LowestValue" dispname="Lowest Value" vartype="stringid">1</param>
            <param name="HighValue" dispname="Highest Value" vartype="stringid">10</param>
            <command>int %Name% = xsRandInt(%LowestValue%, %HighValue%);</command>
        </effect>
        <effect name="Variable: Set Random Int">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <param name="LowestValue" dispname="Lowest Value" vartype="stringid">1</param>
            <param name="HighValue" dispname="Highest Value" vartype="stringid">10</param>
            <command>/**/%Name% = xsRandInt(%LowestValue%, %HighValue%);</command>
        </effect>
        <effect name="Variable: Declare Random Float">
            <param name="Name" dispname="Name" vartype="stringid">floatVariable</param>
            <param name="LowestValue" dispname="Lowest Value" vartype="stringid">0.0</param>
            <param name="HighValue" dispname="Highest Value" vartype="stringid">1.0</param>
            <command>float %Name% = xsRandFloat(%LowestValue%, %HighValue%);</command>
        </effect>
        <effect name="Variable: Set Random Float">
            <param name="Name" dispname="Name" vartype="stringid">floatVariable</param>
            <param name="LowestValue" dispname="Lowest Value" vartype="stringid">0.0</param>
            <param name="HighValue" dispname="Highest Value" vartype="stringid">1.0</param>
            <command>/**/%Name% = xsRandFloat(%LowestValue%, %HighValue%);</command>
        </effect>
        <effect name="Variable: Declare Random Vector Area">
            <param name="Name" dispname="Name" vartype="stringid">vectorVariable</param>
            <param name="Center" dispname="" vartype="area" dispradius="">0, 0, 0</param>
            <param name="Radius" dispname="Radius" vartype="stringid" dispradius="">0</param>
            <command>vector %Name% = vector(%Center%);</command>
            <command>{</command>
            <command>   float __randomCirclePosX = 0.0;</command>
            <command>   float __randomCirclePosZ = 0.0;</command>
            <command>   float __randomCircleRadiusCheck = %Radius% * %Radius% + %Radius%;</command>
            <command>   while(true){</command>
            <command>       __randomCirclePosX = xsRandFloat(0.0-%Radius%, %Radius%);</command>
            <command>       __randomCirclePosZ = xsRandFloat(0.0-%Radius%, %Radius%);</command>
            <command>       if(__randomCirclePosX*__randomCirclePosX + __randomCirclePosZ*__randomCirclePosZ &lt;= __randomCircleRadiusCheck){</command>
            <command>           break;</command>
            <command>       }</command>
            <command>   }</command>
            <command>   /**/%Name%.x = %Name%.x + __randomCirclePosX;</command>
            <command>   /**/%Name%.z = %Name%.z + __randomCirclePosZ;</command>
            <command>}</command>
        </effect>
        <effect name="Variable: Set Random Vector Area">
            <param name="Name" dispname="Name" vartype="stringid">vectorVariable</param>
            <param name="Center" dispname="" vartype="area" dispradius="">0, 0, 0</param>
            <param name="Radius" dispname="Radius" vartype="stringid" dispradius="">0</param>
            <command>/**/%Name% = vector(%Center%);</command>
            <command>{</command>
            <command>   float __randomCirclePosX = 0.0;</command>
            <command>   float __randomCirclePosZ = 0.0;</command>
            <command>   float __randomCircleRadiusCheck = %Radius% * %Radius% + %Radius%;</command>
            <command>   while(true){</command>
            <command>       __randomCirclePosX = xsRandFloat(0.0-%Radius%, %Radius%);</command>
            <command>       __randomCirclePosZ = xsRandFloat(0.0-%Radius%, %Radius%);</command>
            <command>       if(__randomCirclePosX*__randomCirclePosX + __randomCirclePosZ*__randomCirclePosZ &lt;= __randomCircleRadiusCheck){</command>
            <command>           break;</command>
            <command>       }</command>
            <command>   }</command>
            <command>   /**/%Name%.x = %Name%.x + __randomCirclePosX;</command>
            <command>   /**/%Name%.z = %Name%.z + __randomCirclePosZ;</command>
            <command>}</command>
        </effect>
        <effect name="Variable: Declare Vector Converted From Heading">
            <param name="Name" dispname="Name" vartype="stringid">vectorVariable</param>
            <param name="Heading" dispname="Heading" vartype="stringid">0</param>
            <command>vector %Name% = vector(-sin(degToRad(%Heading%)), 0.0, -cos(degToRad(%Heading%)));</command>
        </effect>
        <effect name="Variable: Set Vector Converted From Heading">
            <param name="Name" dispname="Name" vartype="stringid">vectorVariable</param>
            <param name="Heading" dispname="Heading" vartype="stringid">0</param>
            <command>/**/%Name% = vector(-sin(degToRad(%Heading%)), 0.0, -cos(degToRad(%Heading%)));</command>
        </effect>
        <effect name="Variable: Declare Int Converted From Direction">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <param name="Direction" dispname="Direction" vartype="stringid">vector(1.0, 0.0, 0.0)</param>
            <command>int %Name% = 0;</command>
            <command>{</command>
            <command>   vector __variableIntFromDirectionVector = %Direction%;</command>
            <command>   /**/%Name% = radToDeg(atan2(__variableIntFromDirectionVector.x, __variableIntFromDirectionVector.z)) + 180;</command>
            <command>}</command>
        </effect>
        <effect name="Variable: Set Int Converted From Direction">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <param name="Direction" dispname="Direction" vartype="stringid">vector(1.0, 0.0, 0.0)</param>
            <command>{</command>
            <command>   vector __variableIntFromDirectionVector = %Direction%;</command>
            <command>   /**/%Name% = radToDeg(atan2(__variableIntFromDirectionVector.x, __variableIntFromDirectionVector.z)) + 180;</command>
            <command>}</command>
        </effect>
        <effect name="Variable: Declare Int From Time">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <command>int %Name% = xsGetTime();</command>
        </effect>
        <effect name="Variable: Set Int From Time">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <command>/**/%Name% = xsGetTime();</command>
        </effect>
        <effect name="Variable: Declare Int From Time MS">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <command>int %Name% = xsGetTimeMS();</command>
        </effect>
        <effect name="Variable: Set Int From Time MS">
            <param name="Name" dispname="Name" vartype="stringid">intVariable</param>
            <command>/**/%Name% = xsGetTimeMS();</command>
        </effect>
        <effect name="Parameters NTL: Create">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <command>__Parameters %Name%;</command>
        </effect>
        <effect name="Parameters NTL: Create With Bool">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value" dispname="Value" vartype="stringid">false</param>
            <command>__Parameters %Name%;</command>
            <command>/**/%Name%.bools.add(%Value%);</command>
        </effect>
        <effect name="Parameters NTL: Create With Int">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value" dispname="Value" vartype="stringid">0</param>
            <command>__Parameters %Name%;</command>
            <command>/**/%Name%.ints.add(%Value%);</command>
        </effect>
        <effect name="Parameters NTL: Create With Float">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <command>__Parameters %Name%;</command>
            <command>/**/%Name%.floats.add(%Value%);</command>
        </effect>
        <effect name="Parameters NTL: Create With String">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <command>__Parameters %Name%;</command>
            <command>/**/%Name%.strings.add(%Value%);</command>
        </effect>
        <effect name="Parameters NTL: Create With Vector">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value" dispname="Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <command>__Parameters %Name%;</command>
            <command>/**/%Name%.vectors.add(%Value%);</command>
        </effect>
        <effect name="Parameters NTL: Create With Nonempty Ints">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value0" dispname="0" vartype="stringid"></param>
            <param name="Value1" dispname="1" vartype="stringid"></param>
            <param name="Value2" dispname="2" vartype="stringid"></param>
            <param name="Value3" dispname="3" vartype="stringid"></param>
            <param name="Value4" dispname="4" vartype="stringid"></param>
            <param name="Value5" dispname="5" vartype="stringid"></param>
            <param name="Value6" dispname="6" vartype="stringid"></param>
            <param name="Value7" dispname="7" vartype="stringid"></param>
            <param name="Value8" dispname="8" vartype="stringid"></param>
            <command>__Parameters %Name%;</command>
            <command>if("%Value0%" != "")%Name%.ints.add(%Value0%-0);</command>
            <command>if("%Value1%" != "")%Name%.ints.add(%Value1%-0);</command>
            <command>if("%Value2%" != "")%Name%.ints.add(%Value2%-0);</command>
            <command>if("%Value3%" != "")%Name%.ints.add(%Value3%-0);</command>
            <command>if("%Value4%" != "")%Name%.ints.add(%Value4%-0);</command>
            <command>if("%Value5%" != "")%Name%.ints.add(%Value5%-0);</command>
            <command>if("%Value6%" != "")%Name%.ints.add(%Value6%-0);</command>
            <command>if("%Value7%" != "")%Name%.ints.add(%Value7%-0);</command>
            <command>if("%Value8%" != "")%Name%.ints.add(%Value8%-0);</command>
        </effect>
        <effect name="Parameters NTL: Create With Nonempty Floats">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value0" dispname="0" vartype="stringid"></param>
            <param name="Value1" dispname="1" vartype="stringid"></param>
            <param name="Value2" dispname="2" vartype="stringid"></param>
            <param name="Value3" dispname="3" vartype="stringid"></param>
            <param name="Value4" dispname="4" vartype="stringid"></param>
            <param name="Value5" dispname="5" vartype="stringid"></param>
            <param name="Value6" dispname="6" vartype="stringid"></param>
            <param name="Value7" dispname="7" vartype="stringid"></param>
            <param name="Value8" dispname="8" vartype="stringid"></param>
            <command>__Parameters %Name%;</command>
            <command>if("%Value0%" != "")%Name%.floats.add(%Value0%-0.0);</command>
            <command>if("%Value1%" != "")%Name%.floats.add(%Value1%-0.0);</command>
            <command>if("%Value2%" != "")%Name%.floats.add(%Value2%-0.0);</command>
            <command>if("%Value3%" != "")%Name%.floats.add(%Value3%-0.0);</command>
            <command>if("%Value4%" != "")%Name%.floats.add(%Value4%-0.0);</command>
            <command>if("%Value5%" != "")%Name%.floats.add(%Value5%-0.0);</command>
            <command>if("%Value6%" != "")%Name%.floats.add(%Value6%-0.0);</command>
            <command>if("%Value7%" != "")%Name%.floats.add(%Value7%-0.0);</command>
            <command>if("%Value8%" != "")%Name%.floats.add(%Value8%-0.0);</command>
        </effect>
        <effect name="Parameters NTL: Create With Nonempty Strings">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value0" dispname="0" vartype="stringid">""</param>
            <param name="Value1" dispname="1" vartype="stringid">""</param>
            <param name="Value2" dispname="2" vartype="stringid">""</param>
            <param name="Value3" dispname="3" vartype="stringid">""</param>
            <param name="Value4" dispname="4" vartype="stringid">""</param>
            <param name="Value5" dispname="5" vartype="stringid">""</param>
            <param name="Value6" dispname="6" vartype="stringid">""</param>
            <param name="Value7" dispname="7" vartype="stringid">""</param>
            <param name="Value8" dispname="8" vartype="stringid">""</param>
            <command>__Parameters %Name%;</command>
            <command>if(%Value0% != "")%Name%.strings.add(%Value0%);</command>
            <command>if(%Value1% != "")%Name%.strings.add(%Value1%);</command>
            <command>if(%Value2% != "")%Name%.strings.add(%Value2%);</command>
            <command>if(%Value3% != "")%Name%.strings.add(%Value3%);</command>
            <command>if(%Value4% != "")%Name%.strings.add(%Value4%);</command>
            <command>if(%Value5% != "")%Name%.strings.add(%Value5%);</command>
            <command>if(%Value6% != "")%Name%.strings.add(%Value6%);</command>
            <command>if(%Value7% != "")%Name%.strings.add(%Value7%);</command>
            <command>if(%Value8% != "")%Name%.strings.add(%Value8%);</command>
        </effect>
        <effect name="Parameters NTL: Create With Nonempty Vectors">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value0" dispname="0" vartype="stringid"></param>
            <param name="Value1" dispname="1" vartype="stringid"></param>
            <param name="Value2" dispname="2" vartype="stringid"></param>
            <param name="Value3" dispname="3" vartype="stringid"></param>
            <param name="Value4" dispname="4" vartype="stringid"></param>
            <param name="Value5" dispname="5" vartype="stringid"></param>
            <param name="Value6" dispname="6" vartype="stringid"></param>
            <param name="Value7" dispname="7" vartype="stringid"></param>
            <param name="Value8" dispname="8" vartype="stringid"></param>
            <command>__Parameters %Name%;</command>
            <command>if("%Value0%" != "")%Name%.vectors.add(%Value0%-cOriginVector);</command>
            <command>if("%Value1%" != "")%Name%.vectors.add(%Value1%-cOriginVector);</command>
            <command>if("%Value2%" != "")%Name%.vectors.add(%Value2%-cOriginVector);</command>
            <command>if("%Value3%" != "")%Name%.vectors.add(%Value3%-cOriginVector);</command>
            <command>if("%Value4%" != "")%Name%.vectors.add(%Value4%-cOriginVector);</command>
            <command>if("%Value5%" != "")%Name%.vectors.add(%Value5%-cOriginVector);</command>
            <command>if("%Value6%" != "")%Name%.vectors.add(%Value6%-cOriginVector);</command>
            <command>if("%Value7%" != "")%Name%.vectors.add(%Value7%-cOriginVector);</command>
            <command>if("%Value8%" != "")%Name%.vectors.add(%Value8%-cOriginVector);</command>
        </effect>
        <effect name="Parameters NTL: Create Advanced">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="IntCount" dispname="Int Count" vartype="player" donotrelax="">0</param>
            <param name="Ints" dispname="Ints" vartype="stringid"></param>
            <param name="FloatCount" dispname="Float Count" vartype="player" donotrelax="">0</param>
            <param name="Floats" dispname="Floats" vartype="stringid"></param>
            <param name="StringCount" dispname="String Count" vartype="player" donotrelax="">0</param>
            <param name="Strings" dispname="Strings" vartype="stringid"></param>
            <param name="VectorCount" dispname="Vector Count" vartype="player" donotrelax="">0</param>
            <param name="Vectors" dispname="Vectors" vartype="stringid"></param>
            <command>__Parameters %Name%;</command>
            <command>/**/%Name%.addInt%IntCount%(%Ints%);</command>
            <command>/**/%Name%.addFloat%FloatCount%(%Floats%);</command>
            <command>/**/%Name%.addString%StringCount%(%Strings%);</command>
            <command>/**/%Name%.addVector%VectorCount%(%Vectors%);</command>
        </effect>
        <effect name="Parameters NTL: Add Bool">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value" dispname="Value" vartype="stringid">false</param>
            <command>/**/%Name%.bools.add(%Value%);</command>
        </effect>
        <effect name="Parameters NTL: Add Int">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value" dispname="Value" vartype="stringid">0</param>
            <command>/**/%Name%.ints.add(%Value%);</command>
        </effect>
        <effect name="Parameters NTL: Add Float">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <command>/**/%Name%.floats.add(%Value%);</command>
        </effect>
        <effect name="Parameters NTL: Add String">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <command>/**/%Name%.strings.add(%Value%);</command>
        </effect>
        <effect name="Parameters NTL: Add Vector">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value" dispname="Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <command>/**/%Name%.vectors.add(%Value%);</command>
        </effect>
        <effect name="Parameters NTL: Add Nonempty Ints">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value0" dispname="0" vartype="stringid"></param>
            <param name="Value1" dispname="1" vartype="stringid"></param>
            <param name="Value2" dispname="2" vartype="stringid"></param>
            <param name="Value3" dispname="3" vartype="stringid"></param>
            <param name="Value4" dispname="4" vartype="stringid"></param>
            <param name="Value5" dispname="5" vartype="stringid"></param>
            <param name="Value6" dispname="6" vartype="stringid"></param>
            <param name="Value7" dispname="7" vartype="stringid"></param>
            <param name="Value8" dispname="8" vartype="stringid"></param>
            <command>if("%Value0%" != "")%Name%.ints.add(%Value0%-0);</command>
            <command>if("%Value1%" != "")%Name%.ints.add(%Value1%-0);</command>
            <command>if("%Value2%" != "")%Name%.ints.add(%Value2%-0);</command>
            <command>if("%Value3%" != "")%Name%.ints.add(%Value3%-0);</command>
            <command>if("%Value4%" != "")%Name%.ints.add(%Value4%-0);</command>
            <command>if("%Value5%" != "")%Name%.ints.add(%Value5%-0);</command>
            <command>if("%Value6%" != "")%Name%.ints.add(%Value6%-0);</command>
            <command>if("%Value7%" != "")%Name%.ints.add(%Value7%-0);</command>
            <command>if("%Value8%" != "")%Name%.ints.add(%Value8%-0);</command>
        </effect>
        <effect name="Parameters NTL: Add Nonempty Floats">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value0" dispname="0" vartype="stringid"></param>
            <param name="Value1" dispname="1" vartype="stringid"></param>
            <param name="Value2" dispname="2" vartype="stringid"></param>
            <param name="Value3" dispname="3" vartype="stringid"></param>
            <param name="Value4" dispname="4" vartype="stringid"></param>
            <param name="Value5" dispname="5" vartype="stringid"></param>
            <param name="Value6" dispname="6" vartype="stringid"></param>
            <param name="Value7" dispname="7" vartype="stringid"></param>
            <param name="Value8" dispname="8" vartype="stringid"></param>
            <command>if("%Value0%" != "")%Name%.floats.add(%Value0%-0.0);</command>
            <command>if("%Value1%" != "")%Name%.floats.add(%Value1%-0.0);</command>
            <command>if("%Value2%" != "")%Name%.floats.add(%Value2%-0.0);</command>
            <command>if("%Value3%" != "")%Name%.floats.add(%Value3%-0.0);</command>
            <command>if("%Value4%" != "")%Name%.floats.add(%Value4%-0.0);</command>
            <command>if("%Value5%" != "")%Name%.floats.add(%Value5%-0.0);</command>
            <command>if("%Value6%" != "")%Name%.floats.add(%Value6%-0.0);</command>
            <command>if("%Value7%" != "")%Name%.floats.add(%Value7%-0.0);</command>
            <command>if("%Value8%" != "")%Name%.floats.add(%Value8%-0.0);</command>
        </effect>
        <effect name="Parameters NTL: Add Nonempty Strings">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value0" dispname="0" vartype="stringid">""</param>
            <param name="Value1" dispname="1" vartype="stringid">""</param>
            <param name="Value2" dispname="2" vartype="stringid">""</param>
            <param name="Value3" dispname="3" vartype="stringid">""</param>
            <param name="Value4" dispname="4" vartype="stringid">""</param>
            <param name="Value5" dispname="5" vartype="stringid">""</param>
            <param name="Value6" dispname="6" vartype="stringid">""</param>
            <param name="Value7" dispname="7" vartype="stringid">""</param>
            <param name="Value8" dispname="8" vartype="stringid">""</param>
            <command>if(%Value0% != "")%Name%.strings.add(%Value0%);</command>
            <command>if(%Value1% != "")%Name%.strings.add(%Value1%);</command>
            <command>if(%Value2% != "")%Name%.strings.add(%Value2%);</command>
            <command>if(%Value3% != "")%Name%.strings.add(%Value3%);</command>
            <command>if(%Value4% != "")%Name%.strings.add(%Value4%);</command>
            <command>if(%Value5% != "")%Name%.strings.add(%Value5%);</command>
            <command>if(%Value6% != "")%Name%.strings.add(%Value6%);</command>
            <command>if(%Value7% != "")%Name%.strings.add(%Value7%);</command>
            <command>if(%Value8% != "")%Name%.strings.add(%Value8%);</command>
        </effect>
        <effect name="Parameters NTL: Add Nonempty Vectors">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value0" dispname="0" vartype="stringid"></param>
            <param name="Value1" dispname="1" vartype="stringid"></param>
            <param name="Value2" dispname="2" vartype="stringid"></param>
            <param name="Value3" dispname="3" vartype="stringid"></param>
            <param name="Value4" dispname="4" vartype="stringid"></param>
            <param name="Value5" dispname="5" vartype="stringid"></param>
            <param name="Value6" dispname="6" vartype="stringid"></param>
            <param name="Value7" dispname="7" vartype="stringid"></param>
            <param name="Value8" dispname="8" vartype="stringid"></param>
            <command>if("%Value0%" != "")%Name%.vectors.add(%Value0%-cOriginVector);</command>
            <command>if("%Value1%" != "")%Name%.vectors.add(%Value1%-cOriginVector);</command>
            <command>if("%Value2%" != "")%Name%.vectors.add(%Value2%-cOriginVector);</command>
            <command>if("%Value3%" != "")%Name%.vectors.add(%Value3%-cOriginVector);</command>
            <command>if("%Value4%" != "")%Name%.vectors.add(%Value4%-cOriginVector);</command>
            <command>if("%Value5%" != "")%Name%.vectors.add(%Value5%-cOriginVector);</command>
            <command>if("%Value6%" != "")%Name%.vectors.add(%Value6%-cOriginVector);</command>
            <command>if("%Value7%" != "")%Name%.vectors.add(%Value7%-cOriginVector);</command>
            <command>if("%Value8%" != "")%Name%.vectors.add(%Value8%-cOriginVector);</command>
        </effect>
        <effect name="Parameters NTL: Add Advanced">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="IntCount" dispname="Int Count" vartype="player" donotrelax="">0</param>
            <param name="Ints" dispname="Ints" vartype="stringid"></param>
            <param name="FloatCount" dispname="Float Count" vartype="player" donotrelax="">0</param>
            <param name="Floats" dispname="Floats" vartype="stringid"></param>
            <param name="StringCount" dispname="String Count" vartype="player" donotrelax="">0</param>
            <param name="Strings" dispname="Strings" vartype="stringid"></param>
            <param name="VectorCount" dispname="Vector Count" vartype="player" donotrelax="">0</param>
            <param name="Vectors" dispname="Vectors" vartype="stringid"></param>
            <command>/**/%Name%.addInt%IntCount%(%Ints%);</command>
            <command>/**/%Name%.addFloat%FloatCount%(%Floats%);</command>
            <command>/**/%Name%.addString%StringCount%(%Strings%);</command>
            <command>/**/%Name%.addVector%VectorCount%(%Vectors%);</command>
        </effect>
        <effect name="Parameters NTL: Add Units As Ints">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="SrcObject" dispname="Source Units" vartype="unit">-1</param>
            <command>{</command>
            <command>   trUnitSelectClear();</command>
            <command loop="" loopparm="SrcObject">trUnitSelectByID(%SrcObject%);</command>
            <command>   int[] __parametersSelectionArray = __getSelectionArray();</command>
            <command>   for(int __parametersSelectionIndex = 0; __parametersSelectionIndex &lt; __parametersSelectionArray.size(); __parametersSelectionIndex++){</command>
            <command>      /**/%Name%.ints.add(__parametersSelectionArray[__parametersSelectionIndex]);</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="Parameters NTL: Get Bool Declared">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <param name="Variable" dispname="Variable" vartype="stringid">boolVariable</param>
            <command>bool %Variable% = %Name%.bools[%Index%];</command>
        </effect>
        <effect name="Parameters NTL: Get Bool Set">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <param name="Variable" dispname="Variable" vartype="stringid">boolVariable</param>
            <command>/**/%Variable% = %Name%.bools[%Index%];</command>
        </effect>
        <effect name="Parameters NTL: Get Int Declared">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <command>int %Variable% = %Name%.ints[%Index%];</command>
        </effect>
        <effect name="Parameters NTL: Get Int Set">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <command>/**/%Variable% = %Name%.ints[%Index%];</command>
        </effect>
        <effect name="Parameters NTL: Get Float Declared">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <param name="Variable" dispname="Variable" vartype="stringid">floatVariable</param>
            <command>float %Variable% = %Name%.floats[%Index%];</command>
        </effect>
        <effect name="Parameters NTL: Get Float Set">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <param name="Variable" dispname="Variable" vartype="stringid">floatVariable</param>
            <command>/**/%Variable% = %Name%.floats[%Index%];</command>
        </effect>
        <effect name="Parameters NTL: Get String Declared">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <param name="Variable" dispname="Variable" vartype="stringid">stringVariable</param>
            <command>string %Variable% = %Name%.strings[%Index%];</command>
        </effect>
        <effect name="Parameters NTL: Get String Set">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <param name="Variable" dispname="Variable" vartype="stringid">stringVariable</param>
            <command>/**/%Variable% = %Name%.strings[%Index%];</command>
        </effect>
        <effect name="Parameters NTL: Get Vector Declared">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <param name="Variable" dispname="Variable" vartype="stringid">vectorVariable</param>
            <command>vector %Variable% = %Name%.vectors[%Index%];</command>
        </effect>
        <effect name="Parameters NTL: Get Vector Set">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <param name="Variable" dispname="Variable" vartype="stringid">vectorVariable</param>
            <command>/**/%Variable% = %Name%.vectors[%Index%];</command>
        </effect>
        <effect name="Parameters NTL: Get Bool Count Declared">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <command>int %Variable% = %Name%.bools.size();</command>
        </effect>
        <effect name="Parameters NTL: Get Bool Count Set">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <command>/**/%Variable% = %Name%.bools.size();</command>
        </effect>
        <effect name="Parameters NTL: Get Int Count Declared">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <command>int %Variable% = %Name%.ints.size();</command>
        </effect>
        <effect name="Parameters NTL: Get Int Count Set">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <command>/**/%Variable% = %Name%.ints.size();</command>
        </effect>
        <effect name="Parameters NTL: Get Float Count Declared">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <command>int %Variable% = %Name%.floats.size();</command>
        </effect>
        <effect name="Parameters NTL: Get Float Count Set">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <command>/**/%Variable% = %Name%.floats.size();</command>
        </effect>
        <effect name="Parameters NTL: Get String Count Declared">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <command>int %Variable% = %Name%.strings.size();</command>
        </effect>
        <effect name="Parameters NTL: Get String Count Set">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <command>/**/%Variable% = %Name%.strings.size();</command>
        </effect>
        <effect name="Parameters NTL: Get Vector Count Declared">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <command>int %Variable% = %Name%.vectors.size();</command>
        </effect>
        <effect name="Parameters NTL: Get Vector Count Set">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <command>/**/%Variable% = %Name%.vectors.size();</command>
        </effect>
        <effect name="Parameters NTL: Get Bool Declared Multi">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <param name="Variable" dispname="Variable" vartype="stringid">boolVariable</param>
            <command>bool %Variable% = %Name%.bools[%Index%];</command>
        </effect>
        <effect name="Parameters NTL: Get Bool Set Multi">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <param name="Variable" dispname="Variable" vartype="stringid">boolVariable</param>
            <command>/**/%Variable% = %Name%.bools[%Index%];</command>
        </effect>
        <effect name="Parameters NTL: Clear">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <command>/**/%Name%.bools.clear();</command>
            <command>/**/%Name%.ints.clear();</command>
            <command>/**/%Name%.floats.clear();</command>
            <command>/**/%Name%.strings.clear();</command>
            <command>/**/%Name%.vectors.clear();</command>
        </effect>
        <effect name="Parameters NTL: Remove Bool By Index">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <command>/**/%Name%.bools.removeIndex(%Index%);</command>
        </effect>
        <effect name="Parameters NTL: Remove Int By Index">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <command>/**/%Name%.ints.removeIndex(%Index%);</command>
        </effect>
        <effect name="Parameters NTL: Remove Float By Index">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <command>/**/%Name%.floats.removeIndex(%Index%);</command>
        </effect>
        <effect name="Parameters NTL: Remove String By Index">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <command>/**/%Name%.strings.removeIndex(%Index%);</command>
        </effect>
        <effect name="Parameters NTL: Remove Vector By Index">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Index" dispname="Index" vartype="stringid">0</param>
            <command>/**/%Name%.vectors.removeIndex(%Index%);</command>
        </effect>
        <effect name="Parameters NTL: Remove Bool By Value">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value" dispname="Value" vartype="stringid">false</param>
            <command>/**/%Name%.bools.removeValue(%Value%);</command>
        </effect>
        <effect name="Parameters NTL: Remove Int By Value">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value" dispname="Value" vartype="stringid">0</param>
            <command>/**/%Name%.ints.removeValue(%Value%);</command>
        </effect>
        <effect name="Parameters NTL: Remove Float By Value">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <command>/**/%Name%.floats.removeValue(%Value%);</command>
        </effect>
        <effect name="Parameters NTL: Remove String By Value">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <command>/**/%Name%.strings.removeValue(%Value%);</command>
        </effect>
        <effect name="Parameters NTL: Remove Vector By Value">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <param name="Value" dispname="Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <command>/**/%Name%.vectors.removeValue(%Value%);</command>
        </effect>
        <effect name="Parameters NTL: Shuffle Bools">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <command>{</command>
            <command>   bool[] __dataArray = %Name%.bools;</command>
            <command>   int[] __newIndexOrder = __drawXIndices(__dataArray.size(), __dataArray.size());</command>
            <command>   bool[] __dataArrayCopy = new bool(__dataArray.size(), false);</command>
            <command>   for(int __arrayCopyIndex = 0; __arrayCopyIndex &lt; __dataArray.size(); __arrayCopyIndex++){</command>
            <command>       __dataArrayCopy[__arrayCopyIndex] = __dataArray[__arrayCopyIndex];</command>
            <command>   }</command>
            <command>   for(int __arrayCopyIndex = 0; __arrayCopyIndex &lt; __dataArray.size(); __arrayCopyIndex++){</command>
            <command>       int __newDataIndex = __newIndexOrder[__arrayCopyIndex];</command>
            <command>       __dataArray[__arrayCopyIndex] = __dataArrayCopy[__newDataIndex];</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="Parameters NTL: Shuffle Ints">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <command>{</command>
            <command>   int[] __dataArray = %Name%.ints;</command>
            <command>   int[] __newIndexOrder = __drawXIndices(__dataArray.size(), __dataArray.size());</command>
            <command>   int[] __dataArrayCopy = new int(__dataArray.size(), 0);</command>
            <command>   for(int __arrayCopyIndex = 0; __arrayCopyIndex &lt; __dataArray.size(); __arrayCopyIndex++){</command>
            <command>       __dataArrayCopy[__arrayCopyIndex] = __dataArray[__arrayCopyIndex];</command>
            <command>   }</command>
            <command>   for(int __arrayCopyIndex = 0; __arrayCopyIndex &lt; __dataArray.size(); __arrayCopyIndex++){</command>
            <command>       int __newDataIndex = __newIndexOrder[__arrayCopyIndex];</command>
            <command>       __dataArray[__arrayCopyIndex] = __dataArrayCopy[__newDataIndex];</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="Parameters NTL: Shuffle Floats">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <command>{</command>
            <command>   float[] __dataArray = %Name%.floats;</command>
            <command>   int[] __newIndexOrder = __drawXIndices(__dataArray.size(), __dataArray.size());</command>
            <command>   float[] __dataArrayCopy = new float(__dataArray.size(), 0.0);</command>
            <command>   for(int __arrayCopyIndex = 0; __arrayCopyIndex &lt; __dataArray.size(); __arrayCopyIndex++){</command>
            <command>       __dataArrayCopy[__arrayCopyIndex] = __dataArray[__arrayCopyIndex];</command>
            <command>   }</command>
            <command>   for(int __arrayCopyIndex = 0; __arrayCopyIndex &lt; __dataArray.size(); __arrayCopyIndex++){</command>
            <command>       int __newDataIndex = __newIndexOrder[__arrayCopyIndex];</command>
            <command>       __dataArray[__arrayCopyIndex] = __dataArrayCopy[__newDataIndex];</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="Parameters NTL: Shuffle Strings">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <command>{</command>
            <command>   string[] __dataArray = %Name%.strings;</command>
            <command>   int[] __newIndexOrder = __drawXIndices(__dataArray.size(), __dataArray.size());</command>
            <command>   string[] __dataArrayCopy = new string(__dataArray.size(), "");</command>
            <command>   for(int __arrayCopyIndex = 0; __arrayCopyIndex &lt; __dataArray.size(); __arrayCopyIndex++){</command>
            <command>       __dataArrayCopy[__arrayCopyIndex] = __dataArray[__arrayCopyIndex];</command>
            <command>   }</command>
            <command>   for(int __arrayCopyIndex = 0; __arrayCopyIndex &lt; __dataArray.size(); __arrayCopyIndex++){</command>
            <command>       int __newDataIndex = __newIndexOrder[__arrayCopyIndex];</command>
            <command>       __dataArray[__arrayCopyIndex] = __dataArrayCopy[__newDataIndex];</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="Parameters NTL: Shuffle Vectors">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <command>{</command>
            <command>   vector[] __dataArray = %Name%.vectors;</command>
            <command>   int[] __newIndexOrder = __drawXIndices(__dataArray.size(), __dataArray.size());</command>
            <command>   vector[] __dataArrayCopy = new vector(__dataArray.size(), cOriginVector);</command>
            <command>   for(int __arrayCopyIndex = 0; __arrayCopyIndex &lt; __dataArray.size(); __arrayCopyIndex++){</command>
            <command>       __dataArrayCopy[__arrayCopyIndex] = __dataArray[__arrayCopyIndex];</command>
            <command>   }</command>
            <command>   for(int __arrayCopyIndex = 0; __arrayCopyIndex &lt; __dataArray.size(); __arrayCopyIndex++){</command>
            <command>       int __newDataIndex = __newIndexOrder[__arrayCopyIndex];</command>
            <command>       __dataArray[__arrayCopyIndex] = __dataArrayCopy[__newDataIndex];</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="Scheduler NTL: Start -> {">
            <param name="DelayMS" dispname="Delay MS" vartype="stringid">1000</param>
            <param name="Repeat" dispname="Initial Repeat State" vartype="bool">false</param>
            <param name="IterationVariable" dispname="Iteration Variable" vartype="stringid">iteration</param>
            <param name="FirstImmediate" dispname="Fire Immediate" vartype="bool">false</param>
            <command>__scheduler.add(%DelayMS%, %FirstImmediate%, [](int %IterationVariable% = 1) -&gt; bool {</command>
            <command>   bool __schedulerShouldRepeat = %Repeat%;</command>
        </effect>
        <effect name="Scheduler NTL: Parameters Start -> {">
            <param name="DelayMS" dispname="Delay MS" vartype="stringid">1000</param>
            <param name="Repeat" dispname="Initial Repeat State" vartype="bool">false</param>
            <param name="IterationVariable" dispname="Iteration Variable" vartype="stringid">iteration</param>
            <param name="FirstImmediate" dispname="Fire Immediate" vartype="bool">false</param>
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <command>__schedulerParameters.add(%DelayMS%, %FirstImmediate%, %Parameters%, [](int %IterationVariable% = 1, ref __Parameters %Parameters%) -&gt; bool {</command>
            <command>   bool __schedulerShouldRepeat = %Repeat%;</command>
        </effect>
        <effect name="Scheduler NTL: End }">
            <command>   return __schedulerShouldRepeat;</command>
            <command>});</command>
        </effect>
        <effect name="Scheduler NTL: Set Repeat">
            <param name="Repeat" dispname="New Repeat State" vartype="bool">true</param>
            <command>__schedulerShouldRepeat = %Repeat%;</command>
        </effect>
        <effect name="Unit Scheduler NTL: Start -> {">
            <param name="SrcObject" dispname="Source Units" vartype="unit">-1</param>
            <param name="DelayMS" dispname="Delay MS" vartype="stringid">1000</param>
            <param name="Repeat" dispname="Initial Repeat State" vartype="bool">false</param>
            <param name="IterationVariable" dispname="Iteration Variable" vartype="stringid">iteration</param>
            <param name="FirstImmediate" dispname="Fire Immediate" vartype="bool">false</param>
            <param name="UnitVariable" dispname="Unit Variable" vartype="stringid">unitId</param>
            <command>{</command>
            <command>   trUnitSelectClear();</command>
            <command loop="" loopparm="SrcObject">trUnitSelectByID(%SrcObject%);</command>
            <command>   int[] __unitSchedulerSelectionArray = __getSelectionArray();</command>
            <command>   for(int __unitSchedulerSelectionIndex = 0; __unitSchedulerSelectionIndex &lt; __unitSchedulerSelectionArray.size(); __unitSchedulerSelectionIndex++){</command>
            <command>       __unitScheduler.add(__unitSchedulerSelectionArray[__unitSchedulerSelectionIndex], %DelayMS%, %FirstImmediate%, [](int %UnitVariable% = 0, int %IterationVariable% = 1) -&gt; bool {</command>
            <command>           bool __unitSchedulerShouldRepeat = %Repeat%;</command>
        </effect>
        <effect name="Unit Scheduler NTL: Parameters Start -> {">
            <param name="SrcObject" dispname="Source Units" vartype="unit">-1</param>
            <param name="DelayMS" dispname="Delay MS" vartype="stringid">1000</param>
            <param name="Repeat" dispname="Initial Repeat State" vartype="bool">false</param>
            <param name="IterationVariable" dispname="Iteration Variable" vartype="stringid">iteration</param>
            <param name="UnitVariable" dispname="Unit Variable" vartype="stringid">unitId</param>
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <command>{</command>
            <command>   trUnitSelectClear();</command>
            <command loop="" loopparm="SrcObject">trUnitSelectByID(%SrcObject%);</command>
            <command>   int[] __unitSchedulerSelectionArray = __getSelectionArray();</command>
            <command>   for(int __unitSchedulerSelectionIndex = 0; __unitSchedulerSelectionIndex &lt; __unitSchedulerSelectionArray.size(); __unitSchedulerSelectionIndex++){</command>
            <command>       __unitSchedulerParameters.add(__unitSchedulerSelectionArray[__unitSchedulerSelectionIndex], %DelayMS%, %FirstImmediate%, %Parameters%, [](int %UnitVariable% = 0, int %IterationVariable% = 1, ref __Parameters %Parameters%) -&gt; bool {</command>
            <command>           bool __unitSchedulerShouldRepeat = %Repeat%;</command>
        </effect>
        <effect name="Unit Scheduler NTL: End }">
            <command>           return __unitSchedulerShouldRepeat;</command>
            <command>       });</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="Unit Scheduler NTL: Set Repeat">
            <param name="Repeat" dispname="New Repeat State" vartype="bool">true</param>
            <command>__unitSchedulerShouldRepeat = %Repeat%;</command>
        </effect>
        <effect name="For Loop: Start {">
            <param name="Variable" dispname="Variable" vartype="stringid">i</param>
            <param name="Start" dispname="Start" vartype="stringid">0</param>
            <param name="End" dispname="End" vartype="stringid">10</param>
            <param name="Op" dispname="Comparison" vartype="operator">&lt;</param>
            <param name="Increment" dispname="Increment" vartype="stringid">1</param>
            <command>for(int %Variable% = %Start%; %Variable% %Op% %End%; %Variable% = %Variable% + %Increment%){</command>
        </effect>
        <effect name="For Loop: Start Player {">
            <param name="Variable" dispname="Variable" vartype="stringid">p</param>
            <param name="Start" dispname="Start" vartype="stringid">1</param>
            <param name="End" dispname="End" vartype="stringid">4</param>
            <param name="Op" dispname="Comparison" vartype="operator">&lt;=</param>
            <param name="Increment" dispname="Increment" vartype="stringid">1</param>
            <command>for(int %Variable% = %Start%; %Variable% %Op% %End%; %Variable% = %Variable% + %Increment%){</command>
        </effect>
        <effect name="For Loop: Start All Protounits {">
            <param name="Variable" dispname="Variable" vartype="stringid">protounit</param>
            <command>for(int __forLoopStartAllUnitsIndex%Variable% = 0; __forLoopStartAllUnitsIndex%Variable% &lt; cNumberProtoUnits; __forLoopStartAllUnitsIndex%Variable%++){</command>
            <command>    string %Variable% = kbProtoUnitGetName(__forLoopStartAllUnitsIndex%Variable%);</command>
        </effect>
        <effect name="For Loop: Start All Protounits IDs {">
            <param name="Variable" dispname="Variable" vartype="stringid">protounitId</param>
            <command>for(int %Variable% = 0; %Variable% &lt; cNumberProtoUnits; %Variable%++){</command>
        </effect>
        <effect name="For Loop: Start All Techs {">
            <param name="Variable" dispname="Variable" vartype="stringid">tech</param>
            <command>for(int __forLoopStartAllUnitsIndex%Variable% = 0; __forLoopStartAllUnitsIndex%Variable% &lt; cNumberTechs; __forLoopStartAllUnitsIndex%Variable%++){</command>
            <command>    string %Variable% = kbTechGetName(__forLoopStartAllUnitsIndex%Variable%);</command>
        </effect>
        <effect name="For Loop: Start All Techs IDs {">
            <param name="Variable" dispname="Variable" vartype="stringid">techId</param>
            <command>for(int %Variable% = 0; %Variable% &lt; cNumberTechs; %Variable%++){</command>
        </effect>
        <effect name="For Loop: Each Parameter Bool Start {">
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <param name="Variable" dispname="Variable" vartype="stringid">boolVariable</param>
            <command>for(int __forLoopEachParameter%Variable% = 0; __forLoopEachParameter%Variable% &lt; %Parameters%.bools.size(); __forLoopEachParameter%Variable%++){</command>
            <command>   bool %Variable% = %Parameters%.bools[__forLoopEachParameter%Variable%];</command>
        </effect>
        <effect name="For Loop: Each Parameter Int Start {">
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <command>for(int __forLoopEachParameter%Variable% = 0; __forLoopEachParameter%Variable% &lt; %Parameters%.ints.size(); __forLoopEachParameter%Variable%++){</command>
            <command>   int %Variable% = %Parameters%.ints[__forLoopEachParameter%Variable%];</command>
        </effect>
        <effect name="For Loop: Each Parameter Float Start {">
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <param name="Variable" dispname="Variable" vartype="stringid">floatVariable</param>
            <command>for(int __forLoopEachParameter%Variable% = 0; __forLoopEachParameter%Variable% &lt; %Parameters%.floats.size(); __forLoopEachParameter%Variable%++){</command>
            <command>   float %Variable% = %Parameters%.floats[__forLoopEachParameter%Variable%];</command>
        </effect>
        <effect name="For Loop: Each Parameter String Start {">
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <param name="Variable" dispname="Variable" vartype="stringid">stringVariable</param>
            <command>for(int __forLoopEachParameter%Variable% = 0; __forLoopEachParameter%Variable% &lt; %Parameters%.strings.size(); __forLoopEachParameter%Variable%++){</command>
            <command>   string %Variable% = %Parameters%.strings[__forLoopEachParameter%Variable%];</command>
        </effect>
        <effect name="For Loop: Each Parameter Vector Start {">
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <param name="Variable" dispname="Variable" vartype="stringid">vectorVariable</param>
            <command>for(int __forLoopEachParameter%Variable% = 0; __forLoopEachParameter%Variable% &lt; %Parameters%.vectors.size(); __forLoopEachParameter%Variable%++){</command>
            <command>   vector %Variable% = %Parameters%.vectors[__forLoopEachParameter%Variable%];</command>
        </effect>
        <effect name="For Loop: Start Until Break {">
            <param name="Variable" dispname="Variable" vartype="stringid">i</param>
            <param name="Start" dispname="Start" vartype="stringid">0</param>
            <param name="Increment" dispname="Increment" vartype="stringid">1</param>
            <command>for(int %Variable% = %Start%; true; %Variable% = %Variable% + %Increment%){</command>
        </effect>
        <effect name="For Loop: End }">
            <command>}</command>
        </effect>
        <effect name="For Loop: Break">
            <command>break;</command>
        </effect>
        <effect name="For Loop: Continue">
            <command>continue;</command>
        </effect>
        <effect name="Dynamic Trigger NTL: Disable Self">
            <command>__forEachPlayerTriggerState = 2;</command>
        </effect>
        <effect name="Dynamic Trigger NTL: For Each Player End }">
            <command>       if(__forEachPlayerTriggerState == 0){</command>
            <command>           return 1;</command>
            <command>       }</command>
            <command>       return __forEachPlayerTriggerState;</command>
            <command>    }</command>
            <command>    return 0;</command>
            <command>});</command>
        </effect>
        <effect name="Unit Created Handler NTL: Start -> {">
            <param name="UnitVariable" dispname="Unit Variable" vartype="stringid">unitId</param>
            <command>__unitCreatedHandler.addHandler([](int %UnitVariable% = -1) -&gt; void {</command>
        </effect>
        <effect name="Unit Created Handler NTL: Parameters Start -> {">
            <param name="UnitVariable" dispname="Unit Variable" vartype="stringid">unitId</param>
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <command>__unitCreatedHandler.addHandlerParameters(%Parameters%, [](int %UnitVariable% = -1, ref __Parameters %Parameters%) -&gt; void {</command>
        </effect>
        <effect name="Unit Created Handler NTL: End }">
            <command>});</command>
        </effect>
        <effect name="Unit Group NTL: Create">
            <param name="Name" dispname="Name" vartype="stringid">unitGroup</param>
            <command>__UnitGroup %Name%;</command>
        </effect>
        <effect name="Unit Group NTL: Process Start -> {">
            <param name="Name" dispname="Name" vartype="stringid">unitGroup</param>
            <param name="UnitVariable" dispname="Unit Variable" vartype="stringid">unitId</param>
            <command>/**/%Name%.process([](int %UnitVariable% = 0) -&gt; bool {</command>
            <command>    bool __unitGroupShouldRemove = false;</command>
        </effect>
        <effect name="Unit Group NTL: Process Start Parameters -> {">
            <param name="Name" dispname="Name" vartype="stringid">unitGroup</param>
            <param name="UnitVariable" dispname="Unit Variable" vartype="stringid">unitId</param>
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <command>/**/%Name%.processParameters(%Parameters%, [](int %UnitVariable% = 0, ref __Parameters %Parameters%) -&gt; bool {</command>
            <command>    bool __unitGroupShouldRemove = false;</command>
        </effect>
        <effect name="Unit Group NTL: Remove Current Unit">
            <command>__unitGroupShouldRemove = true;</command>
        </effect>
        <effect name="Unit Group NTL: Process End }">
            <command>    return __unitGroupShouldRemove;</command>
            <command>});</command>
        </effect>
        <effect name="Unit Group NTL: Add">
            <param name="Name" dispname="Name" vartype="stringid">unitGroup</param>
            <param name="SrcObject" dispname="Source Units" vartype="unit">-1</param>
            <command>{</command>
            <command>   trUnitSelectClear();</command>
            <command loop="" loopparm="SrcObject">trUnitSelectByID(%SrcObject%);</command>
            <command>   int[] __unitGroupSelectionArray = __getSelectionArray();</command>
            <command>   for(int __unitGroupSelectionIndex = 0; __unitGroupSelectionIndex &lt; __unitGroupSelectionArray.size(); __unitGroupSelectionIndex++){</command>
            <command>       /**/%Name%.add(__unitGroupSelectionArray[__unitGroupSelectionIndex]);</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="Unit Attach NTL: Basic">
            <param name="SrcObject" dispname="Source Units" vartype="unit">-1</param>
            <param name="DstObject" dispname="Target Unit" vartype="unit">-1</param>
            <param name="DetachDeath" dispname="Detach On Target Death" vartype="bool" donotrelax="">false</param>
            <param name="DestroyDetach" dispname="Destroy On Detach" vartype="bool" donotrelax="">false</param>
            <command>{</command>
            <command>   bool(int, int) __attachShouldStop = [](int fromUnitId = -1, int toUnitId = -1) -&gt; bool {</command>
            <command>      if(%DetachDeath%){</command>
            <command>          return trUnitDead();</command>
            <command>      }</command>
            <command>      return false;</command>
            <command>   };</command>
            <command>   void(int) __attachHandleStop = [](int unitId = -1) -&gt; void{</command>
            <command>      if(%DestroyDetach%){</command>
            <command>          trUnitDestroy();</command>
            <command>      }</command>
            <command>   };</command>
            <command>   trUnitSelectClear();</command>
            <command loop="" loopparm="SrcObject">trUnitSelectByID(%SrcObject%);</command>
            <command>   int[] __attachSelectionArray = __getSelectionArray();</command>
            <command>   for(int __attachSelectionIndex = 0; __attachSelectionIndex &lt; __attachSelectionArray.size(); __attachSelectionIndex++){</command>
            <command>       __attach.add(__attachSelectionArray[__attachSelectionIndex], %DstObject%, __attachShouldStop, __attachHandleStop);</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="Unit Attach NTL: Should Stop Start -> {">
            <param name="SrcObject" dispname="Source Units" vartype="unit">-1</param>
            <param name="DstObject" dispname="Target Unit" vartype="unit">-1</param>
            <param name="SourceUnitVariable" dispname="Source Unit Variable" vartype="stringid">sourceUnitId</param>
            <param name="TargetUnitVariable" dispname="Target Unit Variable" vartype="stringid">targetUnitId</param>
            <command>{</command>
            <command>   trUnitSelectClear();</command>
            <command loop="" loopparm="SrcObject">trUnitSelectByID(%SrcObject%);</command>
            <command>   int[] __attachSelectionArray = __getSelectionArray();</command>
            <command>   for(int __attachSelectionIndex = 0; __attachSelectionIndex &lt; __attachSelectionArray.size(); __attachSelectionIndex++){</command>
            <command>       __attach.add(__attachSelectionArray[__attachSelectionIndex], %DstObject%, [](int %SourceUnitVariable% = -1, int %TargetUnitVariable% = -1) -&gt; bool {</command>
            <command>           bool __attachShouldStop = false;</command>
        </effect>
        <effect name="Unit Attach NTL: Parameters Should Stop Start -> {">
            <param name="SrcObject" dispname="Source Units" vartype="unit">-1</param>
            <param name="DstObject" dispname="Target Unit" vartype="unit">-1</param>
            <param name="SourceUnitVariable" dispname="Source Unit Variable" vartype="stringid">sourceUnitId</param>
            <param name="TargetUnitVariable" dispname="Target Unit Variable" vartype="stringid">targetUnitId</param>
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <command>{</command>
            <command>   trUnitSelectClear();</command>
            <command loop="" loopparm="SrcObject">trUnitSelectByID(%SrcObject%);</command>
            <command>   int[] __attachSelectionArray = __getSelectionArray();</command>
            <command>   for(int __attachSelectionIndex = 0; __attachSelectionIndex &lt; __attachSelectionArray.size(); __attachSelectionIndex++){</command>
            <command>       __attachParameters.add(__attachSelectionArray[__attachSelectionIndex], %DstObject%, %Parameters%, [](int %SourceUnitVariable% = -1, int %TargetUnitVariable% = -1, ref __Parameters %Parameters%) -&gt; bool {</command>
            <command>           bool __attachShouldStop = false;</command>
        </effect>
        <effect name="Unit Attach NTL: Mark Stop">
            <command>       __attachShouldStop = true;</command>
        </effect>
        <effect name="Unit Attach NTL: Should Stop End } Handle Detach Start -> {">
            <param name="SourceUnitVariable" dispname="Source Unit Variable" vartype="stringid">sourceUnitId</param>
            <command>   return __attachShouldStop;</command>
            <command>}, [](int %SourceUnitVariable% = -1) -&gt; void {</command>
        </effect>
        <effect name="Unit Attach NTL: Parameters Should Stop End } Parameters Handle Detach Start -> {">
            <param name="SourceUnitVariable" dispname="Source Unit Variable" vartype="stringid">sourceUnitId</param>
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <command>   return __attachShouldStop;</command>
            <command>}, [](int %SourceUnitVariable% = -1, ref __Parameters %Parameters%) -&gt; void {</command>
        </effect>
        <effect name="Unit Attach NTL: Handle Detach End }">
            <command>      });</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="Unit: Create Forced">
            <param name="PlayerID" dispname="Player" vartype="player">1</param>
            <param name="ProtoName" dispname="ProtoName" vartype="protounit">Villager</param>
            <param name="Location" dispname="" vartype="area">0,0,0</param>
            <param name="Heading" dispname="Heading (0-359)" vartype="long">0</param>
            <command>trUnitCreateForced("%ProtoName%", %Location%, %Heading%, %PlayerID%);</command>
        </effect>
        <effect name="Unit: Create Forced To Declared Variable">
            <param name="PlayerID" dispname="Player" vartype="player">1</param>
            <param name="ProtoName" dispname="ProtoName" vartype="protounit">Villager</param>
            <param name="Location" dispname="" vartype="area">0,0,0</param>
            <param name="Heading" dispname="Heading (0-359)" vartype="long">0</param>
            <param name="UnitVariable" dispname="Unit Variable" vartype="stringid">unitId</param>
            <command>int %UnitVariable% = trUnitCreateForced("%ProtoName%", %Location%, %Heading%, %PlayerID%);</command>
        </effect>
        <effect name="Unit: Create Forced To Set Variable">
            <param name="PlayerID" dispname="Player" vartype="player">1</param>
            <param name="ProtoName" dispname="ProtoName" vartype="protounit">Villager</param>
            <param name="Location" dispname="" vartype="area">0,0,0</param>
            <param name="Heading" dispname="Heading (0-359)" vartype="long">0</param>
            <param name="UnitVariable" dispname="Unit Variable" vartype="stringid">unitId</param>
            <command>/**/%UnitVariable% = trUnitCreateForced("%ProtoName%", %Location%, %Heading%, %PlayerID%);</command>
        </effect>
        <effect name="Unit Physics NTL: Start -> {">
            <param name="SrcObject" dispname="Source Units" vartype="unit">-1</param>
            <param name="Fly" dispname="Fly" vartype="bool" donotrelax="">true</param>
            <param name="UsePosition" dispname="Use Existing Position " vartype="bool" donotrelax="">true</param>
            <param name="Position" dispname="Position" vartype="stringid">vector(0, 0, 0)</param>
            <param name="Velocity" dispname="Velocity" vartype="stringid">vector(0, 0, 0)</param>
            <param name="Acceleration" dispname="Acceleration" vartype="stringid">vector(0, 0, 0)</param>
            <command>{</command>
            <command>   trUnitSelectClear();</command>
            <command loop="" loopparm="SrcObject">trUnitSelectByID(%SrcObject%);</command>
            <command>   int[] __physicsSelectionArray = __getSelectionArray();</command>
            <command>   for(int __physicsSelectionIndex = 0; __physicsSelectionIndex &lt; __physicsSelectionArray.size(); __physicsSelectionIndex++){</command>
            <command>       vector __physicsInitialPosition = %Position%;</command>
            <command>       if(%UsePosition%){</command>
            <command>           __physicsInitialPosition = trUnitGetPosition(__physicsSelectionArray[__physicsSelectionIndex]);</command>
            <command>           if(%Fly% == false) {</command>
            <command>               __physicsInitialPosition.y = __physicsInitialPosition.y - __getTerrainHeightAccurate(__physicsInitialPosition);</command>
            <command>           }</command>
            <command>       }</command>
            <command>       __physics.add(__physicsSelectionArray[__physicsSelectionIndex], __physicsInitialPosition, %Velocity%, %Acceleration%, %Fly%,</command>
            <command>               [](ref __PhysicsState __physicsState) -&gt; bool{</command>
            <command>           bool __physicsShouldStop = false;</command>
        </effect>
        <effect name="Unit Physics NTL: Parameters Start -> {">
            <param name="SrcObject" dispname="Source Units" vartype="unit">-1</param>
            <param name="Fly" dispname="Fly" vartype="bool" donotrelax="">true</param>
            <param name="UsePosition" dispname="Use Existing Position " vartype="bool" donotrelax="">true</param>
            <param name="Position" dispname="Position" vartype="stringid">vector(0, 0, 0)</param>
            <param name="Velocity" dispname="Velocity" vartype="stringid">vector(0, 0, 0)</param>
            <param name="Acceleration" dispname="Acceleration" vartype="stringid">vector(0, 0, 0)</param>
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <command>{</command>
            <command>   trUnitSelectClear();</command>
            <command loop="" loopparm="SrcObject">trUnitSelectByID(%SrcObject%);</command>
            <command>   int[] __physicsSelectionArray = __getSelectionArray();</command>
            <command>   for(int __physicsSelectionIndex = 0; __physicsSelectionIndex &lt; __physicsSelectionArray.size(); __physicsSelectionIndex++){</command>
            <command>       vector __physicsInitialPosition = %Position%;</command>
            <command>       if(%UsePosition%){</command>
            <command>           __physicsInitialPosition = trUnitGetPosition(__physicsSelectionArray[__physicsSelectionIndex]);</command>
            <command>           if(%Fly% == false) {</command>
            <command>               __physicsInitialPosition.y = __physicsInitialPosition.y - __getTerrainHeightAccurate(__physicsInitialPosition);</command>
            <command>           }</command>
            <command>       }</command>
            <command>       __physicsParameters.add(__physicsSelectionArray[__physicsSelectionIndex], __physicsInitialPosition, %Velocity%, %Acceleration%, %Fly%, %Parameters%,</command>
            <command>               [](ref __PhysicsState __physicsState, ref __Parameters %Parameters%) -&gt; bool{</command>
            <command>           bool __physicsShouldStop = false;</command>
        </effect>
        <effect name="Unit Physics NTL: End }">
            <command>           return __physicsShouldStop;</command>
            <command>       });</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="Unit Physics NTL: Parameters End }">
            <command>           return __physicsShouldStop;</command>
            <command>       });</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="Unit Physics NTL: End } Handle Stop Start -> {">
            <param name="UnitVariable" dispname="Unit Variable" vartype="stringid">unitId</param>
            <command>           return __physicsShouldStop;</command>
            <command>       }, [](int %UnitVariable% = -1) -&gt; void {</command>
        </effect>
        <effect name="Unit Physics NTL: Parameters End } Parameters Handle Stop Start -> {">
            <param name="UnitVariable" dispname="Unit Variable" vartype="stringid">unitId</param>
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <command>           return __physicsShouldStop;</command>
            <command>       }, [](int %UnitVariable% = -1, ref __Parameters %Parameters%) -&gt; void {</command>
        </effect>
        <effect name="Unit Physics NTL: Handle Stop End }">
            <command>       });</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="Unit Physics NTL: Parameters Handle Stop End }">
            <command>       });</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="Unit Physics NTL: Mark Stop">
            <command>__physicsShouldStop = true;</command>
        </effect>
        <effect name="Unit Physics NTL: Get Unit To Declared">
            <param name="UnitVariable" dispname="Unit Variable" vartype="stringid">unitId</param>
            <command>int %UnitVariable% = __physicsState.unitId;</command>
        </effect>
        <effect name="Unit Physics NTL: Get Unit To Set">
            <param name="UnitVariable" dispname="Unit Variable" vartype="stringid">unitId</param>
            <command>/**/%UnitVariable% = __physicsState.unitId;</command>
        </effect>
        <effect name="Unit Physics NTL: Get Position To Declared">
            <param name="PositionVariable" dispname="Position Variable" vartype="stringid">positionVariable</param>
            <command>vector %PositionVariable% = __physicsState.position;</command>
        </effect>
        <effect name="Unit Physics NTL: Get Position To Set">
            <param name="PositionVariable" dispname="Position Variable" vartype="stringid">positionVariable</param>
            <command>/**/%PositionVariable% = __physicsState.position;</command>
        </effect>
        <effect name="Unit Physics NTL: Get Velocity To Declared">
            <param name="VelocityVariable" dispname="Velocity Variable" vartype="stringid">velocityVariable</param>
            <command>vector %VelocityVariable% = __physicsState.velocity;</command>
        </effect>
        <effect name="Unit Physics NTL: Get Velocity To Set">
            <param name="VelocityVariable" dispname="Velocity Variable" vartype="stringid">velocityVariable</param>
            <command>/**/%VelocityVariable% = __physicsState.velocity;</command>
        </effect>
        <effect name="Unit Physics NTL: Get Acceleration To Declared">
            <param name="AccelerationVariable" dispname="Acceleration Variable" vartype="stringid">accelerationVariable</param>
            <command>vector %AccelerationVariable% = __physicsState.acceleration;</command>
        </effect>
        <effect name="Unit Physics NTL: Get Acceleration To Set">
            <param name="AccelerationVariable" dispname="Acceleration Variable" vartype="stringid">accelerationVariable</param>
            <command>/**/%AccelerationVariable% = __physicsState.acceleration;</command>
        </effect>
        <effect name="Unit Physics NTL: Get Time MS To Declared">
            <param name="TimeVariable" dispname="Time Variable" vartype="stringid">timeVariable</param>
            <command>int %TimeVariable% = __physicsState.time;</command>
        </effect>
        <effect name="Unit Physics NTL: Get Time MS To Set">
            <param name="TimeVariable" dispname="Time Variable" vartype="stringid">timeVariable</param>
            <command>/**/%TimeVariable% = __physicsState.time;</command>
        </effect>
        <effect name="Unit Physics NTL: Get Delta Time MS To Declared">
            <param name="DeltaTimeVariable" dispname="Time Variable" vartype="stringid">delatTimeVariable</param>
            <command>int %DeltaTimeVariable% = __physicsState.time;</command>
        </effect>
        <effect name="Unit Physics NTL: Get Delta Time MS To Set">
            <param name="DeltaTimeVariable" dispname="Time Variable" vartype="stringid">deltaTimeVariable</param>
            <command>/**/%DeltaTimeVariable% = __physicsState.deltaTime;</command>
        </effect>
        <effect name="Unit Physics NTL: Override Position">
            <param name="Position" dispname="Position" vartype="stringid">vector(0, 0, 0)</param>
            <command>__physicsState.position = %Position%;</command>
        </effect>
        <effect name="Unit Physics NTL: Override Velocity">
            <param name="Velocity" dispname="Velocity" vartype="stringid">vector(0, 0, 0)</param>
            <command>__physicsState.velocity = %Velocity%;</command>
        </effect>
        <effect name="Unit Physics NTL: Override Acceleration">
            <param name="Acceleration" dispname="Acceleration" vartype="stringid">vector(0, 0, 0)</param>
            <command>__physicsState.acceleration = %Acceleration%;</command>
        </effect>
        <effect name="God Power: Grant to Player Reusing Slots">
            <param name="PlayerID" dispname="Player" vartype="player">1</param>
            <param name="PowerName" dispname="Power" vartype="godpower">default</param>
            <param name="Count" dispname="Uses" vartype="long">1</param>
            <command>for(int __grantGodPowerReusingSlotsIndex = 0; __grantGodPowerReusingSlotsIndex &lt; 4; __grantGodPowerReusingSlotsIndex++){</command>
            <command>    int __grantGodPowerReusingSlotsExistingPower = kbGodPowerGetIDInSlot(__grantGodPowerReusingSlotsIndex, %PlayerID%);</command>
            <command>    if(__grantGodPowerReusingSlotsIndex == 3 || __grantGodPowerReusingSlotsExistingPower &lt; 0 || kbGodPowerGetID("%PowerName%") == __grantGodPowerReusingSlotsExistingPower || kbGodPowerGetNumCharges(__grantGodPowerReusingSlotsExistingPower, %PlayerID%) &lt;= 0){</command>
            <command>        trGodPowerGrantAtSlot(%PlayerID%, "%PowerName%", %Count%, __grantGodPowerReusingSlotsIndex, 0, false, false);</command>
            <command>        break;</command>
            <command>    }</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Handler Start -> {">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <command>__eventHandlerStore.add("%Name%", [](ref __Parameters %Parameters%) -&gt; void {</command>
        </effect>
        <effect name="Events NTL: Handler With Return Start -> {">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>__eventHandlerStoreWithReturn.add("%Name%", [](ref __Parameters %Parameters%, ref __Parameters %ReturnParameters%) -&gt; void {</command>
        </effect>
        <effect name="Events NTL: Handler As Condition Start -> {">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Parameters" dispname="Parameters" vartype="stringid">parameters</param>
            <param name="DefaultValue" dispname="Default Return" vartype="bool">false</param>
            <command>__eventHandlerStoreWithReturn.add("%Name%", [](ref __Parameters %Parameters%, ref __Parameters __conditionalResultParameters) -&gt; void {</command>
            <command>   {</command>
            <command>       bool[] __conditionalExistingBools = __conditionalResultParameters.bools;</command>
            <command>       if(__conditionalExistingBools.size() &lt;= 0){</command>
            <command>           __conditionalExistingBools.add(%DefaultValue%);</command>
            <command>       } else {</command>
            <command>           __conditionalExistingBools[0] = %DefaultValue%;</command>
            <command>       }</command>
            <command>   }</command>
        </effect>
        <effect name="Events NTL: Handler As Condition Return">
            <param name="Value" dispname="Value" vartype="bool">true</param>
            <command>{</command>
            <command>    bool[] __conditionalExistingBools = __conditionalResultParameters.bools;</command>
            <command>    __conditionalExistingBools[0] = %Value%;</command>
            <command>    return;</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Handler End }">
            <command>});</command>
        </effect>
        <effect name="Events NTL: Fire Empty">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventHandlerStore.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Bool">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">false</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.bools.add(%Value%);</command>
            <command>   __eventHandlerStore.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Int">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">0</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.ints.add(%Value%);</command>
            <command>   __eventHandlerStore.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Float">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.floats.add(%Value%);</command>
            <command>   __eventHandlerStore.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire String">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.strings.add(%Value%);</command>
            <command>   __eventHandlerStore.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Vector">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.vectors.add(%Value%);</command>
            <command>   __eventHandlerStore.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Parameters">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">parameters</param>
            <command>__eventHandlerStore.fire("%Name%", %Value%);</command>
        </effect>
        <effect name="Events NTL: Fire Advanced">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="IntCount" dispname="Int Count" vartype="player" donotrelax="">0</param>
            <param name="Ints" dispname="Ints" vartype="stringid"></param>
            <param name="FloatCount" dispname="Float Count" vartype="player" donotrelax="">0</param>
            <param name="Floats" dispname="Floats" vartype="stringid"></param>
            <param name="StringCount" dispname="String Count" vartype="player" donotrelax="">0</param>
            <param name="Strings" dispname="Strings" vartype="stringid"></param>
            <param name="VectorCount" dispname="Vector Count" vartype="player" donotrelax="">0</param>
            <param name="Vectors" dispname="Vectors" vartype="stringid"></param>
            <command>__Parameters %Name%;</command>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.addInt%IntCount%(%Ints%);</command>
            <command>   __eventsFireParameters.addFloat%FloatCount%(%Floats%);</command>
            <command>   __eventsFireParameters.addString%StringCount%(%Strings%);</command>
            <command>   __eventsFireParameters.addVector%VectorCount%(%Vectors%);</command>
            <command>   __eventHandlerStore.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Empty Return Declare">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>__Parameters %ReturnParameters%;</command>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   %ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Empty Return Set">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   /**/%ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Bool Return Declare">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">false</param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>__Parameters %ReturnParameters%;</command>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.bools.add(%Value%);</command>
            <command>   /**/%ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Bool Return Set">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">false</param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.bools.add(%Value%);</command>
            <command>   /**/%ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Int Return Declare">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">0</param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>__Parameters %ReturnParameters%;</command>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.ints.add(%Value%);</command>
            <command>   /**/%ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Int Return Set">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">0</param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.ints.add(%Value%);</command>
            <command>   /**/%ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Float Return Declare">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>__Parameters %ReturnParameters%;</command>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.floats.add(%Value%);</command>
            <command>   /**/%ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Float Return Set">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.floats.add(%Value%);</command>
            <command>   /**/%ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire String Return Declare">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>__Parameters %ReturnParameters%;</command>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.strings.add(%Value%);</command>
            <command>   /**/%ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire String Return Set">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.strings.add(%Value%);</command>
            <command>   /**/%ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Vector Return Declare">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>__Parameters %ReturnParameters%;</command>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.vectors.add(%Value%);</command>
            <command>   /**/%ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Vector Return Set">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.vectors.add(%Value%);</command>
            <command>   /**/%ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Parameters Return Declare">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">parameters</param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>__Parameters %ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", %Value%);</command>
        </effect>
        <effect name="Events NTL: Fire Parameters Return Set">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="Value" dispname="Value" vartype="stringid">parameters</param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>/**/%ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", %Value%);</command>
        </effect>
        <effect name="Events NTL: Fire Advanced Return Declare">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="IntCount" dispname="Int Count" vartype="player" donotrelax="">0</param>
            <param name="Ints" dispname="Ints" vartype="stringid"></param>
            <param name="FloatCount" dispname="Float Count" vartype="player" donotrelax="">0</param>
            <param name="Floats" dispname="Floats" vartype="stringid"></param>
            <param name="StringCount" dispname="String Count" vartype="player" donotrelax="">0</param>
            <param name="Strings" dispname="Strings" vartype="stringid"></param>
            <param name="VectorCount" dispname="Vector Count" vartype="player" donotrelax="">0</param>
            <param name="Vectors" dispname="Vectors" vartype="stringid"></param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>__Parameters %ReturnParameters%;</command>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.addInt%IntCount%(%Ints%);</command>
            <command>   __eventsFireParameters.addFloat%FloatCount%(%Floats%);</command>
            <command>   __eventsFireParameters.addString%StringCount%(%Strings%);</command>
            <command>   __eventsFireParameters.addVector%VectorCount%(%Vectors%);</command>
            <command>   /**/%ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Events NTL: Fire Advanced Return Set">
            <param name="Name" dispname="Name" vartype="stringid">event</param>
            <param name="IntCount" dispname="Int Count" vartype="player" donotrelax="">0</param>
            <param name="Ints" dispname="Ints" vartype="stringid"></param>
            <param name="FloatCount" dispname="Float Count" vartype="player" donotrelax="">0</param>
            <param name="Floats" dispname="Floats" vartype="stringid"></param>
            <param name="StringCount" dispname="String Count" vartype="player" donotrelax="">0</param>
            <param name="Strings" dispname="Strings" vartype="stringid"></param>
            <param name="VectorCount" dispname="Vector Count" vartype="player" donotrelax="">0</param>
            <param name="Vectors" dispname="Vectors" vartype="stringid"></param>
            <param name="ReturnParameters" dispname="Return Parameters" vartype="stringid">returnParameters</param>
            <command>{</command>
            <command>   __Parameters __eventsFireParameters;</command>
            <command>   __eventsFireParameters.addInt%IntCount%(%Ints%);</command>
            <command>   __eventsFireParameters.addFloat%FloatCount%(%Floats%);</command>
            <command>   __eventsFireParameters.addString%StringCount%(%Strings%);</command>
            <command>   __eventsFireParameters.addVector%VectorCount%(%Vectors%);</command>
            <command>   /**/%ReturnParameters% = __eventHandlerStoreWithReturn.fire("%Name%", __eventsFireParameters);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Set Bool">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Value" dispname="Value" vartype="stringid">false</param>
            <command>__storageWithBool.put("%Name%", %Value%);</command>
        </effect>
        <effect name="Storage NTL: Player Set Bool">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="Value" dispname="Value" vartype="stringid">false</param>
            <command>__storageWithBool.put("__"+%Player%+"__%Name%", %Value%);</command>
        </effect>
        <effect name="Storage NTL: Get Bool Declared">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Variable" dispname="Variable" vartype="stringid">boolVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">false</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>bool %Variable% = %DefaultValue%;</command>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithBool.remove("%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithBool.get("%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Player Get Bool Declared">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="Variable" dispname="Variable" vartype="stringid">boolVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">false</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>bool %Variable% = %DefaultValue%;</command>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithBool.remove("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithBool.get("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Get Bool Set">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Variable" dispname="Variable" vartype="stringid">boolVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">false</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithBool.remove("%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithBool.get("%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Player Get Bool Set">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="Variable" dispname="Variable" vartype="stringid">boolVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">false</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithBool.remove("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithBool.get("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Remove Bool">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <command>__storageWithBool.remove("%Name%");</command>
        </effect>
        <effect name="Storage NTL: Player Remove Bool">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <command>__storageWithBool.remove("__"+%Player%+"__%Name%");</command>
        </effect>
        <effect name="Storage NTL: Set Int">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Value" dispname="Value" vartype="stringid">0</param>
            <command>__storageWithInt.put("%Name%", %Value%);</command>
        </effect>
        <effect name="Storage NTL: Player Set Int">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="Value" dispname="Value" vartype="stringid">0</param>
            <command>__storageWithInt.put("__"+%Player%+"__%Name%", %Value%);</command>
        </effect>
        <effect name="Storage NTL: Get Int Declared">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">0</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>int %Variable% = %DefaultValue%;</command>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithInt.remove("%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithInt.get("%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Player Get Int Declared">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">0</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>int %Variable% = %DefaultValue%;</command>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithInt.remove("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithInt.get("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Get Int Set">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">0</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithInt.remove("%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithInt.get("%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Player Get Int Set">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="Variable" dispname="Variable" vartype="stringid">intVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">0</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithInt.remove("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithInt.get("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Remove Int">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <command>__storageWithInt.remove("%Name%");</command>
        </effect>
        <effect name="Storage NTL: Player Remove Int">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <command>__storageWithInt.remove("__"+%Player%+"__%Name%");</command>
        </effect>
        <effect name="Storage NTL: Set Float">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <command>__storageWithFloat.put("%Name%", %Value%);</command>
        </effect>
        <effect name="Storage NTL: Player Set Float">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="Value" dispname="Value" vartype="stringid">0.0</param>
            <command>__storageWithFloat.put("__"+%Player%+"__%Name%", %Value%);</command>
        </effect>
        <effect name="Storage NTL: Get Float Declared">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Variable" dispname="Variable" vartype="stringid">floatVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">0.0</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>float %Variable% = %DefaultValue%;</command>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithFloat.remove("%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithFloat.get("%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Player Get Float Declared">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="Variable" dispname="Variable" vartype="stringid">floatVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">0.0</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>float %Variable% = %DefaultValue%;</command>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithFloat.remove("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithFloat.get("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Get Float Set">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Variable" dispname="Variable" vartype="stringid">floatVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">0.0</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithFloat.remove("%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithFloat.get("%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Player Get Float Set">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="Variable" dispname="Variable" vartype="stringid">floatVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">0.0</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithFloat.remove("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithFloat.get("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Remove Float">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <command>__storageWithFloat.remove("%Name%");</command>
        </effect>
        <effect name="Storage NTL: Player Remove Float">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <command>__storageWithFloat.remove("__"+%Player%+"__%Name%");</command>
        </effect>
        <effect name="Storage NTL: Set String">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <command>__storageWithString.put("%Name%", %Value%);</command>
        </effect>
        <effect name="Storage NTL: Player Set String">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="Value" dispname="Value" vartype="stringid">""</param>
            <command>__storageWithString.put("__"+%Player%+"__%Name%", %Value%);</command>
        </effect>
        <effect name="Storage NTL: Get String Declared">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Variable" dispname="Variable" vartype="stringid">stringVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">""</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>string %Variable% = %DefaultValue%;</command>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithString.remove("%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithString.get("%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Player Get String Declared">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="Variable" dispname="Variable" vartype="stringid">stringVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">""</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>string %Variable% = %DefaultValue%;</command>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithString.remove("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithString.get("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Get String Set">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Variable" dispname="Variable" vartype="stringid">stringVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">""</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithString.remove("%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithString.get("%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Player Get String Set">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="Variable" dispname="Variable" vartype="stringid">stringVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">""</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithString.remove("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithString.get("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Remove String">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <command>__storageWithString.remove("%Name%");</command>
        </effect>
        <effect name="Storage NTL: Player Remove String">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <command>__storageWithString.remove("__"+%Player%+"__%Name%");</command>
        </effect>
        <effect name="Storage NTL: Set Vector">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Value" dispname="Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <command>__storageWithVector.put("%Name%", %Value%);</command>
        </effect>
        <effect name="Storage NTL: Player Set Vector">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="Value" dispname="Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <command>__storageWithVector.put("__"+%Player%+"__%Name%", %Value%);</command>
        </effect>
        <effect name="Storage NTL: Get Vector Declared">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Variable" dispname="Variable" vartype="stringid">vectorVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>vector %Variable% = %DefaultValue%;</command>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithVector.remove("%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithVector.get("%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Player Get Vector Declared">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="Variable" dispname="Variable" vartype="stringid">vectorVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>vector %Variable% = %DefaultValue%;</command>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithVector.remove("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithVector.get("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Get Vector Set">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Variable" dispname="Variable" vartype="stringid">vectorVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithVector.remove("%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithVector.get("%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Player Get Vector Set">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <param name="Variable" dispname="Variable" vartype="stringid">vectorVariable</param>
            <param name="DefaultValue" dispname="Default Value" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <param name="Remove" dispname="Remove" vartype="bool" donotrelax="">false</param>
            <command>if(%Remove%){</command>
            <command>   /**/%Variable% = __storageWithVector.remove("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>} else {</command>
            <command>   /**/%Variable% = __storageWithVector.get("__"+%Player%+"__%Name%", %DefaultValue%);</command>
            <command>}</command>
        </effect>
        <effect name="Storage NTL: Remove Vector">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <command>__storageWithVector.remove("%Name%");</command>
        </effect>
        <effect name="Storage NTL: Player Remove Vector">
            <param name="Name" dispname="Name" vartype="stringid"></param>
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <command>__storageWithVector.remove("__"+%Player%+"__%Name%");</command>
        </effect>
        <effect name="Scope: Start {">
            <command>{</command>
        </effect>
        <effect name="Scope: End }">
            <command>}</command>
        </effect>
        <effect name="KB Query NTL: Define Start {">
            <param name="Player" dispname="Player" vartype="stringid">1</param>
            <command>{</command>
            <command>   int __queryPlayer = %Player%;</command>
            <command>   xsSetContextPlayer(__queryPlayer);</command>
            <command>   int __queryId = kbUnitQueryCreate("__QueryId"+__queryIncrement);</command>
            <command>   __queryIncrement++;</command>
            <command>   kbUnitQuerySetPlayerID(__queryId, __queryPlayer);</command>
            <command>   kbUnitQuerySetUnitType(__queryId, cUnitTypeAll);</command>
            <command>   kbUnitQuerySetState(__queryId, cUnitStateAny);</command>
            <command>   kbUnitQuerySetIgnoreKnockedOutUnits(__queryId, false);</command>
        </effect>
        <effect name="KB Query NTL: Define Unit Type">
            <param name="UnitType" dispname="Unit Type" vartype="unittype">Unit</param>
            <command>   kbUnitQuerySetUnitType(__queryId, kbGetUnitTypeID("%UnitType%"));</command>
        </effect>
        <effect name="KB Query NTL: Define Action Type">
            <param name="Action" dispname="Action" vartype="stringid">cActionTypeIdle</param>
            <command>   kbUnitQuerySetActionType(__queryId, %Action%);</command>
        </effect>
        <effect name="KB Query NTL: Define State">
            <param name="Building" dispname="Building" vartype="bool">true</param>
            <param name="Alive" dispname="Alive" vartype="bool">true</param>
            <param name="Dead" dispname="Dead" vartype="bool">true</param>
            <param name="Queued" dispname="Queued" vartype="bool">true</param>
            <command>   kbUnitQuerySetState(__queryId, (%Building% ? cUnitStateBuilding : 0) + (%Alive% ? cUnitStateAlive : 0) + (%Dead% ? cUnitStateDead : 0) + (%Queued% ? cUnitStateQueued : 0));</command>
        </effect>
        <effect name="KB Query NTL: Define StateID">
            <param name="State" dispname="State" vartype="stringid">cUnitStateAny</param>
            <command>   kbUnitQuerySetState(__queryId, cActionType%UnitType%);</command>
        </effect>
        <effect name="KB Query NTL: Define Position">
            <param name="Location" dispname="" vartype="area">0,0,0</param>
            <param name="Dist" dispname="Distance" vartype="stringid" dispradius="">0</param>
            <param name="Sort" dispname="SortByDistance" vartype="bool">true</param>
            <command>   kbUnitQuerySetPosition(__queryId, vector(%Location%));</command>
            <command>   kbUnitQuerySetMaximumDistance(__queryId, %Dist%);</command>
            <command>   kbUnitQuerySetAscendingSort(__queryId, %Sort%);</command>
        </effect>
        <effect name="KB Query NTL: Define Ignore Knockout Units">
            <param name="IgnoreKnockout" dispname="Ignore Knockout" vartype="bool">true</param>
            <command>   kbUnitQuerySetIgnoreKnockedOutUnits(__queryId, %IgnoreKnockout%);</command>
        </effect>
        <effect name="KB Query NTL: Define Creation Time">
            <param name="Min" dispname="Min MS" vartype="stringid">-1</param>
            <param name="IncludeMin" dispname="Min Inclusive" vartype="bool">true</param>
            <param name="Max" dispname="Max MS" vartype="stringid">-1</param>
            <param name="IncludeMax" dispname="Max Inclusive" vartype="bool">true</param>
            <command>   kbUnitQuerySetMinCreationTime(__queryId, %Min%, %IncludeMin%);</command>
            <command>   kbUnitQuerySetMaxCreationTime(__queryId, %Max%, %IncludeMax%);</command>
        </effect>
        <effect name="KB Query NTL: Define End } For Every Unit Start {">
            <param name="UnitVariable" dispname="Unit Variable" vartype="stringid">unitId</param>
            <command>   xsSetContextPlayer(__queryPlayer);</command>
            <command>   kbUnitQueryExecute(__queryId);</command>
            <command>   __queryTempResults = kbUnitQueryGetResults(__queryId);</command>
            <command>   kbUnitQueryDestroy(__queryId);</command>
            <command>}</command>
            <command>{</command>
            <command>   int[] __queryResults%UnitVariable% = __queryTempResults;</command>
            <command>   /**/int %UnitVariable% = -1;</command>
            <command>   for(int __queryIndex%UnitVariable% = 0;  __queryIndex%UnitVariable% &lt; __queryResults%UnitVariable%.size(); __queryIndex%UnitVariable%++){</command>
            <command>       /**/%UnitVariable% = __queryResults%UnitVariable%[__queryIndex%UnitVariable%];</command>
        </effect>
        <effect name="KB Query NTL: For Every Unit End }">
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="KB Query NTL: Define End } Parameters Ints Declared">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <command>   xsSetContextPlayer(__queryPlayer);</command>
            <command>   kbUnitQueryExecute(__queryId);</command>
            <command>   __queryTempResults = kbUnitQueryGetResults(__queryId);</command>
            <command>   kbUnitQueryDestroy(__queryId);</command>
            <command>}</command>
            <command>__Parameters %Name%;</command>
            <command>/**/%Name%.ints = __queryTempResults;</command>
        </effect>
        <effect name="KB Query NTL: Define End } Parameters Ints Add">
            <param name="Name" dispname="Name" vartype="stringid">parameters</param>
            <command>   xsSetContextPlayer(__queryPlayer);</command>
            <command>   kbUnitQueryExecute(__queryId);</command>
            <command>   __queryTempResults = kbUnitQueryGetResults(__queryId);</command>
            <command>   kbUnitQueryDestroy(__queryId);</command>
            <command>}</command>
            <command>{</command>
            <command>   for(int __queryIndex%Name% = 0;  __queryIndex%Name% &lt; __queryTempResults.size(); __queryIndex%Name%++){</command>
            <command>       /**/%Name%.ints.add(__queryTempResults[__queryIndex%Name%]);</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: For Terrain Tile Start {">
            <param name="Variable" dispname="Variable" vartype="stringid">vectorVariable</param>
            <command>{</command>
            <command>   int __worldMapSizeX_%Variable% = __getMapSizeX();</command>
            <command>   int __worldMapSizeZ_%Variable% = __getMapSizeZ();</command>
            <command>   vector %Variable% = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ_%Variable% = 0; __worldPosZ_%Variable% &lt; __worldMapSizeZ_%Variable%; __worldPosZ_%Variable% = __worldPosZ_%Variable% + 2){</command>
            <command>       for(int __worldPosX_%Variable% = 0; __worldPosX_%Variable% &lt; __worldMapSizeX_%Variable%; __worldPosX_%Variable% = __worldPosX_%Variable% + 2){</command>
            <command>           /**/%Variable%.x = 1.0 + __worldPosX_%Variable%;</command>
            <command>           /**/%Variable%.z = 1.0 + __worldPosZ_%Variable%;</command>
        </effect>
        <effect name="World NTL: For Terrain Tile Rectangle Start {">
            <param name="Variable" dispname="Variable" vartype="stringid">vectorVariable</param>
            <param name="DstArea" dispname="Area" vartype="rectarea">0,0,0,0</param>
            <command>{</command>
            <command>   int __worldLowX_%Variable% = __clampXInsideMap(__rectangleAreaGetLowX(%DstArea%));</command>
            <command>   int __worldLowZ_%Variable% = __clampZInsideMap(__rectangleAreaGetLowZ(%DstArea%));</command>
            <command>   int __worldHighX_%Variable% = __clampXInsideMap(__rectangleAreaGetHighX(%DstArea%));</command>
            <command>   int __worldHighZ_%Variable% = __clampZInsideMap(__rectangleAreaGetHighZ(%DstArea%));</command>
            <command>   vector %Variable% = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ_%Variable% = __worldLowZ_%Variable%; __worldPosZ_%Variable% &lt; __worldHighZ_%Variable%; __worldPosZ_%Variable% = __worldPosZ_%Variable% + 2){</command>
            <command>       for(int __worldPosX_%Variable% = __worldLowX_%Variable%; __worldPosX_%Variable% &lt; __worldHighX_%Variable%; __worldPosX_%Variable% = __worldPosX_%Variable% + 2){</command>
            <command>           /**/%Variable%.x = 1.0 + __worldPosX_%Variable%;</command>
            <command>           /**/%Variable%.z = 1.0 + __worldPosZ_%Variable%;</command>
        </effect>
        <effect name="World NTL: For Terrain Tile Circle Start {">
            <param name="Variable" dispname="Variable" vartype="stringid">vectorVariable</param>
            <param name="Center" dispname="" vartype="area" dispradius="">0, 0, 0</param>
            <param name="Radius" dispname="Radius" vartype="stringid" dispradius="">0</param>
            <command>{</command>
            <command>   vector __worldCenter_%Variable% = vector(%Center%);</command>
            <command>   int __worldLowX_%Variable% = __clampXInsideMap(__xsVectorGetX(__worldCenter_%Variable%) - %Radius%);</command>
            <command>   int __worldLowZ_%Variable% = __clampZInsideMap(__xsVectorGetZ(__worldCenter_%Variable%) - %Radius%);</command>
            <command>   int __worldHighX_%Variable% = __clampXInsideMap(__xsVectorGetX(__worldCenter_%Variable%) + %Radius%);</command>
            <command>   int __worldHighZ_%Variable% = __clampZInsideMap(__xsVectorGetZ(__worldCenter_%Variable%) + %Radius%);</command>
            <command>   int __worldRadiusCheck_%Variable% = %Radius% * %Radius% + %Radius%;</command>
            <command>   vector %Variable% = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ_%Variable% = __worldLowZ_%Variable%; __worldPosZ_%Variable% &lt; __worldHighZ_%Variable%; __worldPosZ_%Variable% = __worldPosZ_%Variable% + 2){</command>
            <command>       for(int __worldPosX_%Variable% = __worldLowX_%Variable%; __worldPosX_%Variable% &lt; __worldHighX_%Variable%; __worldPosX_%Variable% = __worldPosX_%Variable% + 2){</command>
            <command>           /**/%Variable%.x = __worldPosX_%Variable%;</command>
            <command>           /**/%Variable%.z = __worldPosZ_%Variable%;</command>
            <command>           if(xsVectorDistanceSqr(%Variable%, __worldCenter_%Variable%) &gt; __worldRadiusCheck_%Variable%){</command>
            <command>               continue;</command>
            <command>           }</command>
        </effect>
        <effect name="World NTL: For Forest Tile Start {">
            <param name="Variable" dispname="Variable" vartype="stringid">vectorVariable</param>
            <param name="Mod" dispname="Mod" vartype="hidden">%%</param>
            <command>{</command>
            <command>   int __worldMapSizeX_%Variable% = __getMapSizeX();</command>
            <command>   int __worldMapSizeZ_%Variable% = __getMapSizeZ();</command>
            <command>   vector %Variable% = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ_%Variable% = 0; __worldPosZ_%Variable% &lt; __worldMapSizeZ_%Variable%; __worldPosZ_%Variable% = __worldPosZ_%Variable% + 2){</command>
            <command>       for(int __worldPosX_%Variable% = 0; __worldPosX_%Variable% &lt; __worldMapSizeX_%Variable%; __worldPosX_%Variable% = __worldPosX_%Variable% + 2){</command>
            <command>           if((__worldPosZ_%Variable% / 2 + __worldPosX_%Variable% / 2) %Mod% 2 == 0){</command>
            <command>               continue;</command>
            <command>           }</command>
            <command>           /**/%Variable%.x = 1.0 + __worldPosX_%Variable%;</command>
            <command>           /**/%Variable%.z = 1.0 + __worldPosZ_%Variable%;</command>
        </effect>
        <effect name="World NTL: For Forest Tile Rectangle Start {">
            <param name="Variable" dispname="Variable" vartype="stringid">vectorVariable</param>
            <param name="DstArea" dispname="Area" vartype="rectarea">0,0,0,0</param>
            <param name="Mod" dispname="Mod" vartype="hidden">%%</param>
            <command>{</command>
            <command>   int __worldLowX_%Variable% = __clampXInsideMap(__rectangleAreaGetLowX(%DstArea%));</command>
            <command>   int __worldLowZ_%Variable% = __clampZInsideMap(__rectangleAreaGetLowZ(%DstArea%));</command>
            <command>   int __worldHighX_%Variable% = __clampXInsideMap(__rectangleAreaGetHighX(%DstArea%));</command>
            <command>   int __worldHighZ_%Variable% = __clampZInsideMap(__rectangleAreaGetHighZ(%DstArea%));</command>
            <command>   vector %Variable% = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ_%Variable% = __worldLowZ_%Variable%; __worldPosZ_%Variable% &lt; __worldHighZ_%Variable%; __worldPosZ_%Variable% = __worldPosZ_%Variable% + 2){</command>
            <command>       for(int __worldPosX_%Variable% = __worldLowX_%Variable%; __worldPosX_%Variable% &lt; __worldHighX_%Variable%; __worldPosX_%Variable% = __worldPosX_%Variable% + 2){</command>
            <command>           if((__worldPosZ_%Variable% / 2 + __worldPosX_%Variable% / 2) %Mod% 2 == 0){</command>
            <command>               continue;</command>
            <command>           }</command>
            <command>           /**/%Variable%.x = 1.0 + __worldPosX_%Variable%;</command>
            <command>           /**/%Variable%.z = 1.0 + __worldPosZ_%Variable%;</command>
        </effect>
        <effect name="World NTL: For Forest Tile Circle Start {">
            <param name="Variable" dispname="Variable" vartype="stringid">vectorVariable</param>
            <param name="Center" dispname="" vartype="area" dispradius="">0, 0, 0</param>
            <param name="Radius" dispname="Radius" vartype="stringid" dispradius="">0</param>
            <param name="Mod" dispname="Mod" vartype="hidden">%%</param>
            <command>{</command>
            <command>   vector __worldCenter_%Variable% = vector(%Center%);</command>
            <command>   int __worldLowX_%Variable% = __clampXInsideMap(__xsVectorGetX(__worldCenter_%Variable%) - %Radius%);</command>
            <command>   int __worldLowZ_%Variable% = __clampZInsideMap(__xsVectorGetZ(__worldCenter_%Variable%) - %Radius%);</command>
            <command>   int __worldHighX_%Variable% = __clampXInsideMap(__xsVectorGetX(__worldCenter_%Variable%) + %Radius%);</command>
            <command>   int __worldHighZ_%Variable% = __clampZInsideMap(__xsVectorGetZ(__worldCenter_%Variable%) + %Radius%);</command>
            <command>   int __worldRadiusCheck_%Variable% = %Radius% * %Radius% + %Radius%;</command>
            <command>   vector %Variable% = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ_%Variable% = __worldLowZ_%Variable%; __worldPosZ_%Variable% &lt; __worldHighZ_%Variable%; __worldPosZ_%Variable% = __worldPosZ_%Variable% + 2){</command>
            <command>       for(int __worldPosX_%Variable% = __worldLowX_%Variable%; __worldPosX_%Variable% &lt; __worldHighX_%Variable%; __worldPosX_%Variable% = __worldPosX_%Variable% + 2){</command>
            <command>           if((__worldPosZ_%Variable% / 2 + __worldPosX_%Variable% / 2) %Mod% 2 == 0){</command>
            <command>               continue;</command>
            <command>           }</command>
            <command>           /**/%Variable%.x = __worldPosX_%Variable%;</command>
            <command>           /**/%Variable%.z = __worldPosZ_%Variable%;</command>
            <command>           if(xsVectorDistanceSqr(%Variable%, __worldCenter_%Variable%) &gt; __worldRadiusCheck_%Variable%){</command>
            <command>               continue;</command>
            <command>           }</command>
        </effect>
        <effect name="World NTL: For Terrain Vertex Start {">
            <param name="Variable" dispname="Variable" vartype="stringid">vectorVariable</param>
            <command>{</command>
            <command>   int __worldMapSizeX_%Variable% = __getMapSizeX();</command>
            <command>   int __worldMapSizeZ_%Variable% = __getMapSizeZ();</command>
            <command>   vector %Variable% = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ_%Variable% = 0; __worldPosZ_%Variable% &lt;= __worldMapSizeZ_%Variable%; __worldPosZ_%Variable% = __worldPosZ_%Variable% + 2){</command>
            <command>       for(int __worldPosX_%Variable% = 0; __worldPosX_%Variable% &lt;= __worldMapSizeX_%Variable%; __worldPosX_%Variable% = __worldPosX_%Variable% + 2){</command>
            <command>           /**/%Variable%.x = __worldPosX_%Variable%;</command>
            <command>           /**/%Variable%.z = __worldPosZ_%Variable%;</command>
        </effect>
        <effect name="World NTL: For Terrain Vertex Rectangle Start {">
            <command>{</command>
            <command>   int __worldLowX_%Variable% = __clampXInsideMap(__rectangleAreaGetLowX(%DstArea%));</command>
            <command>   int __worldLowZ_%Variable% = __clampZInsideMap(__rectangleAreaGetLowZ(%DstArea%));</command>
            <command>   int __worldHighX_%Variable% = __clampXInsideMap(__rectangleAreaGetHighX(%DstArea%));</command>
            <command>   int __worldHighZ_%Variable% = __clampZInsideMap(__rectangleAreaGetHighZ(%DstArea%));</command>
            <command>   vector %Variable% = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ_%Variable% = __worldLowZ_%Variable%; __worldPosZ_%Variable% &lt;= __worldHighZ_%Variable%; __worldPosZ_%Variable% = __worldPosZ_%Variable% + 2){</command>
            <command>       for(int __worldPosX_%Variable% = __worldLowX_%Variable%; __worldPosX_%Variable% &lt;= __worldHighX_%Variable%; __worldPosX_%Variable% = __worldPosX_%Variable% + 2){</command>
            <command>           /**/%Variable%.x = __worldPosX_%Variable%;</command>
            <command>           /**/%Variable%.z = __worldPosZ_%Variable%;</command>
        </effect>
        <effect name="World NTL: For Terrain Vertex Circle Start {">
            <param name="Variable" dispname="Variable" vartype="stringid">vectorVariable</param>
            <param name="Center" dispname="" vartype="area" dispradius="">0, 0, 0</param>
            <param name="Radius" dispname="Radius" vartype="stringid" dispradius="">0</param>
            <command>{</command>
            <command>   vector __worldCenter_%Variable% = vector(%Center%);</command>
            <command>   int __worldLowX_%Variable% = __clampXInsideMap(__xsVectorGetX(__worldCenter_%Variable%) - %Radius%);</command>
            <command>   int __worldLowZ_%Variable% = __clampZInsideMap(__xsVectorGetZ(__worldCenter_%Variable%) - %Radius%);</command>
            <command>   int __worldHighX_%Variable% = __clampXInsideMap(__xsVectorGetX(__worldCenter_%Variable%) + %Radius%);</command>
            <command>   int __worldHighZ_%Variable% = __clampZInsideMap(__xsVectorGetZ(__worldCenter_%Variable%) + %Radius%);</command>
            <command>   int __worldRadiusCheck_%Variable% = %Radius% * %Radius% + %Radius%;</command>
            <command>   vector %Variable% = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ_%Variable% = __worldLowZ_%Variable%; __worldPosZ_%Variable% &lt;= __worldHighZ_%Variable%; __worldPosZ_%Variable% = __worldPosZ_%Variable% + 2){</command>
            <command>       for(int __worldPosX_%Variable% = __worldLowX_%Variable%; __worldPosX_%Variable% &lt;= __worldHighX_%Variable%; __worldPosX_%Variable% = __worldPosX_%Variable% + 2){</command>
            <command>           /**/%Variable%.x = __worldPosX_%Variable%;</command>
            <command>           /**/%Variable%.z = __worldPosZ_%Variable%;</command>
            <command>           if(xsVectorDistanceSqr(%Variable%, __worldCenter_%Variable%) &gt; __worldRadiusCheck_%Variable%){</command>
            <command>               continue;</command>
            <command>           }</command>
        </effect>
        <effect name="World NTL: For End }">
            <command>       }</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Smooth">
            <param name="Count" dispname="Count" vartype="stringid">1</param>
            <command>__worldSmooth(0, 0, __getMapSizeTilesX(), __getMapSizeTilesZ(), false, %Count%);</command>
        </effect>
        <effect name="World NTL: Smooth Rectangle">
            <param name="DstArea" dispname="Area" vartype="rectarea">0,0,0,0</param>
            <param name="OutsideInfluence" dispname="Outside Infleunce" vartype="bool" donotrelax="">false</param>
            <param name="Count" dispname="Count" vartype="stringid">1</param>
            <command>__worldSmooth(__clampXInsideMap(__rectangleAreaGetLowX(%DstArea%)) / 2, </command>
            <command>       __clampZInsideMap(__rectangleAreaGetLowZ(%DstArea%)) / 2, </command>
            <command>       __clampXInsideMap(__rectangleAreaGetHighX(%DstArea%)) / 2, </command>
            <command>       __clampZInsideMap(__rectangleAreaGetHighZ(%DstArea%)) / 2, %OutsideInfluence%, %Count%);</command>
        </effect>
        <effect name="World NTL: Update Obstructions">
            <command>{</command>
            <command>   int __worldMapSizeXPassibility = __getMapSizeX();</command>
            <command>   int __worldMapSizeZPassibility = __getMapSizeZ();</command>
            <command>   vector __worldPositionPassibility = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int z = 0; z &lt;= __worldMapSizeXPassibility; z = z + 2) {</command>
            <command>       __worldPositionPassibility.z = z;</command>
            <command>       for(int x = 0; x &lt;= __worldMapSizeZPassibility; x = x + 2) {</command>
            <command>           __worldPositionPassibility.x = x;</command>
            <command>           trChangeTerrainHeight(x, z, x, z, trGetTerrainHeight(__worldPositionPassibility));</command>
            <command>       }</command>
            <command>   }</command>
            <command>   trPaintTerrain(trGetTerrainType(cOriginVector), trGetTerrainSubtype(cOriginVector), 0, 0, 0, 0, true);</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Terrain Type To Indices Set">
            <param name="Name" dispname="Name" vartype="terrainsubtype"></param>
            <param name="TerrainType" dispname="Terrain Type" vartype="stringid">terrainType</param>
            <param name="TerrainSubType" dispname="Terrain Sub Type" vartype="stringid">terrainSubType</param>
            <command>/**/%TerrainType% = __calculateTerrainTypeId("%Name%");</command>
            <command>/**/%TerrainSubType% = __calculateSubTerrainTypeId("%Name%");</command>
        </effect>
        <effect name="World NTL: Terrain Type To Indices Declared">
            <param name="Name" dispname="Name" vartype="terrainsubtype"></param>
            <param name="TerrainType" dispname="Terrain Type" vartype="stringid">terrainType</param>
            <param name="TerrainSubType" dispname="Terrain Sub Type" vartype="stringid">terrainSubType</param>
            <command>int %TerrainType% = __calculateTerrainTypeId("%Name%");</command>
            <command>int %TerrainSubType% = __calculateSubTerrainTypeId("%Name%");</command>
        </effect>
        <effect name="World NTL: Set Terrain">
            <param name="Subtype" dispname="Terrain" vartype="terrainsubtype"></param>
            <command>trPaintTerrainBySubtypeName("%Subtype%", 0.0, 0.0, __getMapSizeX(), __getMapSizeZ(), false);</command>
        </effect>
        <effect name="World NTL: Set Terrain At Location">
            <param name="Subtype" dispname="Terrain" vartype="terrainsubtype"></param>
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <command>{</command>
            <command>   vector __terrainPaintLocation = vector(%Area%);</command>
            <command>   float __terrainPaintX = 2.0 * xsFloatToInt(__terrainPaintLocation.x / 2.0);</command>
            <command>   float __terrainPaintZ = 2.0 * xsFloatToInt(__terrainPaintLocation.z / 2.0);</command>
            <command>   trPaintTerrainBySubtypeName("%Subtype%", __terrainPaintX, __terrainPaintZ, __terrainPaintX + 2.0, __terrainPaintZ + 2.0, false);</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Set Terrain Rectangle">
            <param name="Subtype" dispname="Terrain" vartype="terrainsubtype"></param>
            <param name="DstArea" dispname="Area" vartype="rectarea">0,0,0,0</param>
            <command>trPaintTerrainBySubtypeName("%Subtype%", %DstArea%, false);</command>
        </effect>
        <effect name="World NTL: Set Terrain Circle">
            <param name="Subtype" dispname="Terrain" vartype="terrainsubtype"></param>
            <param name="Center" dispname="" vartype="area" dispradius="">0, 0, 0</param>
            <param name="Radius" dispname="Radius" vartype="stringid" dispradius="">0</param>
            <command>{</command>
            <command>   int __worldTerrainType = __calculateTerrainTypeId("%Subtype%");</command>
            <command>   int __worldTerrainSubType = __calculateSubTerrainTypeId("%Subtype%");</command>
            <command>   vector __worldCenter = vector(%Center%);</command>
            <command>   int __worldLowX = __clampXInsideMap(__xsVectorGetX(__worldCenter) - %Radius%);</command>
            <command>   int __worldLowZ = __clampZInsideMap(__xsVectorGetZ(__worldCenter) - %Radius%);</command>
            <command>   int __worldHighX = __clampXInsideMap(__xsVectorGetX(__worldCenter) + %Radius%);</command>
            <command>   int __worldHighZ = __clampZInsideMap(__xsVectorGetZ(__worldCenter) + %Radius%);</command>
            <command>   int __worldRadiusCheck = %Radius% * %Radius% + %Radius%;</command>
            <command>   vector __worldPosition = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ = __worldLowZ; __worldPosZ &lt; __worldHighZ; __worldPosZ = __worldPosZ + 2){</command>
            <command>       for(int __worldPosX = __worldLowX; __worldPosX &lt; __worldHighX; __worldPosX = __worldPosX + 2){</command>
            <command>           __worldPosition.x = __worldPosX;</command>
            <command>           __worldPosition.z = __worldPosZ;</command>
            <command>           if(xsVectorDistanceSqr(__worldPosition, __worldCenter) &gt; __worldRadiusCheck){</command>
            <command>               continue;</command>
            <command>           }</command>
            <command>           __paintTerrainLocation(__worldTerrainType, __worldTerrainSubType, __worldPosition.x, __worldPosition.z);</command>
            <command>       }</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Set Terrain By Indices">
            <param name="TerrainType" dispname="Terrain Type" vartype="stringid">0</param>
            <param name="TerrainSubType" dispname="Terrain Sub Type" vartype="stringid">0</param>
            <command>trPaintTerrain(%TerrainType%, %TerrainSubType%, 0.0, 0.0, __getMapSizeX(), __getMapSizeZ(), false);</command>
        </effect>
        <effect name="World NTL: Set Terrain By Indices At Location">
            <param name="TerrainType" dispname="Terrain Type" vartype="stringid">0</param>
            <param name="TerrainSubType" dispname="Terrain Sub Type" vartype="stringid">0</param>
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <command>__paintTerrainLocationArea(%TerrainType%, %TerrainSubType%, %Area%);</command>
        </effect>
        <effect name="World NTL: Set Terrain By Indices Rectangle">
            <param name="TerrainType" dispname="Terrain Type" vartype="stringid">0</param>
            <param name="TerrainSubType" dispname="Terrain Sub Type" vartype="stringid">0</param>
            <param name="DstArea" dispname="Area" vartype="rectarea">0,0,0,0</param>
            <command>trPaintTerrain(%TerrainType%, %TerrainSubType%, %DstArea%, false);</command>
        </effect>
        <effect name="World NTL: Set Terrain By Indices Circle">
            <param name="TerrainType" dispname="Terrain Type" vartype="stringid">0</param>
            <param name="TerrainSubType" dispname="Terrain Sub Type" vartype="stringid">0</param>
            <param name="Center" dispname="" vartype="area" dispradius="">0, 0, 0</param>
            <param name="Radius" dispname="Radius" vartype="stringid" dispradius="">0</param>
            <command>{</command>
            <command>   vector __worldCenter = vector(%Center%);</command>
            <command>   int __worldLowX = __clampXInsideMap(__xsVectorGetX(__worldCenter) - %Radius%);</command>
            <command>   int __worldLowZ = __clampZInsideMap(__xsVectorGetZ(__worldCenter) - %Radius%);</command>
            <command>   int __worldHighX = __clampXInsideMap(__xsVectorGetX(__worldCenter) + %Radius%);</command>
            <command>   int __worldHighZ = __clampZInsideMap(__xsVectorGetZ(__worldCenter) + %Radius%);</command>
            <command>   int __worldRadiusCheck = %Radius% * %Radius% + %Radius%;</command>
            <command>   vector __worldPosition = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ = __worldLowZ; __worldPosZ &lt; __worldHighZ; __worldPosZ = __worldPosZ + 2){</command>
            <command>       for(int __worldPosX = __worldLowX; __worldPosX &lt; __worldHighX; __worldPosX = __worldPosX + 2){</command>
            <command>           __worldPosition.x = __worldPosX;</command>
            <command>           __worldPosition.z = __worldPosZ;</command>
            <command>           if(xsVectorDistanceSqr(__worldPosition, __worldCenter) &gt; __worldRadiusCheck){</command>
            <command>               continue;</command>
            <command>           }</command>
            <command>           __paintTerrainLocation(%TerrainType%, %TerrainSubType%, __worldPosition.x, __worldPosition.z);</command>
            <command>       }</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Replace Terrain">
            <param name="FromSubtype" dispname="From Terrain" vartype="terrainsubtype"></param>
            <param name="ToSubtype" dispname="To Terrain" vartype="terrainsubtype"></param>
            <command>{</command>
            <command>   int __worldFromTerrainType = __calculateTerrainTypeId("%FromSubtype%");</command>
            <command>   int __worldFromTerrainSubType = __calculateSubTerrainTypeId("%FromSubtype%");</command>
            <command>   int __worldToTerrainType = __calculateTerrainTypeId("%ToSubtype%");</command>
            <command>   int __worldToTerrainSubType = __calculateSubTerrainTypeId("%ToSubtype%");</command>
            <command>   int __worldMapSizeX = __getMapSizeX();</command>
            <command>   int __worldMapSizeZ = __getMapSizeZ();</command>
            <command>   vector __worldPosition = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ = 0; __worldPosZ &lt; __worldMapSizeZ; __worldPosZ = __worldPosZ + 2){</command>
            <command>       for(int __worldPosX = 0; __worldPosX &lt; __worldMapSizeX; __worldPosX = __worldPosX + 2){</command>
            <command>           __worldPosition.x = 1.0 + __worldPosX;</command>
            <command>           __worldPosition.z = 1.0 + __worldPosZ;</command>
            <command>           if(trGetTerrainType(__worldPosition) == __worldFromTerrainType &amp;&amp; trGetTerrainSubtype(__worldPosition) == __worldFromTerrainSubType){</command>
            <command>               trPaintTerrain(__worldToTerrainType, __worldToTerrainSubType, __worldPosition.x - 1.0, __worldPosition.z - 1.0, __worldPosition.x + 1.0, __worldPosition.z + 1.0, false);</command>
            <command>           }</command>
            <command>       }</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Replace Terrain At Location">
            <param name="FromSubtype" dispname="From Terrain" vartype="terrainsubtype"></param>
            <param name="ToSubtype" dispname="To Terrain" vartype="terrainsubtype"></param>
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <command>{</command>
            <command>   int __worldFromTerrainType = __calculateTerrainTypeId("%FromSubtype%");</command>
            <command>   int __worldFromTerrainSubType = __calculateSubTerrainTypeId("%FromSubtype%");</command>
            <command>   int __worldToTerrainType = __calculateTerrainTypeId("%ToSubtype%");</command>
            <command>   int __worldToTerrainSubType = __calculateSubTerrainTypeId("%ToSubtype%");</command>
            <command>   vector __terrainPaintLocation = vector(%Area%);</command>
            <command>   float __terrainPaintX = 2.0 * xsFloatToInt(__terrainPaintLocation.x / 2.0);</command>
            <command>   float __terrainPaintZ = 2.0 * xsFloatToInt(__terrainPaintLocation.z / 2.0);</command>
            <command>   if(trGetTerrainType(__terrainPaintLocation) == __worldFromTerrainType &amp;&amp; trGetTerrainSubtype(__terrainPaintLocation) == __worldFromTerrainSubType){</command>
            <command>       trPaintTerrain(__worldToTerrainType, __worldToTerrainSubType, __terrainPaintX, __terrainPaintZ, __terrainPaintX + 2.0, __terrainPaintZ + 2.0, false);</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Replace Terrain Rectangle">
            <param name="FromSubtype" dispname="From Terrain" vartype="terrainsubtype"></param>
            <param name="ToSubtype" dispname="To Terrain" vartype="terrainsubtype"></param>
            <param name="DstArea" dispname="Area" vartype="rectarea">0,0,0,0</param>
            <command>{</command>
            <command>   int __worldFromTerrainType = __calculateTerrainTypeId("%FromSubtype%");</command>
            <command>   int __worldFromTerrainSubType = __calculateSubTerrainTypeId("%FromSubtype%");</command>
            <command>   int __worldToTerrainType = __calculateTerrainTypeId("%ToSubtype%");</command>
            <command>   int __worldToTerrainSubType = __calculateSubTerrainTypeId("%ToSubtype%");</command>
            <command>   int __worldLowX = __clampXInsideMap(__rectangleAreaGetLowX(%DstArea%));</command>
            <command>   int __worldLowZ = __clampZInsideMap(__rectangleAreaGetLowZ(%DstArea%));</command>
            <command>   int __worldHighX = __clampXInsideMap(__rectangleAreaGetHighX(%DstArea%));</command>
            <command>   int __worldHighZ = __clampZInsideMap(__rectangleAreaGetHighZ(%DstArea%));</command>
            <command>   vector __worldPosition = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ = __worldLowZ; __worldPosZ &lt; __worldHighZ; __worldPosZ = __worldPosZ + 2){</command>
            <command>       for(int __worldPosX = __worldLowX; __worldPosX &lt; __worldHighX; __worldPosX = __worldPosX + 2){</command>
            <command>           __worldPosition.x = 1.0 + __worldPosX;</command>
            <command>           __worldPosition.z = 1.0 + __worldPosZ;</command>
            <command>           if(trGetTerrainType(__worldPosition) == __worldFromTerrainType &amp;&amp; trGetTerrainSubtype(__worldPosition) == __worldFromTerrainSubType){</command>
            <command>               trPaintTerrain(__worldToTerrainType, __worldToTerrainSubType, __worldPosition.x - 1.0, __worldPosition.z - 1.0, __worldPosition.x + 1.0, __worldPosition.z + 1.0, false);</command>
            <command>           }</command>
            <command>       }</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Replace Terrain Circle">
            <param name="FromSubtype" dispname="From Terrain" vartype="terrainsubtype"></param>
            <param name="ToSubtype" dispname="To Terrain" vartype="terrainsubtype"></param>
            <param name="Center" dispname="" vartype="area" dispradius="">0, 0, 0</param>
            <param name="Radius" dispname="Radius" vartype="stringid" dispradius="">0</param>
            <command>{</command>
            <command>   int __worldFromTerrainType = __calculateTerrainTypeId("%FromSubtype%");</command>
            <command>   int __worldFromTerrainSubType = __calculateSubTerrainTypeId("%FromSubtype%");</command>
            <command>   int __worldToTerrainType = __calculateTerrainTypeId("%ToSubtype%");</command>
            <command>   int __worldToTerrainSubType = __calculateSubTerrainTypeId("%ToSubtype%");</command>
            <command>   vector __worldCenter = vector(%Center%);</command>
            <command>   int __worldLowX = __clampXInsideMap(__xsVectorGetX(__worldCenter) - %Radius%);</command>
            <command>   int __worldLowZ = __clampZInsideMap(__xsVectorGetZ(__worldCenter) - %Radius%);</command>
            <command>   int __worldHighX = __clampXInsideMap(__xsVectorGetX(__worldCenter) + %Radius%);</command>
            <command>   int __worldHighZ = __clampZInsideMap(__xsVectorGetZ(__worldCenter) + %Radius%);</command>
            <command>   int __worldRadiusCheck = %Radius% * %Radius% + %Radius%;</command>
            <command>   vector __worldPosition = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ = __worldLowZ; __worldPosZ &lt; __worldHighZ; __worldPosZ = __worldPosZ + 2){</command>
            <command>       for(int __worldPosX = __worldLowX; __worldPosX &lt; __worldHighX; __worldPosX = __worldPosX + 2){</command>
            <command>           __worldPosition.x = __worldPosX;</command>
            <command>           __worldPosition.z = __worldPosZ;</command>
            <command>           if(xsVectorDistanceSqr(__worldPosition, __worldCenter) &gt; __worldRadiusCheck){</command>
            <command>               continue;</command>
            <command>           }</command>
            <command>           if(trGetTerrainType(__worldPosition) == __worldFromTerrainType &amp;&amp; trGetTerrainSubtype(__worldPosition) == __worldFromTerrainSubType){</command>
            <command>               __paintTerrainLocation(__worldToTerrainType, __worldToTerrainSubType, __worldPosition.x, __worldPosition.z);</command>
            <command>           }</command>
            <command>       }</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Replace Terrain By Indices">
            <param name="FromTerrainType" dispname="From Terrain Type" vartype="stringid">0</param>
            <param name="FromTerrainSubType" dispname="From Terrain Sub Type" vartype="stringid">0</param>
            <param name="ToTerrainType" dispname="To Terrain Type" vartype="stringid">0</param>
            <param name="ToTerrainSubType" dispname="To Terrain Sub Type" vartype="stringid">0</param>
            <command>{</command>
            <command>   int __worldMapSizeX = __getMapSizeX();</command>
            <command>   int __worldMapSizeZ = __getMapSizeZ();</command>
            <command>   vector __worldPosition = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ = 0; __worldPosZ &lt; __worldMapSizeZ; __worldPosZ = __worldPosZ + 2){</command>
            <command>       for(int __worldPosX = 0; __worldPosX &lt; __worldMapSizeX; __worldPosX = __worldPosX + 2){</command>
            <command>           __worldPosition.x = 1.0 + __worldPosX;</command>
            <command>           __worldPosition.z = 1.0 + __worldPosZ;</command>
            <command>           if(trGetTerrainType(__worldPosition) == %FromTerrainType% &amp;&amp; trGetTerrainSubtype(__worldPosition) == %FromTerrainSubType%){</command>
            <command>               trPaintTerrain(%ToTerrainType%, %ToTerrainSubType%, __worldPosition.x - 1.0, __worldPosition.z - 1.0, __worldPosition.x + 1.0, __worldPosition.z + 1.0, false);</command>
            <command>           }</command>
            <command>       }</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Replace Terrain By Indices At Location">
            <param name="FromTerrainType" dispname="From Terrain Type" vartype="stringid">0</param>
            <param name="FromTerrainSubType" dispname="From Terrain Sub Type" vartype="stringid">0</param>
            <param name="ToTerrainType" dispname="To Terrain Type" vartype="stringid">0</param>
            <param name="ToTerrainSubType" dispname="To Terrain Sub Type" vartype="stringid">0</param>
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <command>{</command>
            <command>   vector __terrainPaintLocation = vector(%Area%);</command>
            <command>   float __terrainPaintX = 2.0 * xsFloatToInt(__terrainPaintLocation.x / 2.0);</command>
            <command>   float __terrainPaintZ = 2.0 * xsFloatToInt(__terrainPaintLocation.z / 2.0);</command>
            <command>   if(trGetTerrainType(__terrainPaintLocation) == %FromTerrainType% &amp;&amp; trGetTerrainSubtype(__terrainPaintLocation) == %FromTerrainSubType%){</command>
            <command>       trPaintTerrain(%ToTerrainType%, %ToTerrainSubType%, __terrainPaintX, __terrainPaintZ, __terrainPaintX + 2.0, __terrainPaintZ + 2.0, false);</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Replace Terrain By Indices Rectangle">
            <param name="FromTerrainType" dispname="From Terrain Type" vartype="stringid">0</param>
            <param name="FromTerrainSubType" dispname="From Terrain Sub Type" vartype="stringid">0</param>
            <param name="ToTerrainType" dispname="To Terrain Type" vartype="stringid">0</param>
            <param name="ToTerrainSubType" dispname="To Terrain Sub Type" vartype="stringid">0</param>
            <param name="DstArea" dispname="Area" vartype="rectarea">0,0,0,0</param>
            <command>{</command>
            <command>   int __worldLowX = __clampXInsideMap(__rectangleAreaGetLowX(%DstArea%));</command>
            <command>   int __worldLowZ = __clampZInsideMap(__rectangleAreaGetLowZ(%DstArea%));</command>
            <command>   int __worldHighX = __clampXInsideMap(__rectangleAreaGetHighX(%DstArea%));</command>
            <command>   int __worldHighZ = __clampZInsideMap(__rectangleAreaGetHighZ(%DstArea%));</command>
            <command>   vector __worldPosition = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ = __worldLowZ; __worldPosZ &lt; __worldHighZ; __worldPosZ = __worldPosZ + 2){</command>
            <command>       for(int __worldPosX = __worldLowX; __worldPosX &lt; __worldHighX; __worldPosX = __worldPosX + 2){</command>
            <command>           __worldPosition.x = 1.0 + __worldPosX;</command>
            <command>           __worldPosition.z = 1.0 + __worldPosZ;</command>
            <command>           if(trGetTerrainType(__worldPosition) == %FromTerrainType% &amp;&amp; trGetTerrainSubtype(__worldPosition) == %FromTerrainSubType%){</command>
            <command>               trPaintTerrain(%ToTerrainType%, %ToTerrainSubType%, __worldPosition.x - 1.0, __worldPosition.z - 1.0, __worldPosition.x + 1.0, __worldPosition.z + 1.0, false);</command>
            <command>           }</command>
            <command>       }</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Replace Terrain By Indices Circle">
            <param name="FromTerrainType" dispname="From Terrain Type" vartype="stringid">0</param>
            <param name="FromTerrainSubType" dispname="From Terrain Sub Type" vartype="stringid">0</param>
            <param name="ToTerrainType" dispname="To Terrain Type" vartype="stringid">0</param>
            <param name="ToTerrainSubType" dispname="To Terrain Sub Type" vartype="stringid">0</param>
            <param name="Center" dispname="" vartype="area" dispradius="">0, 0, 0</param>
            <param name="Radius" dispname="Radius" vartype="stringid" dispradius="">0</param>
            <command>{</command>
            <command>   vector __worldCenter = vector(%Center%);</command>
            <command>   int __worldLowX = __clampXInsideMap(__xsVectorGetX(__worldCenter) - %Radius%);</command>
            <command>   int __worldLowZ = __clampZInsideMap(__xsVectorGetZ(__worldCenter) - %Radius%);</command>
            <command>   int __worldHighX = __clampXInsideMap(__xsVectorGetX(__worldCenter) + %Radius%);</command>
            <command>   int __worldHighZ = __clampZInsideMap(__xsVectorGetZ(__worldCenter) + %Radius%);</command>
            <command>   int __worldRadiusCheck = %Radius% * %Radius% + %Radius%;</command>
            <command>   vector __worldPosition = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ = __worldLowZ; __worldPosZ &lt; __worldHighZ; __worldPosZ = __worldPosZ + 2){</command>
            <command>       for(int __worldPosX = __worldLowX; __worldPosX &lt; __worldHighX; __worldPosX = __worldPosX + 2){</command>
            <command>           __worldPosition.x = __worldPosX;</command>
            <command>           __worldPosition.z = __worldPosZ;</command>
            <command>           if(xsVectorDistanceSqr(__worldPosition, __worldCenter) &gt; __worldRadiusCheck){</command>
            <command>               continue;</command>
            <command>           }</command>
            <command>           if(trGetTerrainType(__worldPosition) == %FromTerrainType% &amp;&amp; trGetTerrainSubtype(__worldPosition) == %FromTerrainSubType%){</command>
            <command>               __paintTerrainLocation(%ToTerrainType%, %ToTerrainSubType%, __worldPosition.x, __worldPosition.z);</command>
            <command>           }</command>
            <command>       }</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Set Height">
            <param name="Height" dispname="Height" vartype="stringid">0.0</param>
            <param name="Relative" dispname="Relative" vartype="bool" donotrelax="">false</param>
            <command>{</command>
            <command>   int __worldMapSizeX = __getMapSizeX();</command>
            <command>   int __worldMapSizeZ = __getMapSizeZ();</command>
            <command>   if(%Relative% == false){</command>
            <command>       trChangeTerrainHeight(0, 0, __worldMapSizeX, __worldMapSizeZ, %Height%);</command>
            <command>   } else {</command>
            <command>       vector __worldPosition = vector(0.0, 0.0, 0.0);</command>
            <command>       for(int __worldPosZ = 0; __worldPosZ &lt;= __worldMapSizeZ; __worldPosZ = __worldPosZ + 2){</command>
            <command>           for(int __worldPosX = 0; __worldPosX &lt;= __worldMapSizeX; __worldPosX = __worldPosX + 2){</command>
            <command>               __worldPosition.x = __worldPosX;</command>
            <command>               __worldPosition.z = __worldPosZ;</command>
            <command>               trChangeTerrainHeight(__worldPosX, __worldPosZ, __worldPosX, __worldPosZ, trGetTerrainHeight(__worldPosition) + %Height%);</command>
            <command>           }</command>
            <command>       }</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Set Height At Location">
            <param name="Height" dispname="Height" vartype="stringid">0.0</param>
            <param name="Relative" dispname="Relative" vartype="bool" donotrelax="">false</param>
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <command>{</command>
            <command>   vector __worldVertex = __roundAreaToTileVertex(%Area%);</command>
            <command>   trChangeTerrainHeight(__worldVertex.x, __worldVertex.z, __worldVertex.x, __worldVertex.z, %Relative% ? (trGetTerrainHeight(__worldVertex) + %Height%) : %Height%);</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Set Height At Location Square">
            <param name="Height" dispname="Height" vartype="stringid">0.0</param>
            <param name="Relative" dispname="Relative" vartype="bool" donotrelax="">false</param>
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <command>{</command>
            <command>   vector __worldVertex = vector(%Area%);</command>
            <command>   float __heightSetX = 2.0 * xsFloatToInt(__worldVertex.x / 2.0);</command>
            <command>   float __heightSetZ = 2.0 * xsFloatToInt(__worldVertex.z / 2.0);</command>
            <command>   trChangeTerrainHeight(__heightSetX, __heightSetZ, __heightSetX + 2.0, __heightSetZ + 2.0, %Relative% ? (__getTerrainHeightAccurate(__worldVertex) + %Height%) : %Height%);</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Set Height Rectangle">
            <param name="Height" dispname="Height" vartype="stringid">0.0</param>
            <param name="Relative" dispname="Relative" vartype="bool" donotrelax="">false</param>
            <param name="DstArea" dispname="Area" vartype="rectarea">0,0,0,0</param>
            <command>{</command>
            <command>   int __worldLowX = __clampXInsideMap(__rectangleAreaGetLowX(%DstArea%));</command>
            <command>   int __worldLowZ = __clampZInsideMap(__rectangleAreaGetLowZ(%DstArea%));</command>
            <command>   int __worldHighX = __clampXInsideMap(__rectangleAreaGetHighX(%DstArea%));</command>
            <command>   int __worldHighZ = __clampZInsideMap(__rectangleAreaGetHighZ(%DstArea%));</command>
            <command>   if(%Relative% == false){</command>
            <command>       trChangeTerrainHeight(__worldLowX, __worldLowZ, __worldHighX, __worldHighZ, %Height%);</command>
            <command>   } else {</command>
            <command>       vector __worldPosition = vector(0.0, 0.0, 0.0);</command>
            <command>       for(int __worldPosZ = __worldLowZ; __worldPosZ &lt;= __worldHighZ; __worldPosZ = __worldPosZ + 2){</command>
            <command>           for(int __worldPosX = __worldLowX; __worldPosX &lt;= __worldHighX; __worldPosX = __worldPosX + 2){</command>
            <command>               __worldPosition.x = __worldPosX;</command>
            <command>               __worldPosition.z = __worldPosZ;</command>
            <command>               trChangeTerrainHeight(__worldPosX, __worldPosZ, __worldPosX, __worldPosZ, trGetTerrainHeight(__worldPosition) + %Height%);</command>
            <command>           }</command>
            <command>       }</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Set Height Circle">
            <param name="Height" dispname="Height" vartype="stringid">0.0</param>
            <param name="Relative" dispname="Relative" vartype="bool" donotrelax="">false</param>
            <param name="Center" dispname="" vartype="area" dispradius="">0, 0, 0</param>
            <param name="Radius" dispname="Radius" vartype="stringid" dispradius="">0</param>
            <command>{</command>
            <command>   vector __worldCenter = vector(%Center%);</command>
            <command>   int __worldLowX = __clampXInsideMap(__xsVectorGetX(__worldCenter) - %Radius%);</command>
            <command>   int __worldLowZ = __clampZInsideMap(__xsVectorGetZ(__worldCenter) - %Radius%);</command>
            <command>   int __worldHighX = __clampXInsideMap(__xsVectorGetX(__worldCenter) + %Radius%);</command>
            <command>   int __worldHighZ = __clampZInsideMap(__xsVectorGetZ(__worldCenter) + %Radius%);</command>
            <command>   int __worldRadiusCheck = %Radius% * %Radius% + %Radius%;</command>
            <command>   vector __worldPosition = vector(0.0, 0.0, 0.0);</command>
            <command>   for(int __worldPosZ = __worldLowZ; __worldPosZ &lt;= __worldHighZ; __worldPosZ = __worldPosZ + 2){</command>
            <command>       for(int __worldPosX = __worldLowX; __worldPosX &lt;= __worldHighX; __worldPosX = __worldPosX + 2){</command>
            <command>           __worldPosition.x = __worldPosX;</command>
            <command>           __worldPosition.z = __worldPosZ;</command>
            <command>           if(xsVectorDistanceSqr(__worldPosition, __worldCenter) &gt; __worldRadiusCheck){</command>
            <command>               continue;</command>
            <command>           }</command>
            <command>           vector __worldPositionRounded = __roundAreaToTileVertex(__worldPosition.x, __worldPosition.y, __worldPosition.z);</command>
            <command>           trChangeTerrainHeight(__worldPositionRounded.x, __worldPositionRounded.z, __worldPositionRounded.x, __worldPositionRounded.z, %Relative% ? (trGetTerrainHeight(__worldPositionRounded) + %Height%) : %Height%);</command>
            <command>       }</command>
            <command>   }</command>
            <command>}</command>
        </effect>
        <effect name="World NTL: Set Water">
            <param name="Water" dispname="Water" vartype="water"></param>
            <command>trPaintWaterRectangular("%Water%", -2.0, -2.0, __getMapSizeX(), __getMapSizeZ(), false);</command>
        </effect>
        <effect name="World NTL: Get Terrain Type Indices Declared">
            <param name="TerrainType" dispname="Terrain Type" vartype="stringid">terrainType</param>
            <param name="TerrainSubType" dispname="Terrain Sub Type" vartype="stringid">terrainSubType</param>
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <command>int %TerrainType% = trGetTerrainType(vector(%Area%));</command>
            <command>int %TerrainSubType% = trGetTerrainSubtype(vector(%Area%));</command>
        </effect>
        <effect name="World NTL: Get Terrain Type Indices Set">
            <param name="TerrainType" dispname="Terrain Type" vartype="stringid">terrainType</param>
            <param name="TerrainSubType" dispname="Terrain Sub Type" vartype="stringid">terrainSubType</param>
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <command>/**/%TerrainType% = trGetTerrainType(vector(%Area%));</command>
            <command>/**/%TerrainSubType% = trGetTerrainSubtype(vector(%Area%));</command>
        </effect>
        <effect name="World NTL: Get Location Height Declared">
            <param name="Name" dispname="Name" vartype="stringid">floatVariable</param>
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <command>float %Name% = __getTerrainHeightAccurate(vector(%Area%));</command>
        </effect>
        <effect name="World NTL: Get Location Height Set">
            <param name="Name" dispname="Name" vartype="stringid">floatVariable</param>
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <command>/**/%Name% = __getTerrainHeightAccurate(vector(%Area%));</command>
        </effect>
        <effect name="World NTL: Get Location Steepness Declared">
            <param name="Name" dispname="Name" vartype="stringid">floatVariable</param>
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <command>float %Name% = __worldGetSteepness(vector(%Area%));</command>
        </effect>
        <effect name="World NTL: Get Location Steepness Set">
            <param name="Name" dispname="Name" vartype="stringid">floatVariable</param>
            <param name="Area" dispname="" vartype="area">0, 0, 0</param>
            <command>/**/%Name% = __worldGetSteepness(vector(%Area%));</command>
        </effect>
        <effect name="Camera: Set Fov">
            <param name="Fov" dispname="Fov" vartype="stringId">45.0</param>
            <command>trExecuteConsoleCommand("fov("+%Fov%+")");</command>
        </effect>
        <effect name="Camera NTL: Look At">
            <param name="LookAt" dispname="Look At" vartype="area">0.0, 0.0, 0.0</param>
            <param name="Distance" dispname="Distance" vartype="stringId">100.0</param>
            <param name="Heading" dispname="Heading" vartype="stringId">45.0</param>
            <param name="Tilt" dispname="Tilt" vartype="stringId">45.0</param>
            <param name="Fov" dispname="Fov" vartype="stringId">45.0</param>
            <command>{</command>
            <command>   __CameraParameters __cameraParameters = __cameraParametersFromLookAt(vector(%LookAt%), %Distance%, %Heading%, %Tilt%);</command>
            <command>   trCameraCut(__cameraParameters.position, __cameraParameters.matrixX, __cameraParameters.matrixY, __cameraParameters.matrixZ);</command>
            <command>   trExecuteConsoleCommand("fov("+%Fov%+")");</command>
            <command>}</command>
        </effect>
        <effect name="Camera NTL: Look At Vector">
            <param name="LookAt" dispname="Look At" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <param name="Distance" dispname="Distance" vartype="stringId">100.0</param>
            <param name="Heading" dispname="Heading" vartype="stringId">45.0</param>
            <param name="Tilt" dispname="Tilt" vartype="stringId">45.0</param>
            <param name="Fov" dispname="Fov" vartype="stringId">45.0</param>
            <command>{</command>
            <command>   __CameraParameters __cameraParameters = __cameraParametersFromLookAt(%LookAt%, %Distance%, %Heading%, %Tilt%);</command>
            <command>   trCameraCut(__cameraParameters.position, __cameraParameters.matrixX, __cameraParameters.matrixY, __cameraParameters.matrixZ);</command>
            <command>   trExecuteConsoleCommand("fov("+%Fov%+")");</command>
            <command>}</command>
        </effect>
        <effect name="Camera: Look At Unit">
            <param name="DstObject" dispname="Unit" vartype="unit">-1</param>
            <command>trExecuteConsoleCommand("uiLookAtUnit("+%DstObject%+")");</command>
        </effect>
        <effect name="Camera: Reset Rotation">
            <command>trExecuteConsoleCommand("uiResetInGameCameraRotation()");</command>
        </effect>
        <effect name="Camera: Reset Zoom">
            <command>trExecuteConsoleCommand("uiResetInGameCameraZoom()");</command>
        </effect>
        <effect name="Dynamic Camera Track NTL: Create">
            <param name="LookAt" dispname="Look At" vartype="area">0.0, 0.0, 0.0</param>
            <param name="Distance" dispname="Distance" vartype="stringId">100.0</param>
            <param name="Heading" dispname="Heading" vartype="stringId">45.0</param>
            <param name="Tilt" dispname="Tilt" vartype="stringId">45.0</param>
            <param name="Fov" dispname="Fov" vartype="stringId">45.0</param>
            <param name="Tension" dispname="Tension" vartype="stringId">0.0</param>
            <param name="Continuity" dispname="Continuity" vartype="stringId">0.0</param>
            <param name="Bias" dispname="Bias" vartype="stringId">0.0</param>
            <command>__cameraTrack.create(vector(%LookAt%), %Distance%, %Heading%, %Tilt%, %Fov%, %Tension%, %Continuity%, %Bias%);</command>
        </effect>
        <effect name="Dynamic Camera Track NTL: Create Vector">
            <param name="LookAt" dispname="Look At" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <param name="Distance" dispname="Distance" vartype="stringId">100.0</param>
            <param name="Heading" dispname="Heading" vartype="stringId">45.0</param>
            <param name="Tilt" dispname="Tilt" vartype="stringId">45.0</param>
            <param name="Fov" dispname="Fov" vartype="stringId">45.0</param>
            <param name="Tension" dispname="Tension" vartype="stringId">0.0</param>
            <param name="Continuity" dispname="Continuity" vartype="stringId">0.0</param>
            <param name="Bias" dispname="Bias" vartype="stringId">0.0</param>
            <command>__cameraTrack.create(%LookAt%, %Distance%, %Heading%, %Tilt%, %Fov%, %Tension%, %Continuity%, %Bias%);</command>
        </effect>
        <effect name="Dynamic Camera Track NTL: Add Waypoint">
            <param name="Time" dispname="Time Ms" vartype="stringid">1000.0</param>
            <param name="LookAt" dispname="Look At" vartype="area">0.0, 0.0, 0.0</param>
            <param name="Distance" dispname="Distance" vartype="stringId">100.0</param>
            <param name="Heading" dispname="Heading" vartype="stringId">45.0</param>
            <param name="Tilt" dispname="Tilt" vartype="stringId">45.0</param>
            <param name="Fov" dispname="Fov" vartype="stringId">45.0</param>
            <param name="Tension" dispname="Tension" vartype="stringId">0.0</param>
            <param name="Continuity" dispname="Continuity" vartype="stringId">0.0</param>
            <param name="Bias" dispname="Bias" vartype="stringId">0.0</param>
            <command>__cameraTrack.addWaypoint(%Time%, vector(%LookAt%), %Distance%, %Heading%, %Tilt%, %Fov%, %Tension%, %Continuity%, %Bias%);</command>
        </effect>
        <effect name="Dynamic Camera Track NTL: Add Waypoint Vector">
            <param name="Time" dispname="Time Ms" vartype="stringid">1000.0</param>
            <param name="LookAt" dispname="Look At" vartype="stringid">vector(0.0, 0.0, 0.0)</param>
            <param name="Distance" dispname="Distance" vartype="stringId">100.0</param>
            <param name="Heading" dispname="Heading" vartype="stringId">45.0</param>
            <param name="Tilt" dispname="Tilt" vartype="stringId">45.0</param>
            <param name="Fov" dispname="Fov" vartype="stringId">45.0</param>
            <param name="Tension" dispname="Tension" vartype="stringId">0.0</param>
            <param name="Continuity" dispname="Continuity" vartype="stringId">0.0</param>
            <param name="Bias" dispname="Bias" vartype="stringId">0.0</param>
            <command>__cameraTrack.addWaypoint(%Time%, %LookAt%, %Distance%, %Heading%, %Tilt%, %Fov%, %Tension%, %Continuity%, %Bias%);</command>
        </effect>
        <effect name="Dynamic Camera Track NTL: Play">
            <param name="EventID" dispname="Trigger" vartype="event">-1</param>
            <param name="BlendWithGameCamera" dispname="BlendWithGameCamera" vartype="bool">false</param>
            <param name="BlendTime" dispname="BlendTime" vartype="float">5000</param>
            <command>__cameraTrack.play(%EventID%, %BlendWithGameCamera%, %BlendTime%);</command>
        </effect>
        <effect name="Music: Toggle Battle">
            <command>trExecuteConsoleCommand("musicToggleBattleMode()");</command>
        </effect>
        <effect name="Hotkey: Add (Persist)">
            <param name="Quote" dispname="Quote: &quot;+variableName+&quot; for &quot;" vartype="stringid">q</param>
            <param name="Activation" dispname="Activation" vartype="stringid"></param>
            <param name="Context" dispname="Context" vartype="stringid">game</param>
            <param name="Command" dispname="Command" vartype="stringid"></param>
            <command>{</command>
            <command>   string %Quote% = "\\";</command>
            <command>   string __commandToRun = "%Command%";</command>
            <command>   trExecuteConsoleCommand("map(\"%Activation%\", \"%Context%\", \""+__commandToRun+"\")");</command>
            <command>}</command>
        </effect>
        <effect name="Hotkey: Add Train In Selected (Persist)">
            <param name="Activation" dispname="Activation" vartype="stringid"></param>
            <param name="Context" dispname="Context" vartype="stringid">game</param>
            <param name="Unit" dispname="Protounit" vartype="protounit"></param>
            <param name="Count" dispname="Count" vartype="stringid">1</param>
            <param name="Each" dispname="Each" vartype="bool">false</param>
            <command>{</command>
            <command>   string __quote = "\\";</command>
            <command>   trExecuteConsoleCommand("map(\"%Activation%\", \"%Context%\", \"trainInSelected("+__quote+"%Unit%"+__quote+", %Count%, %Each%)\")");</command>
            <command>}</command>
        </effect>
        <effect name="Display: Console Command Message">
            <param name="Quote" dispname="Quote: &quot;+variableName+&quot; for &quot;" vartype="stringid">q</param>
            <param name="Message" dispname="Message" vartype="stringid"></param>
            <param name="Command" dispname="Command" vartype="stringid"></param>
            <command>{</command>
            <command>   string %Quote% = "\\";</command>
            <command>   string __messageToShow = "%Message%";</command>
            <command>   string __commandToRun = "%Command%";</command>
            <command>   trExecuteConsoleCommand("uiMessageBox(\""+__messageToShow+"\", \""+__commandToRun+"\")");</command>
            <command>}</command>
        </effect>
        <effect name="Display: Defeat Message">
            <param name="Text" dispname="ID" vartype="stringid">You Lose</param>
            <param name="Sound" dispname="Sound" vartype="sound">default</param>
            <param name="IgnoreUserControls" dispname="Ignore User Controls" vartype="bool">true</param>
            <command>trShowLosePopup("%Text%", "%Sound%", %IgnoreUserControls%);</command>
        </effect>
        <effect name="Display: Hide Victory/Defeat Message">
            <command>trLetterBox(true, false);</command>
            <command>trLetterBox(false, false);</command>
        </effect>
        <effect name="Display: Refresh Command Panel">
            <command>trExecuteConsoleCommand("uiRefreshCommandPanel()");</command>
        </effect>
        <effect name="Developer: Run As Fast As Possible (Persist)">
            <param name="Active" dispname="Active" vartype="bool">true</param>
            <command>trExecuteConsoleCommand("toggleRunAsFastAsPossible("+(%Active% ? 0 : 1)+")");</command>
        </effect>
        <effect name="Developer: Toggle XS Debugger">
            <command>trExecuteConsoleCommand("toggleXSDebugger()");</command>
        </effect>
        <effect name="Developer: Open Config Editor (Editor)">
            <command>trExecuteConsoleCommand("openConfigEditor()");</command>
        </effect>
        <effect name="Developer: Open Model System Diagnostics (Editor)">
            <command>trExecuteConsoleCommand("openModelSystemDiagnosticsGui()");</command>
        </effect>
        <effect name="Developer: Open Weathering Type Editor (Editor)">
            <command>trExecuteConsoleCommand("openWeatheringTypeEditorGui()");</command>
        </effect>
        <effect name="Developer: Open Grass Type Editor (Editor)">
            <command>trExecuteConsoleCommand("openGrassTypeEditorGui()");</command>
        </effect>
        <effect name="Render: Toggle Game UI">
            <command>trExecuteConsoleCommand("uiToggleGame()");</command>
        </effect>
    </effects>
</trigger>